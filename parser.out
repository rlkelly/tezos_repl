Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EMPTY_MAP
    GET

Grammar

Rule 0     S' -> body
Rule 1     body -> LBRACKET compound_statement RBRACKET
Rule 2     execution -> compound_statement
Rule 3     execution -> body
Rule 4     compound_statement -> stmt SCOLON
Rule 5     compound_statement -> compound_statement stmt SCOLON
Rule 6     compound_statement -> compound_statement stmt
Rule 7     stmt -> DROP
Rule 8     stmt -> DUP
Rule 9     stmt -> SWAP
Rule 10    stmt -> UNIT
Rule 11    bool -> TRUE
Rule 12    bool -> FALSE
Rule 13    value -> NUMBER
Rule 14    value -> bool
Rule 15    value -> TEXT
Rule 16    value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS
Rule 17    stmt -> EQ
Rule 18    stmt -> NEQ
Rule 19    stmt -> LT
Rule 20    stmt -> GT
Rule 21    stmt -> LE
Rule 22    stmt -> GE
Rule 23    stmt -> OR
Rule 24    stmt -> AND
Rule 25    stmt -> XOR
Rule 26    stmt -> COMPARE
Rule 27    stmt -> NEG
Rule 28    stmt -> ABS
Rule 29    stmt -> ADD
Rule 30    stmt -> SUB
Rule 31    stmt -> MUL
Rule 32    stmt -> EDIV
Rule 33    stmt -> LSL
Rule 34    stmt -> LSR
Rule 35    stmt -> CONCAT
Rule 36    stmt -> SIZE
Rule 37    stmt -> SLICE
Rule 38    stmt -> PAIR
Rule 39    stmt -> CAR
Rule 40    stmt -> CDR
Rule 41    stmt -> EMPTY_SET TYPE
Rule 42    stmt -> MEM
Rule 43    stmt -> UPDATE
Rule 44    stmt -> SOME
Rule 45    stmt -> NONE TYPE
Rule 46    stmt -> LEFT TYPE
Rule 47    stmt -> RIGHT TYPE
Rule 48    stmt -> CONS
Rule 49    stmt -> NIL TYPE
Rule 50    stmt -> NOT
Rule 51    TYPE -> NAT
Rule 52    TYPE -> STRING
Rule 53    TYPE -> INT
Rule 54    TYPE -> BOOL
Rule 55    TYPE -> BYTES
Rule 56    TYPE -> LPARENS LPAIR TYPE TYPE RPARENS
Rule 57    stmt -> PUSH TYPE value
Rule 58    stmt -> FAILWITH

Terminals, with rules where they appear

ABS                  : 28
ADD                  : 29
AND                  : 24
BOOL                 : 54
BYTES                : 55
CAR                  : 39
CDR                  : 40
COMPARE              : 26
CONCAT               : 35
CONS                 : 48
DROP                 : 7
DUP                  : 8
EDIV                 : 32
EMPTY_MAP            : 
EMPTY_SET            : 41
EQ                   : 17
FAILWITH             : 58
FALSE                : 12
GE                   : 22
GET                  : 
GT                   : 20
INT                  : 53
LBRACKET             : 1
LE                   : 21
LEFT                 : 46
LPAIR                : 56
LPARENS              : 16 56
LSL                  : 33
LSR                  : 34
LT                   : 19
MEM                  : 42
MUL                  : 31
NAT                  : 51
NEG                  : 27
NEQ                  : 18
NIL                  : 49
NONE                 : 45
NOT                  : 50
NUMBER               : 13
OR                   : 23
PAIR                 : 38
PAIR_CONSTRUCTOR     : 16
PUSH                 : 57
RBRACKET             : 1
RIGHT                : 47
RPARENS              : 16 56
SCOLON               : 4 5
SIZE                 : 36
SLICE                : 37
SOME                 : 44
STRING               : 52
SUB                  : 30
SWAP                 : 9
TEXT                 : 15
TRUE                 : 11
UNIT                 : 10
UPDATE               : 43
XOR                  : 25
error                : 

Nonterminals, with rules where they appear

TYPE                 : 41 45 46 47 49 56 56 57
body                 : 3 0
bool                 : 14
compound_statement   : 1 2 5 6
execution            : 
stmt                 : 4 5 6
value                : 16 16 57

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . LBRACKET compound_statement RBRACKET

    LBRACKET        shift and go to state 2

    body                           shift and go to state 1

state 1

    (0) S' -> body .



state 2

    (1) body -> LBRACKET . compound_statement RBRACKET
    (4) compound_statement -> . stmt SCOLON
    (5) compound_statement -> . compound_statement stmt SCOLON
    (6) compound_statement -> . compound_statement stmt
    (7) stmt -> . DROP
    (8) stmt -> . DUP
    (9) stmt -> . SWAP
    (10) stmt -> . UNIT
    (17) stmt -> . EQ
    (18) stmt -> . NEQ
    (19) stmt -> . LT
    (20) stmt -> . GT
    (21) stmt -> . LE
    (22) stmt -> . GE
    (23) stmt -> . OR
    (24) stmt -> . AND
    (25) stmt -> . XOR
    (26) stmt -> . COMPARE
    (27) stmt -> . NEG
    (28) stmt -> . ABS
    (29) stmt -> . ADD
    (30) stmt -> . SUB
    (31) stmt -> . MUL
    (32) stmt -> . EDIV
    (33) stmt -> . LSL
    (34) stmt -> . LSR
    (35) stmt -> . CONCAT
    (36) stmt -> . SIZE
    (37) stmt -> . SLICE
    (38) stmt -> . PAIR
    (39) stmt -> . CAR
    (40) stmt -> . CDR
    (41) stmt -> . EMPTY_SET TYPE
    (42) stmt -> . MEM
    (43) stmt -> . UPDATE
    (44) stmt -> . SOME
    (45) stmt -> . NONE TYPE
    (46) stmt -> . LEFT TYPE
    (47) stmt -> . RIGHT TYPE
    (48) stmt -> . CONS
    (49) stmt -> . NIL TYPE
    (50) stmt -> . NOT
    (57) stmt -> . PUSH TYPE value
    (58) stmt -> . FAILWITH

    DROP            shift and go to state 5
    DUP             shift and go to state 6
    SWAP            shift and go to state 7
    UNIT            shift and go to state 8
    EQ              shift and go to state 9
    NEQ             shift and go to state 10
    LT              shift and go to state 11
    GT              shift and go to state 12
    LE              shift and go to state 13
    GE              shift and go to state 14
    OR              shift and go to state 15
    AND             shift and go to state 16
    XOR             shift and go to state 17
    COMPARE         shift and go to state 18
    NEG             shift and go to state 19
    ABS             shift and go to state 20
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    EDIV            shift and go to state 24
    LSL             shift and go to state 25
    LSR             shift and go to state 26
    CONCAT          shift and go to state 27
    SIZE            shift and go to state 28
    SLICE           shift and go to state 29
    PAIR            shift and go to state 30
    CAR             shift and go to state 31
    CDR             shift and go to state 32
    EMPTY_SET       shift and go to state 33
    MEM             shift and go to state 34
    UPDATE          shift and go to state 35
    SOME            shift and go to state 36
    NONE            shift and go to state 37
    LEFT            shift and go to state 38
    RIGHT           shift and go to state 39
    CONS            shift and go to state 40
    NIL             shift and go to state 41
    NOT             shift and go to state 42
    PUSH            shift and go to state 43
    FAILWITH        shift and go to state 44

    compound_statement             shift and go to state 3
    stmt                           shift and go to state 4

state 3

    (1) body -> LBRACKET compound_statement . RBRACKET
    (5) compound_statement -> compound_statement . stmt SCOLON
    (6) compound_statement -> compound_statement . stmt
    (7) stmt -> . DROP
    (8) stmt -> . DUP
    (9) stmt -> . SWAP
    (10) stmt -> . UNIT
    (17) stmt -> . EQ
    (18) stmt -> . NEQ
    (19) stmt -> . LT
    (20) stmt -> . GT
    (21) stmt -> . LE
    (22) stmt -> . GE
    (23) stmt -> . OR
    (24) stmt -> . AND
    (25) stmt -> . XOR
    (26) stmt -> . COMPARE
    (27) stmt -> . NEG
    (28) stmt -> . ABS
    (29) stmt -> . ADD
    (30) stmt -> . SUB
    (31) stmt -> . MUL
    (32) stmt -> . EDIV
    (33) stmt -> . LSL
    (34) stmt -> . LSR
    (35) stmt -> . CONCAT
    (36) stmt -> . SIZE
    (37) stmt -> . SLICE
    (38) stmt -> . PAIR
    (39) stmt -> . CAR
    (40) stmt -> . CDR
    (41) stmt -> . EMPTY_SET TYPE
    (42) stmt -> . MEM
    (43) stmt -> . UPDATE
    (44) stmt -> . SOME
    (45) stmt -> . NONE TYPE
    (46) stmt -> . LEFT TYPE
    (47) stmt -> . RIGHT TYPE
    (48) stmt -> . CONS
    (49) stmt -> . NIL TYPE
    (50) stmt -> . NOT
    (57) stmt -> . PUSH TYPE value
    (58) stmt -> . FAILWITH

    RBRACKET        shift and go to state 45
    DROP            shift and go to state 5
    DUP             shift and go to state 6
    SWAP            shift and go to state 7
    UNIT            shift and go to state 8
    EQ              shift and go to state 9
    NEQ             shift and go to state 10
    LT              shift and go to state 11
    GT              shift and go to state 12
    LE              shift and go to state 13
    GE              shift and go to state 14
    OR              shift and go to state 15
    AND             shift and go to state 16
    XOR             shift and go to state 17
    COMPARE         shift and go to state 18
    NEG             shift and go to state 19
    ABS             shift and go to state 20
    ADD             shift and go to state 21
    SUB             shift and go to state 22
    MUL             shift and go to state 23
    EDIV            shift and go to state 24
    LSL             shift and go to state 25
    LSR             shift and go to state 26
    CONCAT          shift and go to state 27
    SIZE            shift and go to state 28
    SLICE           shift and go to state 29
    PAIR            shift and go to state 30
    CAR             shift and go to state 31
    CDR             shift and go to state 32
    EMPTY_SET       shift and go to state 33
    MEM             shift and go to state 34
    UPDATE          shift and go to state 35
    SOME            shift and go to state 36
    NONE            shift and go to state 37
    LEFT            shift and go to state 38
    RIGHT           shift and go to state 39
    CONS            shift and go to state 40
    NIL             shift and go to state 41
    NOT             shift and go to state 42
    PUSH            shift and go to state 43
    FAILWITH        shift and go to state 44

    stmt                           shift and go to state 46

state 4

    (4) compound_statement -> stmt . SCOLON

    SCOLON          shift and go to state 47


state 5

    (7) stmt -> DROP .

    SCOLON          reduce using rule 7 (stmt -> DROP .)
    RBRACKET        reduce using rule 7 (stmt -> DROP .)
    DROP            reduce using rule 7 (stmt -> DROP .)
    DUP             reduce using rule 7 (stmt -> DROP .)
    SWAP            reduce using rule 7 (stmt -> DROP .)
    UNIT            reduce using rule 7 (stmt -> DROP .)
    EQ              reduce using rule 7 (stmt -> DROP .)
    NEQ             reduce using rule 7 (stmt -> DROP .)
    LT              reduce using rule 7 (stmt -> DROP .)
    GT              reduce using rule 7 (stmt -> DROP .)
    LE              reduce using rule 7 (stmt -> DROP .)
    GE              reduce using rule 7 (stmt -> DROP .)
    OR              reduce using rule 7 (stmt -> DROP .)
    AND             reduce using rule 7 (stmt -> DROP .)
    XOR             reduce using rule 7 (stmt -> DROP .)
    COMPARE         reduce using rule 7 (stmt -> DROP .)
    NEG             reduce using rule 7 (stmt -> DROP .)
    ABS             reduce using rule 7 (stmt -> DROP .)
    ADD             reduce using rule 7 (stmt -> DROP .)
    SUB             reduce using rule 7 (stmt -> DROP .)
    MUL             reduce using rule 7 (stmt -> DROP .)
    EDIV            reduce using rule 7 (stmt -> DROP .)
    LSL             reduce using rule 7 (stmt -> DROP .)
    LSR             reduce using rule 7 (stmt -> DROP .)
    CONCAT          reduce using rule 7 (stmt -> DROP .)
    SIZE            reduce using rule 7 (stmt -> DROP .)
    SLICE           reduce using rule 7 (stmt -> DROP .)
    PAIR            reduce using rule 7 (stmt -> DROP .)
    CAR             reduce using rule 7 (stmt -> DROP .)
    CDR             reduce using rule 7 (stmt -> DROP .)
    EMPTY_SET       reduce using rule 7 (stmt -> DROP .)
    MEM             reduce using rule 7 (stmt -> DROP .)
    UPDATE          reduce using rule 7 (stmt -> DROP .)
    SOME            reduce using rule 7 (stmt -> DROP .)
    NONE            reduce using rule 7 (stmt -> DROP .)
    LEFT            reduce using rule 7 (stmt -> DROP .)
    RIGHT           reduce using rule 7 (stmt -> DROP .)
    CONS            reduce using rule 7 (stmt -> DROP .)
    NIL             reduce using rule 7 (stmt -> DROP .)
    NOT             reduce using rule 7 (stmt -> DROP .)
    PUSH            reduce using rule 7 (stmt -> DROP .)
    FAILWITH        reduce using rule 7 (stmt -> DROP .)


state 6

    (8) stmt -> DUP .

    SCOLON          reduce using rule 8 (stmt -> DUP .)
    RBRACKET        reduce using rule 8 (stmt -> DUP .)
    DROP            reduce using rule 8 (stmt -> DUP .)
    DUP             reduce using rule 8 (stmt -> DUP .)
    SWAP            reduce using rule 8 (stmt -> DUP .)
    UNIT            reduce using rule 8 (stmt -> DUP .)
    EQ              reduce using rule 8 (stmt -> DUP .)
    NEQ             reduce using rule 8 (stmt -> DUP .)
    LT              reduce using rule 8 (stmt -> DUP .)
    GT              reduce using rule 8 (stmt -> DUP .)
    LE              reduce using rule 8 (stmt -> DUP .)
    GE              reduce using rule 8 (stmt -> DUP .)
    OR              reduce using rule 8 (stmt -> DUP .)
    AND             reduce using rule 8 (stmt -> DUP .)
    XOR             reduce using rule 8 (stmt -> DUP .)
    COMPARE         reduce using rule 8 (stmt -> DUP .)
    NEG             reduce using rule 8 (stmt -> DUP .)
    ABS             reduce using rule 8 (stmt -> DUP .)
    ADD             reduce using rule 8 (stmt -> DUP .)
    SUB             reduce using rule 8 (stmt -> DUP .)
    MUL             reduce using rule 8 (stmt -> DUP .)
    EDIV            reduce using rule 8 (stmt -> DUP .)
    LSL             reduce using rule 8 (stmt -> DUP .)
    LSR             reduce using rule 8 (stmt -> DUP .)
    CONCAT          reduce using rule 8 (stmt -> DUP .)
    SIZE            reduce using rule 8 (stmt -> DUP .)
    SLICE           reduce using rule 8 (stmt -> DUP .)
    PAIR            reduce using rule 8 (stmt -> DUP .)
    CAR             reduce using rule 8 (stmt -> DUP .)
    CDR             reduce using rule 8 (stmt -> DUP .)
    EMPTY_SET       reduce using rule 8 (stmt -> DUP .)
    MEM             reduce using rule 8 (stmt -> DUP .)
    UPDATE          reduce using rule 8 (stmt -> DUP .)
    SOME            reduce using rule 8 (stmt -> DUP .)
    NONE            reduce using rule 8 (stmt -> DUP .)
    LEFT            reduce using rule 8 (stmt -> DUP .)
    RIGHT           reduce using rule 8 (stmt -> DUP .)
    CONS            reduce using rule 8 (stmt -> DUP .)
    NIL             reduce using rule 8 (stmt -> DUP .)
    NOT             reduce using rule 8 (stmt -> DUP .)
    PUSH            reduce using rule 8 (stmt -> DUP .)
    FAILWITH        reduce using rule 8 (stmt -> DUP .)


state 7

    (9) stmt -> SWAP .

    SCOLON          reduce using rule 9 (stmt -> SWAP .)
    RBRACKET        reduce using rule 9 (stmt -> SWAP .)
    DROP            reduce using rule 9 (stmt -> SWAP .)
    DUP             reduce using rule 9 (stmt -> SWAP .)
    SWAP            reduce using rule 9 (stmt -> SWAP .)
    UNIT            reduce using rule 9 (stmt -> SWAP .)
    EQ              reduce using rule 9 (stmt -> SWAP .)
    NEQ             reduce using rule 9 (stmt -> SWAP .)
    LT              reduce using rule 9 (stmt -> SWAP .)
    GT              reduce using rule 9 (stmt -> SWAP .)
    LE              reduce using rule 9 (stmt -> SWAP .)
    GE              reduce using rule 9 (stmt -> SWAP .)
    OR              reduce using rule 9 (stmt -> SWAP .)
    AND             reduce using rule 9 (stmt -> SWAP .)
    XOR             reduce using rule 9 (stmt -> SWAP .)
    COMPARE         reduce using rule 9 (stmt -> SWAP .)
    NEG             reduce using rule 9 (stmt -> SWAP .)
    ABS             reduce using rule 9 (stmt -> SWAP .)
    ADD             reduce using rule 9 (stmt -> SWAP .)
    SUB             reduce using rule 9 (stmt -> SWAP .)
    MUL             reduce using rule 9 (stmt -> SWAP .)
    EDIV            reduce using rule 9 (stmt -> SWAP .)
    LSL             reduce using rule 9 (stmt -> SWAP .)
    LSR             reduce using rule 9 (stmt -> SWAP .)
    CONCAT          reduce using rule 9 (stmt -> SWAP .)
    SIZE            reduce using rule 9 (stmt -> SWAP .)
    SLICE           reduce using rule 9 (stmt -> SWAP .)
    PAIR            reduce using rule 9 (stmt -> SWAP .)
    CAR             reduce using rule 9 (stmt -> SWAP .)
    CDR             reduce using rule 9 (stmt -> SWAP .)
    EMPTY_SET       reduce using rule 9 (stmt -> SWAP .)
    MEM             reduce using rule 9 (stmt -> SWAP .)
    UPDATE          reduce using rule 9 (stmt -> SWAP .)
    SOME            reduce using rule 9 (stmt -> SWAP .)
    NONE            reduce using rule 9 (stmt -> SWAP .)
    LEFT            reduce using rule 9 (stmt -> SWAP .)
    RIGHT           reduce using rule 9 (stmt -> SWAP .)
    CONS            reduce using rule 9 (stmt -> SWAP .)
    NIL             reduce using rule 9 (stmt -> SWAP .)
    NOT             reduce using rule 9 (stmt -> SWAP .)
    PUSH            reduce using rule 9 (stmt -> SWAP .)
    FAILWITH        reduce using rule 9 (stmt -> SWAP .)


state 8

    (10) stmt -> UNIT .

    SCOLON          reduce using rule 10 (stmt -> UNIT .)
    RBRACKET        reduce using rule 10 (stmt -> UNIT .)
    DROP            reduce using rule 10 (stmt -> UNIT .)
    DUP             reduce using rule 10 (stmt -> UNIT .)
    SWAP            reduce using rule 10 (stmt -> UNIT .)
    UNIT            reduce using rule 10 (stmt -> UNIT .)
    EQ              reduce using rule 10 (stmt -> UNIT .)
    NEQ             reduce using rule 10 (stmt -> UNIT .)
    LT              reduce using rule 10 (stmt -> UNIT .)
    GT              reduce using rule 10 (stmt -> UNIT .)
    LE              reduce using rule 10 (stmt -> UNIT .)
    GE              reduce using rule 10 (stmt -> UNIT .)
    OR              reduce using rule 10 (stmt -> UNIT .)
    AND             reduce using rule 10 (stmt -> UNIT .)
    XOR             reduce using rule 10 (stmt -> UNIT .)
    COMPARE         reduce using rule 10 (stmt -> UNIT .)
    NEG             reduce using rule 10 (stmt -> UNIT .)
    ABS             reduce using rule 10 (stmt -> UNIT .)
    ADD             reduce using rule 10 (stmt -> UNIT .)
    SUB             reduce using rule 10 (stmt -> UNIT .)
    MUL             reduce using rule 10 (stmt -> UNIT .)
    EDIV            reduce using rule 10 (stmt -> UNIT .)
    LSL             reduce using rule 10 (stmt -> UNIT .)
    LSR             reduce using rule 10 (stmt -> UNIT .)
    CONCAT          reduce using rule 10 (stmt -> UNIT .)
    SIZE            reduce using rule 10 (stmt -> UNIT .)
    SLICE           reduce using rule 10 (stmt -> UNIT .)
    PAIR            reduce using rule 10 (stmt -> UNIT .)
    CAR             reduce using rule 10 (stmt -> UNIT .)
    CDR             reduce using rule 10 (stmt -> UNIT .)
    EMPTY_SET       reduce using rule 10 (stmt -> UNIT .)
    MEM             reduce using rule 10 (stmt -> UNIT .)
    UPDATE          reduce using rule 10 (stmt -> UNIT .)
    SOME            reduce using rule 10 (stmt -> UNIT .)
    NONE            reduce using rule 10 (stmt -> UNIT .)
    LEFT            reduce using rule 10 (stmt -> UNIT .)
    RIGHT           reduce using rule 10 (stmt -> UNIT .)
    CONS            reduce using rule 10 (stmt -> UNIT .)
    NIL             reduce using rule 10 (stmt -> UNIT .)
    NOT             reduce using rule 10 (stmt -> UNIT .)
    PUSH            reduce using rule 10 (stmt -> UNIT .)
    FAILWITH        reduce using rule 10 (stmt -> UNIT .)


state 9

    (17) stmt -> EQ .

    SCOLON          reduce using rule 17 (stmt -> EQ .)
    RBRACKET        reduce using rule 17 (stmt -> EQ .)
    DROP            reduce using rule 17 (stmt -> EQ .)
    DUP             reduce using rule 17 (stmt -> EQ .)
    SWAP            reduce using rule 17 (stmt -> EQ .)
    UNIT            reduce using rule 17 (stmt -> EQ .)
    EQ              reduce using rule 17 (stmt -> EQ .)
    NEQ             reduce using rule 17 (stmt -> EQ .)
    LT              reduce using rule 17 (stmt -> EQ .)
    GT              reduce using rule 17 (stmt -> EQ .)
    LE              reduce using rule 17 (stmt -> EQ .)
    GE              reduce using rule 17 (stmt -> EQ .)
    OR              reduce using rule 17 (stmt -> EQ .)
    AND             reduce using rule 17 (stmt -> EQ .)
    XOR             reduce using rule 17 (stmt -> EQ .)
    COMPARE         reduce using rule 17 (stmt -> EQ .)
    NEG             reduce using rule 17 (stmt -> EQ .)
    ABS             reduce using rule 17 (stmt -> EQ .)
    ADD             reduce using rule 17 (stmt -> EQ .)
    SUB             reduce using rule 17 (stmt -> EQ .)
    MUL             reduce using rule 17 (stmt -> EQ .)
    EDIV            reduce using rule 17 (stmt -> EQ .)
    LSL             reduce using rule 17 (stmt -> EQ .)
    LSR             reduce using rule 17 (stmt -> EQ .)
    CONCAT          reduce using rule 17 (stmt -> EQ .)
    SIZE            reduce using rule 17 (stmt -> EQ .)
    SLICE           reduce using rule 17 (stmt -> EQ .)
    PAIR            reduce using rule 17 (stmt -> EQ .)
    CAR             reduce using rule 17 (stmt -> EQ .)
    CDR             reduce using rule 17 (stmt -> EQ .)
    EMPTY_SET       reduce using rule 17 (stmt -> EQ .)
    MEM             reduce using rule 17 (stmt -> EQ .)
    UPDATE          reduce using rule 17 (stmt -> EQ .)
    SOME            reduce using rule 17 (stmt -> EQ .)
    NONE            reduce using rule 17 (stmt -> EQ .)
    LEFT            reduce using rule 17 (stmt -> EQ .)
    RIGHT           reduce using rule 17 (stmt -> EQ .)
    CONS            reduce using rule 17 (stmt -> EQ .)
    NIL             reduce using rule 17 (stmt -> EQ .)
    NOT             reduce using rule 17 (stmt -> EQ .)
    PUSH            reduce using rule 17 (stmt -> EQ .)
    FAILWITH        reduce using rule 17 (stmt -> EQ .)


state 10

    (18) stmt -> NEQ .

    SCOLON          reduce using rule 18 (stmt -> NEQ .)
    RBRACKET        reduce using rule 18 (stmt -> NEQ .)
    DROP            reduce using rule 18 (stmt -> NEQ .)
    DUP             reduce using rule 18 (stmt -> NEQ .)
    SWAP            reduce using rule 18 (stmt -> NEQ .)
    UNIT            reduce using rule 18 (stmt -> NEQ .)
    EQ              reduce using rule 18 (stmt -> NEQ .)
    NEQ             reduce using rule 18 (stmt -> NEQ .)
    LT              reduce using rule 18 (stmt -> NEQ .)
    GT              reduce using rule 18 (stmt -> NEQ .)
    LE              reduce using rule 18 (stmt -> NEQ .)
    GE              reduce using rule 18 (stmt -> NEQ .)
    OR              reduce using rule 18 (stmt -> NEQ .)
    AND             reduce using rule 18 (stmt -> NEQ .)
    XOR             reduce using rule 18 (stmt -> NEQ .)
    COMPARE         reduce using rule 18 (stmt -> NEQ .)
    NEG             reduce using rule 18 (stmt -> NEQ .)
    ABS             reduce using rule 18 (stmt -> NEQ .)
    ADD             reduce using rule 18 (stmt -> NEQ .)
    SUB             reduce using rule 18 (stmt -> NEQ .)
    MUL             reduce using rule 18 (stmt -> NEQ .)
    EDIV            reduce using rule 18 (stmt -> NEQ .)
    LSL             reduce using rule 18 (stmt -> NEQ .)
    LSR             reduce using rule 18 (stmt -> NEQ .)
    CONCAT          reduce using rule 18 (stmt -> NEQ .)
    SIZE            reduce using rule 18 (stmt -> NEQ .)
    SLICE           reduce using rule 18 (stmt -> NEQ .)
    PAIR            reduce using rule 18 (stmt -> NEQ .)
    CAR             reduce using rule 18 (stmt -> NEQ .)
    CDR             reduce using rule 18 (stmt -> NEQ .)
    EMPTY_SET       reduce using rule 18 (stmt -> NEQ .)
    MEM             reduce using rule 18 (stmt -> NEQ .)
    UPDATE          reduce using rule 18 (stmt -> NEQ .)
    SOME            reduce using rule 18 (stmt -> NEQ .)
    NONE            reduce using rule 18 (stmt -> NEQ .)
    LEFT            reduce using rule 18 (stmt -> NEQ .)
    RIGHT           reduce using rule 18 (stmt -> NEQ .)
    CONS            reduce using rule 18 (stmt -> NEQ .)
    NIL             reduce using rule 18 (stmt -> NEQ .)
    NOT             reduce using rule 18 (stmt -> NEQ .)
    PUSH            reduce using rule 18 (stmt -> NEQ .)
    FAILWITH        reduce using rule 18 (stmt -> NEQ .)


state 11

    (19) stmt -> LT .

    SCOLON          reduce using rule 19 (stmt -> LT .)
    RBRACKET        reduce using rule 19 (stmt -> LT .)
    DROP            reduce using rule 19 (stmt -> LT .)
    DUP             reduce using rule 19 (stmt -> LT .)
    SWAP            reduce using rule 19 (stmt -> LT .)
    UNIT            reduce using rule 19 (stmt -> LT .)
    EQ              reduce using rule 19 (stmt -> LT .)
    NEQ             reduce using rule 19 (stmt -> LT .)
    LT              reduce using rule 19 (stmt -> LT .)
    GT              reduce using rule 19 (stmt -> LT .)
    LE              reduce using rule 19 (stmt -> LT .)
    GE              reduce using rule 19 (stmt -> LT .)
    OR              reduce using rule 19 (stmt -> LT .)
    AND             reduce using rule 19 (stmt -> LT .)
    XOR             reduce using rule 19 (stmt -> LT .)
    COMPARE         reduce using rule 19 (stmt -> LT .)
    NEG             reduce using rule 19 (stmt -> LT .)
    ABS             reduce using rule 19 (stmt -> LT .)
    ADD             reduce using rule 19 (stmt -> LT .)
    SUB             reduce using rule 19 (stmt -> LT .)
    MUL             reduce using rule 19 (stmt -> LT .)
    EDIV            reduce using rule 19 (stmt -> LT .)
    LSL             reduce using rule 19 (stmt -> LT .)
    LSR             reduce using rule 19 (stmt -> LT .)
    CONCAT          reduce using rule 19 (stmt -> LT .)
    SIZE            reduce using rule 19 (stmt -> LT .)
    SLICE           reduce using rule 19 (stmt -> LT .)
    PAIR            reduce using rule 19 (stmt -> LT .)
    CAR             reduce using rule 19 (stmt -> LT .)
    CDR             reduce using rule 19 (stmt -> LT .)
    EMPTY_SET       reduce using rule 19 (stmt -> LT .)
    MEM             reduce using rule 19 (stmt -> LT .)
    UPDATE          reduce using rule 19 (stmt -> LT .)
    SOME            reduce using rule 19 (stmt -> LT .)
    NONE            reduce using rule 19 (stmt -> LT .)
    LEFT            reduce using rule 19 (stmt -> LT .)
    RIGHT           reduce using rule 19 (stmt -> LT .)
    CONS            reduce using rule 19 (stmt -> LT .)
    NIL             reduce using rule 19 (stmt -> LT .)
    NOT             reduce using rule 19 (stmt -> LT .)
    PUSH            reduce using rule 19 (stmt -> LT .)
    FAILWITH        reduce using rule 19 (stmt -> LT .)


state 12

    (20) stmt -> GT .

    SCOLON          reduce using rule 20 (stmt -> GT .)
    RBRACKET        reduce using rule 20 (stmt -> GT .)
    DROP            reduce using rule 20 (stmt -> GT .)
    DUP             reduce using rule 20 (stmt -> GT .)
    SWAP            reduce using rule 20 (stmt -> GT .)
    UNIT            reduce using rule 20 (stmt -> GT .)
    EQ              reduce using rule 20 (stmt -> GT .)
    NEQ             reduce using rule 20 (stmt -> GT .)
    LT              reduce using rule 20 (stmt -> GT .)
    GT              reduce using rule 20 (stmt -> GT .)
    LE              reduce using rule 20 (stmt -> GT .)
    GE              reduce using rule 20 (stmt -> GT .)
    OR              reduce using rule 20 (stmt -> GT .)
    AND             reduce using rule 20 (stmt -> GT .)
    XOR             reduce using rule 20 (stmt -> GT .)
    COMPARE         reduce using rule 20 (stmt -> GT .)
    NEG             reduce using rule 20 (stmt -> GT .)
    ABS             reduce using rule 20 (stmt -> GT .)
    ADD             reduce using rule 20 (stmt -> GT .)
    SUB             reduce using rule 20 (stmt -> GT .)
    MUL             reduce using rule 20 (stmt -> GT .)
    EDIV            reduce using rule 20 (stmt -> GT .)
    LSL             reduce using rule 20 (stmt -> GT .)
    LSR             reduce using rule 20 (stmt -> GT .)
    CONCAT          reduce using rule 20 (stmt -> GT .)
    SIZE            reduce using rule 20 (stmt -> GT .)
    SLICE           reduce using rule 20 (stmt -> GT .)
    PAIR            reduce using rule 20 (stmt -> GT .)
    CAR             reduce using rule 20 (stmt -> GT .)
    CDR             reduce using rule 20 (stmt -> GT .)
    EMPTY_SET       reduce using rule 20 (stmt -> GT .)
    MEM             reduce using rule 20 (stmt -> GT .)
    UPDATE          reduce using rule 20 (stmt -> GT .)
    SOME            reduce using rule 20 (stmt -> GT .)
    NONE            reduce using rule 20 (stmt -> GT .)
    LEFT            reduce using rule 20 (stmt -> GT .)
    RIGHT           reduce using rule 20 (stmt -> GT .)
    CONS            reduce using rule 20 (stmt -> GT .)
    NIL             reduce using rule 20 (stmt -> GT .)
    NOT             reduce using rule 20 (stmt -> GT .)
    PUSH            reduce using rule 20 (stmt -> GT .)
    FAILWITH        reduce using rule 20 (stmt -> GT .)


state 13

    (21) stmt -> LE .

    SCOLON          reduce using rule 21 (stmt -> LE .)
    RBRACKET        reduce using rule 21 (stmt -> LE .)
    DROP            reduce using rule 21 (stmt -> LE .)
    DUP             reduce using rule 21 (stmt -> LE .)
    SWAP            reduce using rule 21 (stmt -> LE .)
    UNIT            reduce using rule 21 (stmt -> LE .)
    EQ              reduce using rule 21 (stmt -> LE .)
    NEQ             reduce using rule 21 (stmt -> LE .)
    LT              reduce using rule 21 (stmt -> LE .)
    GT              reduce using rule 21 (stmt -> LE .)
    LE              reduce using rule 21 (stmt -> LE .)
    GE              reduce using rule 21 (stmt -> LE .)
    OR              reduce using rule 21 (stmt -> LE .)
    AND             reduce using rule 21 (stmt -> LE .)
    XOR             reduce using rule 21 (stmt -> LE .)
    COMPARE         reduce using rule 21 (stmt -> LE .)
    NEG             reduce using rule 21 (stmt -> LE .)
    ABS             reduce using rule 21 (stmt -> LE .)
    ADD             reduce using rule 21 (stmt -> LE .)
    SUB             reduce using rule 21 (stmt -> LE .)
    MUL             reduce using rule 21 (stmt -> LE .)
    EDIV            reduce using rule 21 (stmt -> LE .)
    LSL             reduce using rule 21 (stmt -> LE .)
    LSR             reduce using rule 21 (stmt -> LE .)
    CONCAT          reduce using rule 21 (stmt -> LE .)
    SIZE            reduce using rule 21 (stmt -> LE .)
    SLICE           reduce using rule 21 (stmt -> LE .)
    PAIR            reduce using rule 21 (stmt -> LE .)
    CAR             reduce using rule 21 (stmt -> LE .)
    CDR             reduce using rule 21 (stmt -> LE .)
    EMPTY_SET       reduce using rule 21 (stmt -> LE .)
    MEM             reduce using rule 21 (stmt -> LE .)
    UPDATE          reduce using rule 21 (stmt -> LE .)
    SOME            reduce using rule 21 (stmt -> LE .)
    NONE            reduce using rule 21 (stmt -> LE .)
    LEFT            reduce using rule 21 (stmt -> LE .)
    RIGHT           reduce using rule 21 (stmt -> LE .)
    CONS            reduce using rule 21 (stmt -> LE .)
    NIL             reduce using rule 21 (stmt -> LE .)
    NOT             reduce using rule 21 (stmt -> LE .)
    PUSH            reduce using rule 21 (stmt -> LE .)
    FAILWITH        reduce using rule 21 (stmt -> LE .)


state 14

    (22) stmt -> GE .

    SCOLON          reduce using rule 22 (stmt -> GE .)
    RBRACKET        reduce using rule 22 (stmt -> GE .)
    DROP            reduce using rule 22 (stmt -> GE .)
    DUP             reduce using rule 22 (stmt -> GE .)
    SWAP            reduce using rule 22 (stmt -> GE .)
    UNIT            reduce using rule 22 (stmt -> GE .)
    EQ              reduce using rule 22 (stmt -> GE .)
    NEQ             reduce using rule 22 (stmt -> GE .)
    LT              reduce using rule 22 (stmt -> GE .)
    GT              reduce using rule 22 (stmt -> GE .)
    LE              reduce using rule 22 (stmt -> GE .)
    GE              reduce using rule 22 (stmt -> GE .)
    OR              reduce using rule 22 (stmt -> GE .)
    AND             reduce using rule 22 (stmt -> GE .)
    XOR             reduce using rule 22 (stmt -> GE .)
    COMPARE         reduce using rule 22 (stmt -> GE .)
    NEG             reduce using rule 22 (stmt -> GE .)
    ABS             reduce using rule 22 (stmt -> GE .)
    ADD             reduce using rule 22 (stmt -> GE .)
    SUB             reduce using rule 22 (stmt -> GE .)
    MUL             reduce using rule 22 (stmt -> GE .)
    EDIV            reduce using rule 22 (stmt -> GE .)
    LSL             reduce using rule 22 (stmt -> GE .)
    LSR             reduce using rule 22 (stmt -> GE .)
    CONCAT          reduce using rule 22 (stmt -> GE .)
    SIZE            reduce using rule 22 (stmt -> GE .)
    SLICE           reduce using rule 22 (stmt -> GE .)
    PAIR            reduce using rule 22 (stmt -> GE .)
    CAR             reduce using rule 22 (stmt -> GE .)
    CDR             reduce using rule 22 (stmt -> GE .)
    EMPTY_SET       reduce using rule 22 (stmt -> GE .)
    MEM             reduce using rule 22 (stmt -> GE .)
    UPDATE          reduce using rule 22 (stmt -> GE .)
    SOME            reduce using rule 22 (stmt -> GE .)
    NONE            reduce using rule 22 (stmt -> GE .)
    LEFT            reduce using rule 22 (stmt -> GE .)
    RIGHT           reduce using rule 22 (stmt -> GE .)
    CONS            reduce using rule 22 (stmt -> GE .)
    NIL             reduce using rule 22 (stmt -> GE .)
    NOT             reduce using rule 22 (stmt -> GE .)
    PUSH            reduce using rule 22 (stmt -> GE .)
    FAILWITH        reduce using rule 22 (stmt -> GE .)


state 15

    (23) stmt -> OR .

    SCOLON          reduce using rule 23 (stmt -> OR .)
    RBRACKET        reduce using rule 23 (stmt -> OR .)
    DROP            reduce using rule 23 (stmt -> OR .)
    DUP             reduce using rule 23 (stmt -> OR .)
    SWAP            reduce using rule 23 (stmt -> OR .)
    UNIT            reduce using rule 23 (stmt -> OR .)
    EQ              reduce using rule 23 (stmt -> OR .)
    NEQ             reduce using rule 23 (stmt -> OR .)
    LT              reduce using rule 23 (stmt -> OR .)
    GT              reduce using rule 23 (stmt -> OR .)
    LE              reduce using rule 23 (stmt -> OR .)
    GE              reduce using rule 23 (stmt -> OR .)
    OR              reduce using rule 23 (stmt -> OR .)
    AND             reduce using rule 23 (stmt -> OR .)
    XOR             reduce using rule 23 (stmt -> OR .)
    COMPARE         reduce using rule 23 (stmt -> OR .)
    NEG             reduce using rule 23 (stmt -> OR .)
    ABS             reduce using rule 23 (stmt -> OR .)
    ADD             reduce using rule 23 (stmt -> OR .)
    SUB             reduce using rule 23 (stmt -> OR .)
    MUL             reduce using rule 23 (stmt -> OR .)
    EDIV            reduce using rule 23 (stmt -> OR .)
    LSL             reduce using rule 23 (stmt -> OR .)
    LSR             reduce using rule 23 (stmt -> OR .)
    CONCAT          reduce using rule 23 (stmt -> OR .)
    SIZE            reduce using rule 23 (stmt -> OR .)
    SLICE           reduce using rule 23 (stmt -> OR .)
    PAIR            reduce using rule 23 (stmt -> OR .)
    CAR             reduce using rule 23 (stmt -> OR .)
    CDR             reduce using rule 23 (stmt -> OR .)
    EMPTY_SET       reduce using rule 23 (stmt -> OR .)
    MEM             reduce using rule 23 (stmt -> OR .)
    UPDATE          reduce using rule 23 (stmt -> OR .)
    SOME            reduce using rule 23 (stmt -> OR .)
    NONE            reduce using rule 23 (stmt -> OR .)
    LEFT            reduce using rule 23 (stmt -> OR .)
    RIGHT           reduce using rule 23 (stmt -> OR .)
    CONS            reduce using rule 23 (stmt -> OR .)
    NIL             reduce using rule 23 (stmt -> OR .)
    NOT             reduce using rule 23 (stmt -> OR .)
    PUSH            reduce using rule 23 (stmt -> OR .)
    FAILWITH        reduce using rule 23 (stmt -> OR .)


state 16

    (24) stmt -> AND .

    SCOLON          reduce using rule 24 (stmt -> AND .)
    RBRACKET        reduce using rule 24 (stmt -> AND .)
    DROP            reduce using rule 24 (stmt -> AND .)
    DUP             reduce using rule 24 (stmt -> AND .)
    SWAP            reduce using rule 24 (stmt -> AND .)
    UNIT            reduce using rule 24 (stmt -> AND .)
    EQ              reduce using rule 24 (stmt -> AND .)
    NEQ             reduce using rule 24 (stmt -> AND .)
    LT              reduce using rule 24 (stmt -> AND .)
    GT              reduce using rule 24 (stmt -> AND .)
    LE              reduce using rule 24 (stmt -> AND .)
    GE              reduce using rule 24 (stmt -> AND .)
    OR              reduce using rule 24 (stmt -> AND .)
    AND             reduce using rule 24 (stmt -> AND .)
    XOR             reduce using rule 24 (stmt -> AND .)
    COMPARE         reduce using rule 24 (stmt -> AND .)
    NEG             reduce using rule 24 (stmt -> AND .)
    ABS             reduce using rule 24 (stmt -> AND .)
    ADD             reduce using rule 24 (stmt -> AND .)
    SUB             reduce using rule 24 (stmt -> AND .)
    MUL             reduce using rule 24 (stmt -> AND .)
    EDIV            reduce using rule 24 (stmt -> AND .)
    LSL             reduce using rule 24 (stmt -> AND .)
    LSR             reduce using rule 24 (stmt -> AND .)
    CONCAT          reduce using rule 24 (stmt -> AND .)
    SIZE            reduce using rule 24 (stmt -> AND .)
    SLICE           reduce using rule 24 (stmt -> AND .)
    PAIR            reduce using rule 24 (stmt -> AND .)
    CAR             reduce using rule 24 (stmt -> AND .)
    CDR             reduce using rule 24 (stmt -> AND .)
    EMPTY_SET       reduce using rule 24 (stmt -> AND .)
    MEM             reduce using rule 24 (stmt -> AND .)
    UPDATE          reduce using rule 24 (stmt -> AND .)
    SOME            reduce using rule 24 (stmt -> AND .)
    NONE            reduce using rule 24 (stmt -> AND .)
    LEFT            reduce using rule 24 (stmt -> AND .)
    RIGHT           reduce using rule 24 (stmt -> AND .)
    CONS            reduce using rule 24 (stmt -> AND .)
    NIL             reduce using rule 24 (stmt -> AND .)
    NOT             reduce using rule 24 (stmt -> AND .)
    PUSH            reduce using rule 24 (stmt -> AND .)
    FAILWITH        reduce using rule 24 (stmt -> AND .)


state 17

    (25) stmt -> XOR .

    SCOLON          reduce using rule 25 (stmt -> XOR .)
    RBRACKET        reduce using rule 25 (stmt -> XOR .)
    DROP            reduce using rule 25 (stmt -> XOR .)
    DUP             reduce using rule 25 (stmt -> XOR .)
    SWAP            reduce using rule 25 (stmt -> XOR .)
    UNIT            reduce using rule 25 (stmt -> XOR .)
    EQ              reduce using rule 25 (stmt -> XOR .)
    NEQ             reduce using rule 25 (stmt -> XOR .)
    LT              reduce using rule 25 (stmt -> XOR .)
    GT              reduce using rule 25 (stmt -> XOR .)
    LE              reduce using rule 25 (stmt -> XOR .)
    GE              reduce using rule 25 (stmt -> XOR .)
    OR              reduce using rule 25 (stmt -> XOR .)
    AND             reduce using rule 25 (stmt -> XOR .)
    XOR             reduce using rule 25 (stmt -> XOR .)
    COMPARE         reduce using rule 25 (stmt -> XOR .)
    NEG             reduce using rule 25 (stmt -> XOR .)
    ABS             reduce using rule 25 (stmt -> XOR .)
    ADD             reduce using rule 25 (stmt -> XOR .)
    SUB             reduce using rule 25 (stmt -> XOR .)
    MUL             reduce using rule 25 (stmt -> XOR .)
    EDIV            reduce using rule 25 (stmt -> XOR .)
    LSL             reduce using rule 25 (stmt -> XOR .)
    LSR             reduce using rule 25 (stmt -> XOR .)
    CONCAT          reduce using rule 25 (stmt -> XOR .)
    SIZE            reduce using rule 25 (stmt -> XOR .)
    SLICE           reduce using rule 25 (stmt -> XOR .)
    PAIR            reduce using rule 25 (stmt -> XOR .)
    CAR             reduce using rule 25 (stmt -> XOR .)
    CDR             reduce using rule 25 (stmt -> XOR .)
    EMPTY_SET       reduce using rule 25 (stmt -> XOR .)
    MEM             reduce using rule 25 (stmt -> XOR .)
    UPDATE          reduce using rule 25 (stmt -> XOR .)
    SOME            reduce using rule 25 (stmt -> XOR .)
    NONE            reduce using rule 25 (stmt -> XOR .)
    LEFT            reduce using rule 25 (stmt -> XOR .)
    RIGHT           reduce using rule 25 (stmt -> XOR .)
    CONS            reduce using rule 25 (stmt -> XOR .)
    NIL             reduce using rule 25 (stmt -> XOR .)
    NOT             reduce using rule 25 (stmt -> XOR .)
    PUSH            reduce using rule 25 (stmt -> XOR .)
    FAILWITH        reduce using rule 25 (stmt -> XOR .)


state 18

    (26) stmt -> COMPARE .

    SCOLON          reduce using rule 26 (stmt -> COMPARE .)
    RBRACKET        reduce using rule 26 (stmt -> COMPARE .)
    DROP            reduce using rule 26 (stmt -> COMPARE .)
    DUP             reduce using rule 26 (stmt -> COMPARE .)
    SWAP            reduce using rule 26 (stmt -> COMPARE .)
    UNIT            reduce using rule 26 (stmt -> COMPARE .)
    EQ              reduce using rule 26 (stmt -> COMPARE .)
    NEQ             reduce using rule 26 (stmt -> COMPARE .)
    LT              reduce using rule 26 (stmt -> COMPARE .)
    GT              reduce using rule 26 (stmt -> COMPARE .)
    LE              reduce using rule 26 (stmt -> COMPARE .)
    GE              reduce using rule 26 (stmt -> COMPARE .)
    OR              reduce using rule 26 (stmt -> COMPARE .)
    AND             reduce using rule 26 (stmt -> COMPARE .)
    XOR             reduce using rule 26 (stmt -> COMPARE .)
    COMPARE         reduce using rule 26 (stmt -> COMPARE .)
    NEG             reduce using rule 26 (stmt -> COMPARE .)
    ABS             reduce using rule 26 (stmt -> COMPARE .)
    ADD             reduce using rule 26 (stmt -> COMPARE .)
    SUB             reduce using rule 26 (stmt -> COMPARE .)
    MUL             reduce using rule 26 (stmt -> COMPARE .)
    EDIV            reduce using rule 26 (stmt -> COMPARE .)
    LSL             reduce using rule 26 (stmt -> COMPARE .)
    LSR             reduce using rule 26 (stmt -> COMPARE .)
    CONCAT          reduce using rule 26 (stmt -> COMPARE .)
    SIZE            reduce using rule 26 (stmt -> COMPARE .)
    SLICE           reduce using rule 26 (stmt -> COMPARE .)
    PAIR            reduce using rule 26 (stmt -> COMPARE .)
    CAR             reduce using rule 26 (stmt -> COMPARE .)
    CDR             reduce using rule 26 (stmt -> COMPARE .)
    EMPTY_SET       reduce using rule 26 (stmt -> COMPARE .)
    MEM             reduce using rule 26 (stmt -> COMPARE .)
    UPDATE          reduce using rule 26 (stmt -> COMPARE .)
    SOME            reduce using rule 26 (stmt -> COMPARE .)
    NONE            reduce using rule 26 (stmt -> COMPARE .)
    LEFT            reduce using rule 26 (stmt -> COMPARE .)
    RIGHT           reduce using rule 26 (stmt -> COMPARE .)
    CONS            reduce using rule 26 (stmt -> COMPARE .)
    NIL             reduce using rule 26 (stmt -> COMPARE .)
    NOT             reduce using rule 26 (stmt -> COMPARE .)
    PUSH            reduce using rule 26 (stmt -> COMPARE .)
    FAILWITH        reduce using rule 26 (stmt -> COMPARE .)


state 19

    (27) stmt -> NEG .

    SCOLON          reduce using rule 27 (stmt -> NEG .)
    RBRACKET        reduce using rule 27 (stmt -> NEG .)
    DROP            reduce using rule 27 (stmt -> NEG .)
    DUP             reduce using rule 27 (stmt -> NEG .)
    SWAP            reduce using rule 27 (stmt -> NEG .)
    UNIT            reduce using rule 27 (stmt -> NEG .)
    EQ              reduce using rule 27 (stmt -> NEG .)
    NEQ             reduce using rule 27 (stmt -> NEG .)
    LT              reduce using rule 27 (stmt -> NEG .)
    GT              reduce using rule 27 (stmt -> NEG .)
    LE              reduce using rule 27 (stmt -> NEG .)
    GE              reduce using rule 27 (stmt -> NEG .)
    OR              reduce using rule 27 (stmt -> NEG .)
    AND             reduce using rule 27 (stmt -> NEG .)
    XOR             reduce using rule 27 (stmt -> NEG .)
    COMPARE         reduce using rule 27 (stmt -> NEG .)
    NEG             reduce using rule 27 (stmt -> NEG .)
    ABS             reduce using rule 27 (stmt -> NEG .)
    ADD             reduce using rule 27 (stmt -> NEG .)
    SUB             reduce using rule 27 (stmt -> NEG .)
    MUL             reduce using rule 27 (stmt -> NEG .)
    EDIV            reduce using rule 27 (stmt -> NEG .)
    LSL             reduce using rule 27 (stmt -> NEG .)
    LSR             reduce using rule 27 (stmt -> NEG .)
    CONCAT          reduce using rule 27 (stmt -> NEG .)
    SIZE            reduce using rule 27 (stmt -> NEG .)
    SLICE           reduce using rule 27 (stmt -> NEG .)
    PAIR            reduce using rule 27 (stmt -> NEG .)
    CAR             reduce using rule 27 (stmt -> NEG .)
    CDR             reduce using rule 27 (stmt -> NEG .)
    EMPTY_SET       reduce using rule 27 (stmt -> NEG .)
    MEM             reduce using rule 27 (stmt -> NEG .)
    UPDATE          reduce using rule 27 (stmt -> NEG .)
    SOME            reduce using rule 27 (stmt -> NEG .)
    NONE            reduce using rule 27 (stmt -> NEG .)
    LEFT            reduce using rule 27 (stmt -> NEG .)
    RIGHT           reduce using rule 27 (stmt -> NEG .)
    CONS            reduce using rule 27 (stmt -> NEG .)
    NIL             reduce using rule 27 (stmt -> NEG .)
    NOT             reduce using rule 27 (stmt -> NEG .)
    PUSH            reduce using rule 27 (stmt -> NEG .)
    FAILWITH        reduce using rule 27 (stmt -> NEG .)


state 20

    (28) stmt -> ABS .

    SCOLON          reduce using rule 28 (stmt -> ABS .)
    RBRACKET        reduce using rule 28 (stmt -> ABS .)
    DROP            reduce using rule 28 (stmt -> ABS .)
    DUP             reduce using rule 28 (stmt -> ABS .)
    SWAP            reduce using rule 28 (stmt -> ABS .)
    UNIT            reduce using rule 28 (stmt -> ABS .)
    EQ              reduce using rule 28 (stmt -> ABS .)
    NEQ             reduce using rule 28 (stmt -> ABS .)
    LT              reduce using rule 28 (stmt -> ABS .)
    GT              reduce using rule 28 (stmt -> ABS .)
    LE              reduce using rule 28 (stmt -> ABS .)
    GE              reduce using rule 28 (stmt -> ABS .)
    OR              reduce using rule 28 (stmt -> ABS .)
    AND             reduce using rule 28 (stmt -> ABS .)
    XOR             reduce using rule 28 (stmt -> ABS .)
    COMPARE         reduce using rule 28 (stmt -> ABS .)
    NEG             reduce using rule 28 (stmt -> ABS .)
    ABS             reduce using rule 28 (stmt -> ABS .)
    ADD             reduce using rule 28 (stmt -> ABS .)
    SUB             reduce using rule 28 (stmt -> ABS .)
    MUL             reduce using rule 28 (stmt -> ABS .)
    EDIV            reduce using rule 28 (stmt -> ABS .)
    LSL             reduce using rule 28 (stmt -> ABS .)
    LSR             reduce using rule 28 (stmt -> ABS .)
    CONCAT          reduce using rule 28 (stmt -> ABS .)
    SIZE            reduce using rule 28 (stmt -> ABS .)
    SLICE           reduce using rule 28 (stmt -> ABS .)
    PAIR            reduce using rule 28 (stmt -> ABS .)
    CAR             reduce using rule 28 (stmt -> ABS .)
    CDR             reduce using rule 28 (stmt -> ABS .)
    EMPTY_SET       reduce using rule 28 (stmt -> ABS .)
    MEM             reduce using rule 28 (stmt -> ABS .)
    UPDATE          reduce using rule 28 (stmt -> ABS .)
    SOME            reduce using rule 28 (stmt -> ABS .)
    NONE            reduce using rule 28 (stmt -> ABS .)
    LEFT            reduce using rule 28 (stmt -> ABS .)
    RIGHT           reduce using rule 28 (stmt -> ABS .)
    CONS            reduce using rule 28 (stmt -> ABS .)
    NIL             reduce using rule 28 (stmt -> ABS .)
    NOT             reduce using rule 28 (stmt -> ABS .)
    PUSH            reduce using rule 28 (stmt -> ABS .)
    FAILWITH        reduce using rule 28 (stmt -> ABS .)


state 21

    (29) stmt -> ADD .

    SCOLON          reduce using rule 29 (stmt -> ADD .)
    RBRACKET        reduce using rule 29 (stmt -> ADD .)
    DROP            reduce using rule 29 (stmt -> ADD .)
    DUP             reduce using rule 29 (stmt -> ADD .)
    SWAP            reduce using rule 29 (stmt -> ADD .)
    UNIT            reduce using rule 29 (stmt -> ADD .)
    EQ              reduce using rule 29 (stmt -> ADD .)
    NEQ             reduce using rule 29 (stmt -> ADD .)
    LT              reduce using rule 29 (stmt -> ADD .)
    GT              reduce using rule 29 (stmt -> ADD .)
    LE              reduce using rule 29 (stmt -> ADD .)
    GE              reduce using rule 29 (stmt -> ADD .)
    OR              reduce using rule 29 (stmt -> ADD .)
    AND             reduce using rule 29 (stmt -> ADD .)
    XOR             reduce using rule 29 (stmt -> ADD .)
    COMPARE         reduce using rule 29 (stmt -> ADD .)
    NEG             reduce using rule 29 (stmt -> ADD .)
    ABS             reduce using rule 29 (stmt -> ADD .)
    ADD             reduce using rule 29 (stmt -> ADD .)
    SUB             reduce using rule 29 (stmt -> ADD .)
    MUL             reduce using rule 29 (stmt -> ADD .)
    EDIV            reduce using rule 29 (stmt -> ADD .)
    LSL             reduce using rule 29 (stmt -> ADD .)
    LSR             reduce using rule 29 (stmt -> ADD .)
    CONCAT          reduce using rule 29 (stmt -> ADD .)
    SIZE            reduce using rule 29 (stmt -> ADD .)
    SLICE           reduce using rule 29 (stmt -> ADD .)
    PAIR            reduce using rule 29 (stmt -> ADD .)
    CAR             reduce using rule 29 (stmt -> ADD .)
    CDR             reduce using rule 29 (stmt -> ADD .)
    EMPTY_SET       reduce using rule 29 (stmt -> ADD .)
    MEM             reduce using rule 29 (stmt -> ADD .)
    UPDATE          reduce using rule 29 (stmt -> ADD .)
    SOME            reduce using rule 29 (stmt -> ADD .)
    NONE            reduce using rule 29 (stmt -> ADD .)
    LEFT            reduce using rule 29 (stmt -> ADD .)
    RIGHT           reduce using rule 29 (stmt -> ADD .)
    CONS            reduce using rule 29 (stmt -> ADD .)
    NIL             reduce using rule 29 (stmt -> ADD .)
    NOT             reduce using rule 29 (stmt -> ADD .)
    PUSH            reduce using rule 29 (stmt -> ADD .)
    FAILWITH        reduce using rule 29 (stmt -> ADD .)


state 22

    (30) stmt -> SUB .

    SCOLON          reduce using rule 30 (stmt -> SUB .)
    RBRACKET        reduce using rule 30 (stmt -> SUB .)
    DROP            reduce using rule 30 (stmt -> SUB .)
    DUP             reduce using rule 30 (stmt -> SUB .)
    SWAP            reduce using rule 30 (stmt -> SUB .)
    UNIT            reduce using rule 30 (stmt -> SUB .)
    EQ              reduce using rule 30 (stmt -> SUB .)
    NEQ             reduce using rule 30 (stmt -> SUB .)
    LT              reduce using rule 30 (stmt -> SUB .)
    GT              reduce using rule 30 (stmt -> SUB .)
    LE              reduce using rule 30 (stmt -> SUB .)
    GE              reduce using rule 30 (stmt -> SUB .)
    OR              reduce using rule 30 (stmt -> SUB .)
    AND             reduce using rule 30 (stmt -> SUB .)
    XOR             reduce using rule 30 (stmt -> SUB .)
    COMPARE         reduce using rule 30 (stmt -> SUB .)
    NEG             reduce using rule 30 (stmt -> SUB .)
    ABS             reduce using rule 30 (stmt -> SUB .)
    ADD             reduce using rule 30 (stmt -> SUB .)
    SUB             reduce using rule 30 (stmt -> SUB .)
    MUL             reduce using rule 30 (stmt -> SUB .)
    EDIV            reduce using rule 30 (stmt -> SUB .)
    LSL             reduce using rule 30 (stmt -> SUB .)
    LSR             reduce using rule 30 (stmt -> SUB .)
    CONCAT          reduce using rule 30 (stmt -> SUB .)
    SIZE            reduce using rule 30 (stmt -> SUB .)
    SLICE           reduce using rule 30 (stmt -> SUB .)
    PAIR            reduce using rule 30 (stmt -> SUB .)
    CAR             reduce using rule 30 (stmt -> SUB .)
    CDR             reduce using rule 30 (stmt -> SUB .)
    EMPTY_SET       reduce using rule 30 (stmt -> SUB .)
    MEM             reduce using rule 30 (stmt -> SUB .)
    UPDATE          reduce using rule 30 (stmt -> SUB .)
    SOME            reduce using rule 30 (stmt -> SUB .)
    NONE            reduce using rule 30 (stmt -> SUB .)
    LEFT            reduce using rule 30 (stmt -> SUB .)
    RIGHT           reduce using rule 30 (stmt -> SUB .)
    CONS            reduce using rule 30 (stmt -> SUB .)
    NIL             reduce using rule 30 (stmt -> SUB .)
    NOT             reduce using rule 30 (stmt -> SUB .)
    PUSH            reduce using rule 30 (stmt -> SUB .)
    FAILWITH        reduce using rule 30 (stmt -> SUB .)


state 23

    (31) stmt -> MUL .

    SCOLON          reduce using rule 31 (stmt -> MUL .)
    RBRACKET        reduce using rule 31 (stmt -> MUL .)
    DROP            reduce using rule 31 (stmt -> MUL .)
    DUP             reduce using rule 31 (stmt -> MUL .)
    SWAP            reduce using rule 31 (stmt -> MUL .)
    UNIT            reduce using rule 31 (stmt -> MUL .)
    EQ              reduce using rule 31 (stmt -> MUL .)
    NEQ             reduce using rule 31 (stmt -> MUL .)
    LT              reduce using rule 31 (stmt -> MUL .)
    GT              reduce using rule 31 (stmt -> MUL .)
    LE              reduce using rule 31 (stmt -> MUL .)
    GE              reduce using rule 31 (stmt -> MUL .)
    OR              reduce using rule 31 (stmt -> MUL .)
    AND             reduce using rule 31 (stmt -> MUL .)
    XOR             reduce using rule 31 (stmt -> MUL .)
    COMPARE         reduce using rule 31 (stmt -> MUL .)
    NEG             reduce using rule 31 (stmt -> MUL .)
    ABS             reduce using rule 31 (stmt -> MUL .)
    ADD             reduce using rule 31 (stmt -> MUL .)
    SUB             reduce using rule 31 (stmt -> MUL .)
    MUL             reduce using rule 31 (stmt -> MUL .)
    EDIV            reduce using rule 31 (stmt -> MUL .)
    LSL             reduce using rule 31 (stmt -> MUL .)
    LSR             reduce using rule 31 (stmt -> MUL .)
    CONCAT          reduce using rule 31 (stmt -> MUL .)
    SIZE            reduce using rule 31 (stmt -> MUL .)
    SLICE           reduce using rule 31 (stmt -> MUL .)
    PAIR            reduce using rule 31 (stmt -> MUL .)
    CAR             reduce using rule 31 (stmt -> MUL .)
    CDR             reduce using rule 31 (stmt -> MUL .)
    EMPTY_SET       reduce using rule 31 (stmt -> MUL .)
    MEM             reduce using rule 31 (stmt -> MUL .)
    UPDATE          reduce using rule 31 (stmt -> MUL .)
    SOME            reduce using rule 31 (stmt -> MUL .)
    NONE            reduce using rule 31 (stmt -> MUL .)
    LEFT            reduce using rule 31 (stmt -> MUL .)
    RIGHT           reduce using rule 31 (stmt -> MUL .)
    CONS            reduce using rule 31 (stmt -> MUL .)
    NIL             reduce using rule 31 (stmt -> MUL .)
    NOT             reduce using rule 31 (stmt -> MUL .)
    PUSH            reduce using rule 31 (stmt -> MUL .)
    FAILWITH        reduce using rule 31 (stmt -> MUL .)


state 24

    (32) stmt -> EDIV .

    SCOLON          reduce using rule 32 (stmt -> EDIV .)
    RBRACKET        reduce using rule 32 (stmt -> EDIV .)
    DROP            reduce using rule 32 (stmt -> EDIV .)
    DUP             reduce using rule 32 (stmt -> EDIV .)
    SWAP            reduce using rule 32 (stmt -> EDIV .)
    UNIT            reduce using rule 32 (stmt -> EDIV .)
    EQ              reduce using rule 32 (stmt -> EDIV .)
    NEQ             reduce using rule 32 (stmt -> EDIV .)
    LT              reduce using rule 32 (stmt -> EDIV .)
    GT              reduce using rule 32 (stmt -> EDIV .)
    LE              reduce using rule 32 (stmt -> EDIV .)
    GE              reduce using rule 32 (stmt -> EDIV .)
    OR              reduce using rule 32 (stmt -> EDIV .)
    AND             reduce using rule 32 (stmt -> EDIV .)
    XOR             reduce using rule 32 (stmt -> EDIV .)
    COMPARE         reduce using rule 32 (stmt -> EDIV .)
    NEG             reduce using rule 32 (stmt -> EDIV .)
    ABS             reduce using rule 32 (stmt -> EDIV .)
    ADD             reduce using rule 32 (stmt -> EDIV .)
    SUB             reduce using rule 32 (stmt -> EDIV .)
    MUL             reduce using rule 32 (stmt -> EDIV .)
    EDIV            reduce using rule 32 (stmt -> EDIV .)
    LSL             reduce using rule 32 (stmt -> EDIV .)
    LSR             reduce using rule 32 (stmt -> EDIV .)
    CONCAT          reduce using rule 32 (stmt -> EDIV .)
    SIZE            reduce using rule 32 (stmt -> EDIV .)
    SLICE           reduce using rule 32 (stmt -> EDIV .)
    PAIR            reduce using rule 32 (stmt -> EDIV .)
    CAR             reduce using rule 32 (stmt -> EDIV .)
    CDR             reduce using rule 32 (stmt -> EDIV .)
    EMPTY_SET       reduce using rule 32 (stmt -> EDIV .)
    MEM             reduce using rule 32 (stmt -> EDIV .)
    UPDATE          reduce using rule 32 (stmt -> EDIV .)
    SOME            reduce using rule 32 (stmt -> EDIV .)
    NONE            reduce using rule 32 (stmt -> EDIV .)
    LEFT            reduce using rule 32 (stmt -> EDIV .)
    RIGHT           reduce using rule 32 (stmt -> EDIV .)
    CONS            reduce using rule 32 (stmt -> EDIV .)
    NIL             reduce using rule 32 (stmt -> EDIV .)
    NOT             reduce using rule 32 (stmt -> EDIV .)
    PUSH            reduce using rule 32 (stmt -> EDIV .)
    FAILWITH        reduce using rule 32 (stmt -> EDIV .)


state 25

    (33) stmt -> LSL .

    SCOLON          reduce using rule 33 (stmt -> LSL .)
    RBRACKET        reduce using rule 33 (stmt -> LSL .)
    DROP            reduce using rule 33 (stmt -> LSL .)
    DUP             reduce using rule 33 (stmt -> LSL .)
    SWAP            reduce using rule 33 (stmt -> LSL .)
    UNIT            reduce using rule 33 (stmt -> LSL .)
    EQ              reduce using rule 33 (stmt -> LSL .)
    NEQ             reduce using rule 33 (stmt -> LSL .)
    LT              reduce using rule 33 (stmt -> LSL .)
    GT              reduce using rule 33 (stmt -> LSL .)
    LE              reduce using rule 33 (stmt -> LSL .)
    GE              reduce using rule 33 (stmt -> LSL .)
    OR              reduce using rule 33 (stmt -> LSL .)
    AND             reduce using rule 33 (stmt -> LSL .)
    XOR             reduce using rule 33 (stmt -> LSL .)
    COMPARE         reduce using rule 33 (stmt -> LSL .)
    NEG             reduce using rule 33 (stmt -> LSL .)
    ABS             reduce using rule 33 (stmt -> LSL .)
    ADD             reduce using rule 33 (stmt -> LSL .)
    SUB             reduce using rule 33 (stmt -> LSL .)
    MUL             reduce using rule 33 (stmt -> LSL .)
    EDIV            reduce using rule 33 (stmt -> LSL .)
    LSL             reduce using rule 33 (stmt -> LSL .)
    LSR             reduce using rule 33 (stmt -> LSL .)
    CONCAT          reduce using rule 33 (stmt -> LSL .)
    SIZE            reduce using rule 33 (stmt -> LSL .)
    SLICE           reduce using rule 33 (stmt -> LSL .)
    PAIR            reduce using rule 33 (stmt -> LSL .)
    CAR             reduce using rule 33 (stmt -> LSL .)
    CDR             reduce using rule 33 (stmt -> LSL .)
    EMPTY_SET       reduce using rule 33 (stmt -> LSL .)
    MEM             reduce using rule 33 (stmt -> LSL .)
    UPDATE          reduce using rule 33 (stmt -> LSL .)
    SOME            reduce using rule 33 (stmt -> LSL .)
    NONE            reduce using rule 33 (stmt -> LSL .)
    LEFT            reduce using rule 33 (stmt -> LSL .)
    RIGHT           reduce using rule 33 (stmt -> LSL .)
    CONS            reduce using rule 33 (stmt -> LSL .)
    NIL             reduce using rule 33 (stmt -> LSL .)
    NOT             reduce using rule 33 (stmt -> LSL .)
    PUSH            reduce using rule 33 (stmt -> LSL .)
    FAILWITH        reduce using rule 33 (stmt -> LSL .)


state 26

    (34) stmt -> LSR .

    SCOLON          reduce using rule 34 (stmt -> LSR .)
    RBRACKET        reduce using rule 34 (stmt -> LSR .)
    DROP            reduce using rule 34 (stmt -> LSR .)
    DUP             reduce using rule 34 (stmt -> LSR .)
    SWAP            reduce using rule 34 (stmt -> LSR .)
    UNIT            reduce using rule 34 (stmt -> LSR .)
    EQ              reduce using rule 34 (stmt -> LSR .)
    NEQ             reduce using rule 34 (stmt -> LSR .)
    LT              reduce using rule 34 (stmt -> LSR .)
    GT              reduce using rule 34 (stmt -> LSR .)
    LE              reduce using rule 34 (stmt -> LSR .)
    GE              reduce using rule 34 (stmt -> LSR .)
    OR              reduce using rule 34 (stmt -> LSR .)
    AND             reduce using rule 34 (stmt -> LSR .)
    XOR             reduce using rule 34 (stmt -> LSR .)
    COMPARE         reduce using rule 34 (stmt -> LSR .)
    NEG             reduce using rule 34 (stmt -> LSR .)
    ABS             reduce using rule 34 (stmt -> LSR .)
    ADD             reduce using rule 34 (stmt -> LSR .)
    SUB             reduce using rule 34 (stmt -> LSR .)
    MUL             reduce using rule 34 (stmt -> LSR .)
    EDIV            reduce using rule 34 (stmt -> LSR .)
    LSL             reduce using rule 34 (stmt -> LSR .)
    LSR             reduce using rule 34 (stmt -> LSR .)
    CONCAT          reduce using rule 34 (stmt -> LSR .)
    SIZE            reduce using rule 34 (stmt -> LSR .)
    SLICE           reduce using rule 34 (stmt -> LSR .)
    PAIR            reduce using rule 34 (stmt -> LSR .)
    CAR             reduce using rule 34 (stmt -> LSR .)
    CDR             reduce using rule 34 (stmt -> LSR .)
    EMPTY_SET       reduce using rule 34 (stmt -> LSR .)
    MEM             reduce using rule 34 (stmt -> LSR .)
    UPDATE          reduce using rule 34 (stmt -> LSR .)
    SOME            reduce using rule 34 (stmt -> LSR .)
    NONE            reduce using rule 34 (stmt -> LSR .)
    LEFT            reduce using rule 34 (stmt -> LSR .)
    RIGHT           reduce using rule 34 (stmt -> LSR .)
    CONS            reduce using rule 34 (stmt -> LSR .)
    NIL             reduce using rule 34 (stmt -> LSR .)
    NOT             reduce using rule 34 (stmt -> LSR .)
    PUSH            reduce using rule 34 (stmt -> LSR .)
    FAILWITH        reduce using rule 34 (stmt -> LSR .)


state 27

    (35) stmt -> CONCAT .

    SCOLON          reduce using rule 35 (stmt -> CONCAT .)
    RBRACKET        reduce using rule 35 (stmt -> CONCAT .)
    DROP            reduce using rule 35 (stmt -> CONCAT .)
    DUP             reduce using rule 35 (stmt -> CONCAT .)
    SWAP            reduce using rule 35 (stmt -> CONCAT .)
    UNIT            reduce using rule 35 (stmt -> CONCAT .)
    EQ              reduce using rule 35 (stmt -> CONCAT .)
    NEQ             reduce using rule 35 (stmt -> CONCAT .)
    LT              reduce using rule 35 (stmt -> CONCAT .)
    GT              reduce using rule 35 (stmt -> CONCAT .)
    LE              reduce using rule 35 (stmt -> CONCAT .)
    GE              reduce using rule 35 (stmt -> CONCAT .)
    OR              reduce using rule 35 (stmt -> CONCAT .)
    AND             reduce using rule 35 (stmt -> CONCAT .)
    XOR             reduce using rule 35 (stmt -> CONCAT .)
    COMPARE         reduce using rule 35 (stmt -> CONCAT .)
    NEG             reduce using rule 35 (stmt -> CONCAT .)
    ABS             reduce using rule 35 (stmt -> CONCAT .)
    ADD             reduce using rule 35 (stmt -> CONCAT .)
    SUB             reduce using rule 35 (stmt -> CONCAT .)
    MUL             reduce using rule 35 (stmt -> CONCAT .)
    EDIV            reduce using rule 35 (stmt -> CONCAT .)
    LSL             reduce using rule 35 (stmt -> CONCAT .)
    LSR             reduce using rule 35 (stmt -> CONCAT .)
    CONCAT          reduce using rule 35 (stmt -> CONCAT .)
    SIZE            reduce using rule 35 (stmt -> CONCAT .)
    SLICE           reduce using rule 35 (stmt -> CONCAT .)
    PAIR            reduce using rule 35 (stmt -> CONCAT .)
    CAR             reduce using rule 35 (stmt -> CONCAT .)
    CDR             reduce using rule 35 (stmt -> CONCAT .)
    EMPTY_SET       reduce using rule 35 (stmt -> CONCAT .)
    MEM             reduce using rule 35 (stmt -> CONCAT .)
    UPDATE          reduce using rule 35 (stmt -> CONCAT .)
    SOME            reduce using rule 35 (stmt -> CONCAT .)
    NONE            reduce using rule 35 (stmt -> CONCAT .)
    LEFT            reduce using rule 35 (stmt -> CONCAT .)
    RIGHT           reduce using rule 35 (stmt -> CONCAT .)
    CONS            reduce using rule 35 (stmt -> CONCAT .)
    NIL             reduce using rule 35 (stmt -> CONCAT .)
    NOT             reduce using rule 35 (stmt -> CONCAT .)
    PUSH            reduce using rule 35 (stmt -> CONCAT .)
    FAILWITH        reduce using rule 35 (stmt -> CONCAT .)


state 28

    (36) stmt -> SIZE .

    SCOLON          reduce using rule 36 (stmt -> SIZE .)
    RBRACKET        reduce using rule 36 (stmt -> SIZE .)
    DROP            reduce using rule 36 (stmt -> SIZE .)
    DUP             reduce using rule 36 (stmt -> SIZE .)
    SWAP            reduce using rule 36 (stmt -> SIZE .)
    UNIT            reduce using rule 36 (stmt -> SIZE .)
    EQ              reduce using rule 36 (stmt -> SIZE .)
    NEQ             reduce using rule 36 (stmt -> SIZE .)
    LT              reduce using rule 36 (stmt -> SIZE .)
    GT              reduce using rule 36 (stmt -> SIZE .)
    LE              reduce using rule 36 (stmt -> SIZE .)
    GE              reduce using rule 36 (stmt -> SIZE .)
    OR              reduce using rule 36 (stmt -> SIZE .)
    AND             reduce using rule 36 (stmt -> SIZE .)
    XOR             reduce using rule 36 (stmt -> SIZE .)
    COMPARE         reduce using rule 36 (stmt -> SIZE .)
    NEG             reduce using rule 36 (stmt -> SIZE .)
    ABS             reduce using rule 36 (stmt -> SIZE .)
    ADD             reduce using rule 36 (stmt -> SIZE .)
    SUB             reduce using rule 36 (stmt -> SIZE .)
    MUL             reduce using rule 36 (stmt -> SIZE .)
    EDIV            reduce using rule 36 (stmt -> SIZE .)
    LSL             reduce using rule 36 (stmt -> SIZE .)
    LSR             reduce using rule 36 (stmt -> SIZE .)
    CONCAT          reduce using rule 36 (stmt -> SIZE .)
    SIZE            reduce using rule 36 (stmt -> SIZE .)
    SLICE           reduce using rule 36 (stmt -> SIZE .)
    PAIR            reduce using rule 36 (stmt -> SIZE .)
    CAR             reduce using rule 36 (stmt -> SIZE .)
    CDR             reduce using rule 36 (stmt -> SIZE .)
    EMPTY_SET       reduce using rule 36 (stmt -> SIZE .)
    MEM             reduce using rule 36 (stmt -> SIZE .)
    UPDATE          reduce using rule 36 (stmt -> SIZE .)
    SOME            reduce using rule 36 (stmt -> SIZE .)
    NONE            reduce using rule 36 (stmt -> SIZE .)
    LEFT            reduce using rule 36 (stmt -> SIZE .)
    RIGHT           reduce using rule 36 (stmt -> SIZE .)
    CONS            reduce using rule 36 (stmt -> SIZE .)
    NIL             reduce using rule 36 (stmt -> SIZE .)
    NOT             reduce using rule 36 (stmt -> SIZE .)
    PUSH            reduce using rule 36 (stmt -> SIZE .)
    FAILWITH        reduce using rule 36 (stmt -> SIZE .)


state 29

    (37) stmt -> SLICE .

    SCOLON          reduce using rule 37 (stmt -> SLICE .)
    RBRACKET        reduce using rule 37 (stmt -> SLICE .)
    DROP            reduce using rule 37 (stmt -> SLICE .)
    DUP             reduce using rule 37 (stmt -> SLICE .)
    SWAP            reduce using rule 37 (stmt -> SLICE .)
    UNIT            reduce using rule 37 (stmt -> SLICE .)
    EQ              reduce using rule 37 (stmt -> SLICE .)
    NEQ             reduce using rule 37 (stmt -> SLICE .)
    LT              reduce using rule 37 (stmt -> SLICE .)
    GT              reduce using rule 37 (stmt -> SLICE .)
    LE              reduce using rule 37 (stmt -> SLICE .)
    GE              reduce using rule 37 (stmt -> SLICE .)
    OR              reduce using rule 37 (stmt -> SLICE .)
    AND             reduce using rule 37 (stmt -> SLICE .)
    XOR             reduce using rule 37 (stmt -> SLICE .)
    COMPARE         reduce using rule 37 (stmt -> SLICE .)
    NEG             reduce using rule 37 (stmt -> SLICE .)
    ABS             reduce using rule 37 (stmt -> SLICE .)
    ADD             reduce using rule 37 (stmt -> SLICE .)
    SUB             reduce using rule 37 (stmt -> SLICE .)
    MUL             reduce using rule 37 (stmt -> SLICE .)
    EDIV            reduce using rule 37 (stmt -> SLICE .)
    LSL             reduce using rule 37 (stmt -> SLICE .)
    LSR             reduce using rule 37 (stmt -> SLICE .)
    CONCAT          reduce using rule 37 (stmt -> SLICE .)
    SIZE            reduce using rule 37 (stmt -> SLICE .)
    SLICE           reduce using rule 37 (stmt -> SLICE .)
    PAIR            reduce using rule 37 (stmt -> SLICE .)
    CAR             reduce using rule 37 (stmt -> SLICE .)
    CDR             reduce using rule 37 (stmt -> SLICE .)
    EMPTY_SET       reduce using rule 37 (stmt -> SLICE .)
    MEM             reduce using rule 37 (stmt -> SLICE .)
    UPDATE          reduce using rule 37 (stmt -> SLICE .)
    SOME            reduce using rule 37 (stmt -> SLICE .)
    NONE            reduce using rule 37 (stmt -> SLICE .)
    LEFT            reduce using rule 37 (stmt -> SLICE .)
    RIGHT           reduce using rule 37 (stmt -> SLICE .)
    CONS            reduce using rule 37 (stmt -> SLICE .)
    NIL             reduce using rule 37 (stmt -> SLICE .)
    NOT             reduce using rule 37 (stmt -> SLICE .)
    PUSH            reduce using rule 37 (stmt -> SLICE .)
    FAILWITH        reduce using rule 37 (stmt -> SLICE .)


state 30

    (38) stmt -> PAIR .

    SCOLON          reduce using rule 38 (stmt -> PAIR .)
    RBRACKET        reduce using rule 38 (stmt -> PAIR .)
    DROP            reduce using rule 38 (stmt -> PAIR .)
    DUP             reduce using rule 38 (stmt -> PAIR .)
    SWAP            reduce using rule 38 (stmt -> PAIR .)
    UNIT            reduce using rule 38 (stmt -> PAIR .)
    EQ              reduce using rule 38 (stmt -> PAIR .)
    NEQ             reduce using rule 38 (stmt -> PAIR .)
    LT              reduce using rule 38 (stmt -> PAIR .)
    GT              reduce using rule 38 (stmt -> PAIR .)
    LE              reduce using rule 38 (stmt -> PAIR .)
    GE              reduce using rule 38 (stmt -> PAIR .)
    OR              reduce using rule 38 (stmt -> PAIR .)
    AND             reduce using rule 38 (stmt -> PAIR .)
    XOR             reduce using rule 38 (stmt -> PAIR .)
    COMPARE         reduce using rule 38 (stmt -> PAIR .)
    NEG             reduce using rule 38 (stmt -> PAIR .)
    ABS             reduce using rule 38 (stmt -> PAIR .)
    ADD             reduce using rule 38 (stmt -> PAIR .)
    SUB             reduce using rule 38 (stmt -> PAIR .)
    MUL             reduce using rule 38 (stmt -> PAIR .)
    EDIV            reduce using rule 38 (stmt -> PAIR .)
    LSL             reduce using rule 38 (stmt -> PAIR .)
    LSR             reduce using rule 38 (stmt -> PAIR .)
    CONCAT          reduce using rule 38 (stmt -> PAIR .)
    SIZE            reduce using rule 38 (stmt -> PAIR .)
    SLICE           reduce using rule 38 (stmt -> PAIR .)
    PAIR            reduce using rule 38 (stmt -> PAIR .)
    CAR             reduce using rule 38 (stmt -> PAIR .)
    CDR             reduce using rule 38 (stmt -> PAIR .)
    EMPTY_SET       reduce using rule 38 (stmt -> PAIR .)
    MEM             reduce using rule 38 (stmt -> PAIR .)
    UPDATE          reduce using rule 38 (stmt -> PAIR .)
    SOME            reduce using rule 38 (stmt -> PAIR .)
    NONE            reduce using rule 38 (stmt -> PAIR .)
    LEFT            reduce using rule 38 (stmt -> PAIR .)
    RIGHT           reduce using rule 38 (stmt -> PAIR .)
    CONS            reduce using rule 38 (stmt -> PAIR .)
    NIL             reduce using rule 38 (stmt -> PAIR .)
    NOT             reduce using rule 38 (stmt -> PAIR .)
    PUSH            reduce using rule 38 (stmt -> PAIR .)
    FAILWITH        reduce using rule 38 (stmt -> PAIR .)


state 31

    (39) stmt -> CAR .

    SCOLON          reduce using rule 39 (stmt -> CAR .)
    RBRACKET        reduce using rule 39 (stmt -> CAR .)
    DROP            reduce using rule 39 (stmt -> CAR .)
    DUP             reduce using rule 39 (stmt -> CAR .)
    SWAP            reduce using rule 39 (stmt -> CAR .)
    UNIT            reduce using rule 39 (stmt -> CAR .)
    EQ              reduce using rule 39 (stmt -> CAR .)
    NEQ             reduce using rule 39 (stmt -> CAR .)
    LT              reduce using rule 39 (stmt -> CAR .)
    GT              reduce using rule 39 (stmt -> CAR .)
    LE              reduce using rule 39 (stmt -> CAR .)
    GE              reduce using rule 39 (stmt -> CAR .)
    OR              reduce using rule 39 (stmt -> CAR .)
    AND             reduce using rule 39 (stmt -> CAR .)
    XOR             reduce using rule 39 (stmt -> CAR .)
    COMPARE         reduce using rule 39 (stmt -> CAR .)
    NEG             reduce using rule 39 (stmt -> CAR .)
    ABS             reduce using rule 39 (stmt -> CAR .)
    ADD             reduce using rule 39 (stmt -> CAR .)
    SUB             reduce using rule 39 (stmt -> CAR .)
    MUL             reduce using rule 39 (stmt -> CAR .)
    EDIV            reduce using rule 39 (stmt -> CAR .)
    LSL             reduce using rule 39 (stmt -> CAR .)
    LSR             reduce using rule 39 (stmt -> CAR .)
    CONCAT          reduce using rule 39 (stmt -> CAR .)
    SIZE            reduce using rule 39 (stmt -> CAR .)
    SLICE           reduce using rule 39 (stmt -> CAR .)
    PAIR            reduce using rule 39 (stmt -> CAR .)
    CAR             reduce using rule 39 (stmt -> CAR .)
    CDR             reduce using rule 39 (stmt -> CAR .)
    EMPTY_SET       reduce using rule 39 (stmt -> CAR .)
    MEM             reduce using rule 39 (stmt -> CAR .)
    UPDATE          reduce using rule 39 (stmt -> CAR .)
    SOME            reduce using rule 39 (stmt -> CAR .)
    NONE            reduce using rule 39 (stmt -> CAR .)
    LEFT            reduce using rule 39 (stmt -> CAR .)
    RIGHT           reduce using rule 39 (stmt -> CAR .)
    CONS            reduce using rule 39 (stmt -> CAR .)
    NIL             reduce using rule 39 (stmt -> CAR .)
    NOT             reduce using rule 39 (stmt -> CAR .)
    PUSH            reduce using rule 39 (stmt -> CAR .)
    FAILWITH        reduce using rule 39 (stmt -> CAR .)


state 32

    (40) stmt -> CDR .

    SCOLON          reduce using rule 40 (stmt -> CDR .)
    RBRACKET        reduce using rule 40 (stmt -> CDR .)
    DROP            reduce using rule 40 (stmt -> CDR .)
    DUP             reduce using rule 40 (stmt -> CDR .)
    SWAP            reduce using rule 40 (stmt -> CDR .)
    UNIT            reduce using rule 40 (stmt -> CDR .)
    EQ              reduce using rule 40 (stmt -> CDR .)
    NEQ             reduce using rule 40 (stmt -> CDR .)
    LT              reduce using rule 40 (stmt -> CDR .)
    GT              reduce using rule 40 (stmt -> CDR .)
    LE              reduce using rule 40 (stmt -> CDR .)
    GE              reduce using rule 40 (stmt -> CDR .)
    OR              reduce using rule 40 (stmt -> CDR .)
    AND             reduce using rule 40 (stmt -> CDR .)
    XOR             reduce using rule 40 (stmt -> CDR .)
    COMPARE         reduce using rule 40 (stmt -> CDR .)
    NEG             reduce using rule 40 (stmt -> CDR .)
    ABS             reduce using rule 40 (stmt -> CDR .)
    ADD             reduce using rule 40 (stmt -> CDR .)
    SUB             reduce using rule 40 (stmt -> CDR .)
    MUL             reduce using rule 40 (stmt -> CDR .)
    EDIV            reduce using rule 40 (stmt -> CDR .)
    LSL             reduce using rule 40 (stmt -> CDR .)
    LSR             reduce using rule 40 (stmt -> CDR .)
    CONCAT          reduce using rule 40 (stmt -> CDR .)
    SIZE            reduce using rule 40 (stmt -> CDR .)
    SLICE           reduce using rule 40 (stmt -> CDR .)
    PAIR            reduce using rule 40 (stmt -> CDR .)
    CAR             reduce using rule 40 (stmt -> CDR .)
    CDR             reduce using rule 40 (stmt -> CDR .)
    EMPTY_SET       reduce using rule 40 (stmt -> CDR .)
    MEM             reduce using rule 40 (stmt -> CDR .)
    UPDATE          reduce using rule 40 (stmt -> CDR .)
    SOME            reduce using rule 40 (stmt -> CDR .)
    NONE            reduce using rule 40 (stmt -> CDR .)
    LEFT            reduce using rule 40 (stmt -> CDR .)
    RIGHT           reduce using rule 40 (stmt -> CDR .)
    CONS            reduce using rule 40 (stmt -> CDR .)
    NIL             reduce using rule 40 (stmt -> CDR .)
    NOT             reduce using rule 40 (stmt -> CDR .)
    PUSH            reduce using rule 40 (stmt -> CDR .)
    FAILWITH        reduce using rule 40 (stmt -> CDR .)


state 33

    (41) stmt -> EMPTY_SET . TYPE
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 48

state 34

    (42) stmt -> MEM .

    SCOLON          reduce using rule 42 (stmt -> MEM .)
    RBRACKET        reduce using rule 42 (stmt -> MEM .)
    DROP            reduce using rule 42 (stmt -> MEM .)
    DUP             reduce using rule 42 (stmt -> MEM .)
    SWAP            reduce using rule 42 (stmt -> MEM .)
    UNIT            reduce using rule 42 (stmt -> MEM .)
    EQ              reduce using rule 42 (stmt -> MEM .)
    NEQ             reduce using rule 42 (stmt -> MEM .)
    LT              reduce using rule 42 (stmt -> MEM .)
    GT              reduce using rule 42 (stmt -> MEM .)
    LE              reduce using rule 42 (stmt -> MEM .)
    GE              reduce using rule 42 (stmt -> MEM .)
    OR              reduce using rule 42 (stmt -> MEM .)
    AND             reduce using rule 42 (stmt -> MEM .)
    XOR             reduce using rule 42 (stmt -> MEM .)
    COMPARE         reduce using rule 42 (stmt -> MEM .)
    NEG             reduce using rule 42 (stmt -> MEM .)
    ABS             reduce using rule 42 (stmt -> MEM .)
    ADD             reduce using rule 42 (stmt -> MEM .)
    SUB             reduce using rule 42 (stmt -> MEM .)
    MUL             reduce using rule 42 (stmt -> MEM .)
    EDIV            reduce using rule 42 (stmt -> MEM .)
    LSL             reduce using rule 42 (stmt -> MEM .)
    LSR             reduce using rule 42 (stmt -> MEM .)
    CONCAT          reduce using rule 42 (stmt -> MEM .)
    SIZE            reduce using rule 42 (stmt -> MEM .)
    SLICE           reduce using rule 42 (stmt -> MEM .)
    PAIR            reduce using rule 42 (stmt -> MEM .)
    CAR             reduce using rule 42 (stmt -> MEM .)
    CDR             reduce using rule 42 (stmt -> MEM .)
    EMPTY_SET       reduce using rule 42 (stmt -> MEM .)
    MEM             reduce using rule 42 (stmt -> MEM .)
    UPDATE          reduce using rule 42 (stmt -> MEM .)
    SOME            reduce using rule 42 (stmt -> MEM .)
    NONE            reduce using rule 42 (stmt -> MEM .)
    LEFT            reduce using rule 42 (stmt -> MEM .)
    RIGHT           reduce using rule 42 (stmt -> MEM .)
    CONS            reduce using rule 42 (stmt -> MEM .)
    NIL             reduce using rule 42 (stmt -> MEM .)
    NOT             reduce using rule 42 (stmt -> MEM .)
    PUSH            reduce using rule 42 (stmt -> MEM .)
    FAILWITH        reduce using rule 42 (stmt -> MEM .)


state 35

    (43) stmt -> UPDATE .

    SCOLON          reduce using rule 43 (stmt -> UPDATE .)
    RBRACKET        reduce using rule 43 (stmt -> UPDATE .)
    DROP            reduce using rule 43 (stmt -> UPDATE .)
    DUP             reduce using rule 43 (stmt -> UPDATE .)
    SWAP            reduce using rule 43 (stmt -> UPDATE .)
    UNIT            reduce using rule 43 (stmt -> UPDATE .)
    EQ              reduce using rule 43 (stmt -> UPDATE .)
    NEQ             reduce using rule 43 (stmt -> UPDATE .)
    LT              reduce using rule 43 (stmt -> UPDATE .)
    GT              reduce using rule 43 (stmt -> UPDATE .)
    LE              reduce using rule 43 (stmt -> UPDATE .)
    GE              reduce using rule 43 (stmt -> UPDATE .)
    OR              reduce using rule 43 (stmt -> UPDATE .)
    AND             reduce using rule 43 (stmt -> UPDATE .)
    XOR             reduce using rule 43 (stmt -> UPDATE .)
    COMPARE         reduce using rule 43 (stmt -> UPDATE .)
    NEG             reduce using rule 43 (stmt -> UPDATE .)
    ABS             reduce using rule 43 (stmt -> UPDATE .)
    ADD             reduce using rule 43 (stmt -> UPDATE .)
    SUB             reduce using rule 43 (stmt -> UPDATE .)
    MUL             reduce using rule 43 (stmt -> UPDATE .)
    EDIV            reduce using rule 43 (stmt -> UPDATE .)
    LSL             reduce using rule 43 (stmt -> UPDATE .)
    LSR             reduce using rule 43 (stmt -> UPDATE .)
    CONCAT          reduce using rule 43 (stmt -> UPDATE .)
    SIZE            reduce using rule 43 (stmt -> UPDATE .)
    SLICE           reduce using rule 43 (stmt -> UPDATE .)
    PAIR            reduce using rule 43 (stmt -> UPDATE .)
    CAR             reduce using rule 43 (stmt -> UPDATE .)
    CDR             reduce using rule 43 (stmt -> UPDATE .)
    EMPTY_SET       reduce using rule 43 (stmt -> UPDATE .)
    MEM             reduce using rule 43 (stmt -> UPDATE .)
    UPDATE          reduce using rule 43 (stmt -> UPDATE .)
    SOME            reduce using rule 43 (stmt -> UPDATE .)
    NONE            reduce using rule 43 (stmt -> UPDATE .)
    LEFT            reduce using rule 43 (stmt -> UPDATE .)
    RIGHT           reduce using rule 43 (stmt -> UPDATE .)
    CONS            reduce using rule 43 (stmt -> UPDATE .)
    NIL             reduce using rule 43 (stmt -> UPDATE .)
    NOT             reduce using rule 43 (stmt -> UPDATE .)
    PUSH            reduce using rule 43 (stmt -> UPDATE .)
    FAILWITH        reduce using rule 43 (stmt -> UPDATE .)


state 36

    (44) stmt -> SOME .

    SCOLON          reduce using rule 44 (stmt -> SOME .)
    RBRACKET        reduce using rule 44 (stmt -> SOME .)
    DROP            reduce using rule 44 (stmt -> SOME .)
    DUP             reduce using rule 44 (stmt -> SOME .)
    SWAP            reduce using rule 44 (stmt -> SOME .)
    UNIT            reduce using rule 44 (stmt -> SOME .)
    EQ              reduce using rule 44 (stmt -> SOME .)
    NEQ             reduce using rule 44 (stmt -> SOME .)
    LT              reduce using rule 44 (stmt -> SOME .)
    GT              reduce using rule 44 (stmt -> SOME .)
    LE              reduce using rule 44 (stmt -> SOME .)
    GE              reduce using rule 44 (stmt -> SOME .)
    OR              reduce using rule 44 (stmt -> SOME .)
    AND             reduce using rule 44 (stmt -> SOME .)
    XOR             reduce using rule 44 (stmt -> SOME .)
    COMPARE         reduce using rule 44 (stmt -> SOME .)
    NEG             reduce using rule 44 (stmt -> SOME .)
    ABS             reduce using rule 44 (stmt -> SOME .)
    ADD             reduce using rule 44 (stmt -> SOME .)
    SUB             reduce using rule 44 (stmt -> SOME .)
    MUL             reduce using rule 44 (stmt -> SOME .)
    EDIV            reduce using rule 44 (stmt -> SOME .)
    LSL             reduce using rule 44 (stmt -> SOME .)
    LSR             reduce using rule 44 (stmt -> SOME .)
    CONCAT          reduce using rule 44 (stmt -> SOME .)
    SIZE            reduce using rule 44 (stmt -> SOME .)
    SLICE           reduce using rule 44 (stmt -> SOME .)
    PAIR            reduce using rule 44 (stmt -> SOME .)
    CAR             reduce using rule 44 (stmt -> SOME .)
    CDR             reduce using rule 44 (stmt -> SOME .)
    EMPTY_SET       reduce using rule 44 (stmt -> SOME .)
    MEM             reduce using rule 44 (stmt -> SOME .)
    UPDATE          reduce using rule 44 (stmt -> SOME .)
    SOME            reduce using rule 44 (stmt -> SOME .)
    NONE            reduce using rule 44 (stmt -> SOME .)
    LEFT            reduce using rule 44 (stmt -> SOME .)
    RIGHT           reduce using rule 44 (stmt -> SOME .)
    CONS            reduce using rule 44 (stmt -> SOME .)
    NIL             reduce using rule 44 (stmt -> SOME .)
    NOT             reduce using rule 44 (stmt -> SOME .)
    PUSH            reduce using rule 44 (stmt -> SOME .)
    FAILWITH        reduce using rule 44 (stmt -> SOME .)


state 37

    (45) stmt -> NONE . TYPE
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 55

state 38

    (46) stmt -> LEFT . TYPE
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 56

state 39

    (47) stmt -> RIGHT . TYPE
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 57

state 40

    (48) stmt -> CONS .

    SCOLON          reduce using rule 48 (stmt -> CONS .)
    RBRACKET        reduce using rule 48 (stmt -> CONS .)
    DROP            reduce using rule 48 (stmt -> CONS .)
    DUP             reduce using rule 48 (stmt -> CONS .)
    SWAP            reduce using rule 48 (stmt -> CONS .)
    UNIT            reduce using rule 48 (stmt -> CONS .)
    EQ              reduce using rule 48 (stmt -> CONS .)
    NEQ             reduce using rule 48 (stmt -> CONS .)
    LT              reduce using rule 48 (stmt -> CONS .)
    GT              reduce using rule 48 (stmt -> CONS .)
    LE              reduce using rule 48 (stmt -> CONS .)
    GE              reduce using rule 48 (stmt -> CONS .)
    OR              reduce using rule 48 (stmt -> CONS .)
    AND             reduce using rule 48 (stmt -> CONS .)
    XOR             reduce using rule 48 (stmt -> CONS .)
    COMPARE         reduce using rule 48 (stmt -> CONS .)
    NEG             reduce using rule 48 (stmt -> CONS .)
    ABS             reduce using rule 48 (stmt -> CONS .)
    ADD             reduce using rule 48 (stmt -> CONS .)
    SUB             reduce using rule 48 (stmt -> CONS .)
    MUL             reduce using rule 48 (stmt -> CONS .)
    EDIV            reduce using rule 48 (stmt -> CONS .)
    LSL             reduce using rule 48 (stmt -> CONS .)
    LSR             reduce using rule 48 (stmt -> CONS .)
    CONCAT          reduce using rule 48 (stmt -> CONS .)
    SIZE            reduce using rule 48 (stmt -> CONS .)
    SLICE           reduce using rule 48 (stmt -> CONS .)
    PAIR            reduce using rule 48 (stmt -> CONS .)
    CAR             reduce using rule 48 (stmt -> CONS .)
    CDR             reduce using rule 48 (stmt -> CONS .)
    EMPTY_SET       reduce using rule 48 (stmt -> CONS .)
    MEM             reduce using rule 48 (stmt -> CONS .)
    UPDATE          reduce using rule 48 (stmt -> CONS .)
    SOME            reduce using rule 48 (stmt -> CONS .)
    NONE            reduce using rule 48 (stmt -> CONS .)
    LEFT            reduce using rule 48 (stmt -> CONS .)
    RIGHT           reduce using rule 48 (stmt -> CONS .)
    CONS            reduce using rule 48 (stmt -> CONS .)
    NIL             reduce using rule 48 (stmt -> CONS .)
    NOT             reduce using rule 48 (stmt -> CONS .)
    PUSH            reduce using rule 48 (stmt -> CONS .)
    FAILWITH        reduce using rule 48 (stmt -> CONS .)


state 41

    (49) stmt -> NIL . TYPE
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 58

state 42

    (50) stmt -> NOT .

    SCOLON          reduce using rule 50 (stmt -> NOT .)
    RBRACKET        reduce using rule 50 (stmt -> NOT .)
    DROP            reduce using rule 50 (stmt -> NOT .)
    DUP             reduce using rule 50 (stmt -> NOT .)
    SWAP            reduce using rule 50 (stmt -> NOT .)
    UNIT            reduce using rule 50 (stmt -> NOT .)
    EQ              reduce using rule 50 (stmt -> NOT .)
    NEQ             reduce using rule 50 (stmt -> NOT .)
    LT              reduce using rule 50 (stmt -> NOT .)
    GT              reduce using rule 50 (stmt -> NOT .)
    LE              reduce using rule 50 (stmt -> NOT .)
    GE              reduce using rule 50 (stmt -> NOT .)
    OR              reduce using rule 50 (stmt -> NOT .)
    AND             reduce using rule 50 (stmt -> NOT .)
    XOR             reduce using rule 50 (stmt -> NOT .)
    COMPARE         reduce using rule 50 (stmt -> NOT .)
    NEG             reduce using rule 50 (stmt -> NOT .)
    ABS             reduce using rule 50 (stmt -> NOT .)
    ADD             reduce using rule 50 (stmt -> NOT .)
    SUB             reduce using rule 50 (stmt -> NOT .)
    MUL             reduce using rule 50 (stmt -> NOT .)
    EDIV            reduce using rule 50 (stmt -> NOT .)
    LSL             reduce using rule 50 (stmt -> NOT .)
    LSR             reduce using rule 50 (stmt -> NOT .)
    CONCAT          reduce using rule 50 (stmt -> NOT .)
    SIZE            reduce using rule 50 (stmt -> NOT .)
    SLICE           reduce using rule 50 (stmt -> NOT .)
    PAIR            reduce using rule 50 (stmt -> NOT .)
    CAR             reduce using rule 50 (stmt -> NOT .)
    CDR             reduce using rule 50 (stmt -> NOT .)
    EMPTY_SET       reduce using rule 50 (stmt -> NOT .)
    MEM             reduce using rule 50 (stmt -> NOT .)
    UPDATE          reduce using rule 50 (stmt -> NOT .)
    SOME            reduce using rule 50 (stmt -> NOT .)
    NONE            reduce using rule 50 (stmt -> NOT .)
    LEFT            reduce using rule 50 (stmt -> NOT .)
    RIGHT           reduce using rule 50 (stmt -> NOT .)
    CONS            reduce using rule 50 (stmt -> NOT .)
    NIL             reduce using rule 50 (stmt -> NOT .)
    NOT             reduce using rule 50 (stmt -> NOT .)
    PUSH            reduce using rule 50 (stmt -> NOT .)
    FAILWITH        reduce using rule 50 (stmt -> NOT .)


state 43

    (57) stmt -> PUSH . TYPE value
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 59

state 44

    (58) stmt -> FAILWITH .

    SCOLON          reduce using rule 58 (stmt -> FAILWITH .)
    RBRACKET        reduce using rule 58 (stmt -> FAILWITH .)
    DROP            reduce using rule 58 (stmt -> FAILWITH .)
    DUP             reduce using rule 58 (stmt -> FAILWITH .)
    SWAP            reduce using rule 58 (stmt -> FAILWITH .)
    UNIT            reduce using rule 58 (stmt -> FAILWITH .)
    EQ              reduce using rule 58 (stmt -> FAILWITH .)
    NEQ             reduce using rule 58 (stmt -> FAILWITH .)
    LT              reduce using rule 58 (stmt -> FAILWITH .)
    GT              reduce using rule 58 (stmt -> FAILWITH .)
    LE              reduce using rule 58 (stmt -> FAILWITH .)
    GE              reduce using rule 58 (stmt -> FAILWITH .)
    OR              reduce using rule 58 (stmt -> FAILWITH .)
    AND             reduce using rule 58 (stmt -> FAILWITH .)
    XOR             reduce using rule 58 (stmt -> FAILWITH .)
    COMPARE         reduce using rule 58 (stmt -> FAILWITH .)
    NEG             reduce using rule 58 (stmt -> FAILWITH .)
    ABS             reduce using rule 58 (stmt -> FAILWITH .)
    ADD             reduce using rule 58 (stmt -> FAILWITH .)
    SUB             reduce using rule 58 (stmt -> FAILWITH .)
    MUL             reduce using rule 58 (stmt -> FAILWITH .)
    EDIV            reduce using rule 58 (stmt -> FAILWITH .)
    LSL             reduce using rule 58 (stmt -> FAILWITH .)
    LSR             reduce using rule 58 (stmt -> FAILWITH .)
    CONCAT          reduce using rule 58 (stmt -> FAILWITH .)
    SIZE            reduce using rule 58 (stmt -> FAILWITH .)
    SLICE           reduce using rule 58 (stmt -> FAILWITH .)
    PAIR            reduce using rule 58 (stmt -> FAILWITH .)
    CAR             reduce using rule 58 (stmt -> FAILWITH .)
    CDR             reduce using rule 58 (stmt -> FAILWITH .)
    EMPTY_SET       reduce using rule 58 (stmt -> FAILWITH .)
    MEM             reduce using rule 58 (stmt -> FAILWITH .)
    UPDATE          reduce using rule 58 (stmt -> FAILWITH .)
    SOME            reduce using rule 58 (stmt -> FAILWITH .)
    NONE            reduce using rule 58 (stmt -> FAILWITH .)
    LEFT            reduce using rule 58 (stmt -> FAILWITH .)
    RIGHT           reduce using rule 58 (stmt -> FAILWITH .)
    CONS            reduce using rule 58 (stmt -> FAILWITH .)
    NIL             reduce using rule 58 (stmt -> FAILWITH .)
    NOT             reduce using rule 58 (stmt -> FAILWITH .)
    PUSH            reduce using rule 58 (stmt -> FAILWITH .)
    FAILWITH        reduce using rule 58 (stmt -> FAILWITH .)


state 45

    (1) body -> LBRACKET compound_statement RBRACKET .

    $end            reduce using rule 1 (body -> LBRACKET compound_statement RBRACKET .)


state 46

    (5) compound_statement -> compound_statement stmt . SCOLON
    (6) compound_statement -> compound_statement stmt .

    SCOLON          shift and go to state 60
    RBRACKET        reduce using rule 6 (compound_statement -> compound_statement stmt .)
    DROP            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    DUP             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    SWAP            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    UNIT            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    EQ              reduce using rule 6 (compound_statement -> compound_statement stmt .)
    NEQ             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    LT              reduce using rule 6 (compound_statement -> compound_statement stmt .)
    GT              reduce using rule 6 (compound_statement -> compound_statement stmt .)
    LE              reduce using rule 6 (compound_statement -> compound_statement stmt .)
    GE              reduce using rule 6 (compound_statement -> compound_statement stmt .)
    OR              reduce using rule 6 (compound_statement -> compound_statement stmt .)
    AND             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    XOR             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    COMPARE         reduce using rule 6 (compound_statement -> compound_statement stmt .)
    NEG             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    ABS             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    ADD             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    SUB             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    MUL             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    EDIV            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    LSL             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    LSR             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    CONCAT          reduce using rule 6 (compound_statement -> compound_statement stmt .)
    SIZE            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    SLICE           reduce using rule 6 (compound_statement -> compound_statement stmt .)
    PAIR            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    CAR             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    CDR             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    EMPTY_SET       reduce using rule 6 (compound_statement -> compound_statement stmt .)
    MEM             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    UPDATE          reduce using rule 6 (compound_statement -> compound_statement stmt .)
    SOME            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    NONE            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    LEFT            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    RIGHT           reduce using rule 6 (compound_statement -> compound_statement stmt .)
    CONS            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    NIL             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    NOT             reduce using rule 6 (compound_statement -> compound_statement stmt .)
    PUSH            reduce using rule 6 (compound_statement -> compound_statement stmt .)
    FAILWITH        reduce using rule 6 (compound_statement -> compound_statement stmt .)


state 47

    (4) compound_statement -> stmt SCOLON .

    RBRACKET        reduce using rule 4 (compound_statement -> stmt SCOLON .)
    DROP            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    DUP             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    SWAP            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    UNIT            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    EQ              reduce using rule 4 (compound_statement -> stmt SCOLON .)
    NEQ             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    LT              reduce using rule 4 (compound_statement -> stmt SCOLON .)
    GT              reduce using rule 4 (compound_statement -> stmt SCOLON .)
    LE              reduce using rule 4 (compound_statement -> stmt SCOLON .)
    GE              reduce using rule 4 (compound_statement -> stmt SCOLON .)
    OR              reduce using rule 4 (compound_statement -> stmt SCOLON .)
    AND             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    XOR             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    COMPARE         reduce using rule 4 (compound_statement -> stmt SCOLON .)
    NEG             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    ABS             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    ADD             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    SUB             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    MUL             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    EDIV            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    LSL             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    LSR             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    CONCAT          reduce using rule 4 (compound_statement -> stmt SCOLON .)
    SIZE            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    SLICE           reduce using rule 4 (compound_statement -> stmt SCOLON .)
    PAIR            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    CAR             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    CDR             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    EMPTY_SET       reduce using rule 4 (compound_statement -> stmt SCOLON .)
    MEM             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    UPDATE          reduce using rule 4 (compound_statement -> stmt SCOLON .)
    SOME            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    NONE            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    LEFT            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    RIGHT           reduce using rule 4 (compound_statement -> stmt SCOLON .)
    CONS            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    NIL             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    NOT             reduce using rule 4 (compound_statement -> stmt SCOLON .)
    PUSH            reduce using rule 4 (compound_statement -> stmt SCOLON .)
    FAILWITH        reduce using rule 4 (compound_statement -> stmt SCOLON .)


state 48

    (41) stmt -> EMPTY_SET TYPE .

    SCOLON          reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    RBRACKET        reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    DROP            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    DUP             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    SWAP            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    UNIT            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    EQ              reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    NEQ             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    LT              reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    GT              reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    LE              reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    GE              reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    OR              reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    AND             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    XOR             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    COMPARE         reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    NEG             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    ABS             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    ADD             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    SUB             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    MUL             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    EDIV            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    LSL             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    LSR             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    CONCAT          reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    SIZE            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    SLICE           reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    PAIR            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    CAR             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    CDR             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    EMPTY_SET       reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    MEM             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    UPDATE          reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    SOME            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    NONE            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    LEFT            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    RIGHT           reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    CONS            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    NIL             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    NOT             reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    PUSH            reduce using rule 41 (stmt -> EMPTY_SET TYPE .)
    FAILWITH        reduce using rule 41 (stmt -> EMPTY_SET TYPE .)


state 49

    (51) TYPE -> NAT .

    SCOLON          reduce using rule 51 (TYPE -> NAT .)
    RBRACKET        reduce using rule 51 (TYPE -> NAT .)
    DROP            reduce using rule 51 (TYPE -> NAT .)
    DUP             reduce using rule 51 (TYPE -> NAT .)
    SWAP            reduce using rule 51 (TYPE -> NAT .)
    UNIT            reduce using rule 51 (TYPE -> NAT .)
    EQ              reduce using rule 51 (TYPE -> NAT .)
    NEQ             reduce using rule 51 (TYPE -> NAT .)
    LT              reduce using rule 51 (TYPE -> NAT .)
    GT              reduce using rule 51 (TYPE -> NAT .)
    LE              reduce using rule 51 (TYPE -> NAT .)
    GE              reduce using rule 51 (TYPE -> NAT .)
    OR              reduce using rule 51 (TYPE -> NAT .)
    AND             reduce using rule 51 (TYPE -> NAT .)
    XOR             reduce using rule 51 (TYPE -> NAT .)
    COMPARE         reduce using rule 51 (TYPE -> NAT .)
    NEG             reduce using rule 51 (TYPE -> NAT .)
    ABS             reduce using rule 51 (TYPE -> NAT .)
    ADD             reduce using rule 51 (TYPE -> NAT .)
    SUB             reduce using rule 51 (TYPE -> NAT .)
    MUL             reduce using rule 51 (TYPE -> NAT .)
    EDIV            reduce using rule 51 (TYPE -> NAT .)
    LSL             reduce using rule 51 (TYPE -> NAT .)
    LSR             reduce using rule 51 (TYPE -> NAT .)
    CONCAT          reduce using rule 51 (TYPE -> NAT .)
    SIZE            reduce using rule 51 (TYPE -> NAT .)
    SLICE           reduce using rule 51 (TYPE -> NAT .)
    PAIR            reduce using rule 51 (TYPE -> NAT .)
    CAR             reduce using rule 51 (TYPE -> NAT .)
    CDR             reduce using rule 51 (TYPE -> NAT .)
    EMPTY_SET       reduce using rule 51 (TYPE -> NAT .)
    MEM             reduce using rule 51 (TYPE -> NAT .)
    UPDATE          reduce using rule 51 (TYPE -> NAT .)
    SOME            reduce using rule 51 (TYPE -> NAT .)
    NONE            reduce using rule 51 (TYPE -> NAT .)
    LEFT            reduce using rule 51 (TYPE -> NAT .)
    RIGHT           reduce using rule 51 (TYPE -> NAT .)
    CONS            reduce using rule 51 (TYPE -> NAT .)
    NIL             reduce using rule 51 (TYPE -> NAT .)
    NOT             reduce using rule 51 (TYPE -> NAT .)
    PUSH            reduce using rule 51 (TYPE -> NAT .)
    FAILWITH        reduce using rule 51 (TYPE -> NAT .)
    NUMBER          reduce using rule 51 (TYPE -> NAT .)
    TEXT            reduce using rule 51 (TYPE -> NAT .)
    LPARENS         reduce using rule 51 (TYPE -> NAT .)
    TRUE            reduce using rule 51 (TYPE -> NAT .)
    FALSE           reduce using rule 51 (TYPE -> NAT .)
    NAT             reduce using rule 51 (TYPE -> NAT .)
    STRING          reduce using rule 51 (TYPE -> NAT .)
    INT             reduce using rule 51 (TYPE -> NAT .)
    BOOL            reduce using rule 51 (TYPE -> NAT .)
    BYTES           reduce using rule 51 (TYPE -> NAT .)
    RPARENS         reduce using rule 51 (TYPE -> NAT .)


state 50

    (52) TYPE -> STRING .

    SCOLON          reduce using rule 52 (TYPE -> STRING .)
    RBRACKET        reduce using rule 52 (TYPE -> STRING .)
    DROP            reduce using rule 52 (TYPE -> STRING .)
    DUP             reduce using rule 52 (TYPE -> STRING .)
    SWAP            reduce using rule 52 (TYPE -> STRING .)
    UNIT            reduce using rule 52 (TYPE -> STRING .)
    EQ              reduce using rule 52 (TYPE -> STRING .)
    NEQ             reduce using rule 52 (TYPE -> STRING .)
    LT              reduce using rule 52 (TYPE -> STRING .)
    GT              reduce using rule 52 (TYPE -> STRING .)
    LE              reduce using rule 52 (TYPE -> STRING .)
    GE              reduce using rule 52 (TYPE -> STRING .)
    OR              reduce using rule 52 (TYPE -> STRING .)
    AND             reduce using rule 52 (TYPE -> STRING .)
    XOR             reduce using rule 52 (TYPE -> STRING .)
    COMPARE         reduce using rule 52 (TYPE -> STRING .)
    NEG             reduce using rule 52 (TYPE -> STRING .)
    ABS             reduce using rule 52 (TYPE -> STRING .)
    ADD             reduce using rule 52 (TYPE -> STRING .)
    SUB             reduce using rule 52 (TYPE -> STRING .)
    MUL             reduce using rule 52 (TYPE -> STRING .)
    EDIV            reduce using rule 52 (TYPE -> STRING .)
    LSL             reduce using rule 52 (TYPE -> STRING .)
    LSR             reduce using rule 52 (TYPE -> STRING .)
    CONCAT          reduce using rule 52 (TYPE -> STRING .)
    SIZE            reduce using rule 52 (TYPE -> STRING .)
    SLICE           reduce using rule 52 (TYPE -> STRING .)
    PAIR            reduce using rule 52 (TYPE -> STRING .)
    CAR             reduce using rule 52 (TYPE -> STRING .)
    CDR             reduce using rule 52 (TYPE -> STRING .)
    EMPTY_SET       reduce using rule 52 (TYPE -> STRING .)
    MEM             reduce using rule 52 (TYPE -> STRING .)
    UPDATE          reduce using rule 52 (TYPE -> STRING .)
    SOME            reduce using rule 52 (TYPE -> STRING .)
    NONE            reduce using rule 52 (TYPE -> STRING .)
    LEFT            reduce using rule 52 (TYPE -> STRING .)
    RIGHT           reduce using rule 52 (TYPE -> STRING .)
    CONS            reduce using rule 52 (TYPE -> STRING .)
    NIL             reduce using rule 52 (TYPE -> STRING .)
    NOT             reduce using rule 52 (TYPE -> STRING .)
    PUSH            reduce using rule 52 (TYPE -> STRING .)
    FAILWITH        reduce using rule 52 (TYPE -> STRING .)
    NUMBER          reduce using rule 52 (TYPE -> STRING .)
    TEXT            reduce using rule 52 (TYPE -> STRING .)
    LPARENS         reduce using rule 52 (TYPE -> STRING .)
    TRUE            reduce using rule 52 (TYPE -> STRING .)
    FALSE           reduce using rule 52 (TYPE -> STRING .)
    NAT             reduce using rule 52 (TYPE -> STRING .)
    STRING          reduce using rule 52 (TYPE -> STRING .)
    INT             reduce using rule 52 (TYPE -> STRING .)
    BOOL            reduce using rule 52 (TYPE -> STRING .)
    BYTES           reduce using rule 52 (TYPE -> STRING .)
    RPARENS         reduce using rule 52 (TYPE -> STRING .)


state 51

    (53) TYPE -> INT .

    SCOLON          reduce using rule 53 (TYPE -> INT .)
    RBRACKET        reduce using rule 53 (TYPE -> INT .)
    DROP            reduce using rule 53 (TYPE -> INT .)
    DUP             reduce using rule 53 (TYPE -> INT .)
    SWAP            reduce using rule 53 (TYPE -> INT .)
    UNIT            reduce using rule 53 (TYPE -> INT .)
    EQ              reduce using rule 53 (TYPE -> INT .)
    NEQ             reduce using rule 53 (TYPE -> INT .)
    LT              reduce using rule 53 (TYPE -> INT .)
    GT              reduce using rule 53 (TYPE -> INT .)
    LE              reduce using rule 53 (TYPE -> INT .)
    GE              reduce using rule 53 (TYPE -> INT .)
    OR              reduce using rule 53 (TYPE -> INT .)
    AND             reduce using rule 53 (TYPE -> INT .)
    XOR             reduce using rule 53 (TYPE -> INT .)
    COMPARE         reduce using rule 53 (TYPE -> INT .)
    NEG             reduce using rule 53 (TYPE -> INT .)
    ABS             reduce using rule 53 (TYPE -> INT .)
    ADD             reduce using rule 53 (TYPE -> INT .)
    SUB             reduce using rule 53 (TYPE -> INT .)
    MUL             reduce using rule 53 (TYPE -> INT .)
    EDIV            reduce using rule 53 (TYPE -> INT .)
    LSL             reduce using rule 53 (TYPE -> INT .)
    LSR             reduce using rule 53 (TYPE -> INT .)
    CONCAT          reduce using rule 53 (TYPE -> INT .)
    SIZE            reduce using rule 53 (TYPE -> INT .)
    SLICE           reduce using rule 53 (TYPE -> INT .)
    PAIR            reduce using rule 53 (TYPE -> INT .)
    CAR             reduce using rule 53 (TYPE -> INT .)
    CDR             reduce using rule 53 (TYPE -> INT .)
    EMPTY_SET       reduce using rule 53 (TYPE -> INT .)
    MEM             reduce using rule 53 (TYPE -> INT .)
    UPDATE          reduce using rule 53 (TYPE -> INT .)
    SOME            reduce using rule 53 (TYPE -> INT .)
    NONE            reduce using rule 53 (TYPE -> INT .)
    LEFT            reduce using rule 53 (TYPE -> INT .)
    RIGHT           reduce using rule 53 (TYPE -> INT .)
    CONS            reduce using rule 53 (TYPE -> INT .)
    NIL             reduce using rule 53 (TYPE -> INT .)
    NOT             reduce using rule 53 (TYPE -> INT .)
    PUSH            reduce using rule 53 (TYPE -> INT .)
    FAILWITH        reduce using rule 53 (TYPE -> INT .)
    NUMBER          reduce using rule 53 (TYPE -> INT .)
    TEXT            reduce using rule 53 (TYPE -> INT .)
    LPARENS         reduce using rule 53 (TYPE -> INT .)
    TRUE            reduce using rule 53 (TYPE -> INT .)
    FALSE           reduce using rule 53 (TYPE -> INT .)
    NAT             reduce using rule 53 (TYPE -> INT .)
    STRING          reduce using rule 53 (TYPE -> INT .)
    INT             reduce using rule 53 (TYPE -> INT .)
    BOOL            reduce using rule 53 (TYPE -> INT .)
    BYTES           reduce using rule 53 (TYPE -> INT .)
    RPARENS         reduce using rule 53 (TYPE -> INT .)


state 52

    (54) TYPE -> BOOL .

    SCOLON          reduce using rule 54 (TYPE -> BOOL .)
    RBRACKET        reduce using rule 54 (TYPE -> BOOL .)
    DROP            reduce using rule 54 (TYPE -> BOOL .)
    DUP             reduce using rule 54 (TYPE -> BOOL .)
    SWAP            reduce using rule 54 (TYPE -> BOOL .)
    UNIT            reduce using rule 54 (TYPE -> BOOL .)
    EQ              reduce using rule 54 (TYPE -> BOOL .)
    NEQ             reduce using rule 54 (TYPE -> BOOL .)
    LT              reduce using rule 54 (TYPE -> BOOL .)
    GT              reduce using rule 54 (TYPE -> BOOL .)
    LE              reduce using rule 54 (TYPE -> BOOL .)
    GE              reduce using rule 54 (TYPE -> BOOL .)
    OR              reduce using rule 54 (TYPE -> BOOL .)
    AND             reduce using rule 54 (TYPE -> BOOL .)
    XOR             reduce using rule 54 (TYPE -> BOOL .)
    COMPARE         reduce using rule 54 (TYPE -> BOOL .)
    NEG             reduce using rule 54 (TYPE -> BOOL .)
    ABS             reduce using rule 54 (TYPE -> BOOL .)
    ADD             reduce using rule 54 (TYPE -> BOOL .)
    SUB             reduce using rule 54 (TYPE -> BOOL .)
    MUL             reduce using rule 54 (TYPE -> BOOL .)
    EDIV            reduce using rule 54 (TYPE -> BOOL .)
    LSL             reduce using rule 54 (TYPE -> BOOL .)
    LSR             reduce using rule 54 (TYPE -> BOOL .)
    CONCAT          reduce using rule 54 (TYPE -> BOOL .)
    SIZE            reduce using rule 54 (TYPE -> BOOL .)
    SLICE           reduce using rule 54 (TYPE -> BOOL .)
    PAIR            reduce using rule 54 (TYPE -> BOOL .)
    CAR             reduce using rule 54 (TYPE -> BOOL .)
    CDR             reduce using rule 54 (TYPE -> BOOL .)
    EMPTY_SET       reduce using rule 54 (TYPE -> BOOL .)
    MEM             reduce using rule 54 (TYPE -> BOOL .)
    UPDATE          reduce using rule 54 (TYPE -> BOOL .)
    SOME            reduce using rule 54 (TYPE -> BOOL .)
    NONE            reduce using rule 54 (TYPE -> BOOL .)
    LEFT            reduce using rule 54 (TYPE -> BOOL .)
    RIGHT           reduce using rule 54 (TYPE -> BOOL .)
    CONS            reduce using rule 54 (TYPE -> BOOL .)
    NIL             reduce using rule 54 (TYPE -> BOOL .)
    NOT             reduce using rule 54 (TYPE -> BOOL .)
    PUSH            reduce using rule 54 (TYPE -> BOOL .)
    FAILWITH        reduce using rule 54 (TYPE -> BOOL .)
    NUMBER          reduce using rule 54 (TYPE -> BOOL .)
    TEXT            reduce using rule 54 (TYPE -> BOOL .)
    LPARENS         reduce using rule 54 (TYPE -> BOOL .)
    TRUE            reduce using rule 54 (TYPE -> BOOL .)
    FALSE           reduce using rule 54 (TYPE -> BOOL .)
    NAT             reduce using rule 54 (TYPE -> BOOL .)
    STRING          reduce using rule 54 (TYPE -> BOOL .)
    INT             reduce using rule 54 (TYPE -> BOOL .)
    BOOL            reduce using rule 54 (TYPE -> BOOL .)
    BYTES           reduce using rule 54 (TYPE -> BOOL .)
    RPARENS         reduce using rule 54 (TYPE -> BOOL .)


state 53

    (55) TYPE -> BYTES .

    SCOLON          reduce using rule 55 (TYPE -> BYTES .)
    RBRACKET        reduce using rule 55 (TYPE -> BYTES .)
    DROP            reduce using rule 55 (TYPE -> BYTES .)
    DUP             reduce using rule 55 (TYPE -> BYTES .)
    SWAP            reduce using rule 55 (TYPE -> BYTES .)
    UNIT            reduce using rule 55 (TYPE -> BYTES .)
    EQ              reduce using rule 55 (TYPE -> BYTES .)
    NEQ             reduce using rule 55 (TYPE -> BYTES .)
    LT              reduce using rule 55 (TYPE -> BYTES .)
    GT              reduce using rule 55 (TYPE -> BYTES .)
    LE              reduce using rule 55 (TYPE -> BYTES .)
    GE              reduce using rule 55 (TYPE -> BYTES .)
    OR              reduce using rule 55 (TYPE -> BYTES .)
    AND             reduce using rule 55 (TYPE -> BYTES .)
    XOR             reduce using rule 55 (TYPE -> BYTES .)
    COMPARE         reduce using rule 55 (TYPE -> BYTES .)
    NEG             reduce using rule 55 (TYPE -> BYTES .)
    ABS             reduce using rule 55 (TYPE -> BYTES .)
    ADD             reduce using rule 55 (TYPE -> BYTES .)
    SUB             reduce using rule 55 (TYPE -> BYTES .)
    MUL             reduce using rule 55 (TYPE -> BYTES .)
    EDIV            reduce using rule 55 (TYPE -> BYTES .)
    LSL             reduce using rule 55 (TYPE -> BYTES .)
    LSR             reduce using rule 55 (TYPE -> BYTES .)
    CONCAT          reduce using rule 55 (TYPE -> BYTES .)
    SIZE            reduce using rule 55 (TYPE -> BYTES .)
    SLICE           reduce using rule 55 (TYPE -> BYTES .)
    PAIR            reduce using rule 55 (TYPE -> BYTES .)
    CAR             reduce using rule 55 (TYPE -> BYTES .)
    CDR             reduce using rule 55 (TYPE -> BYTES .)
    EMPTY_SET       reduce using rule 55 (TYPE -> BYTES .)
    MEM             reduce using rule 55 (TYPE -> BYTES .)
    UPDATE          reduce using rule 55 (TYPE -> BYTES .)
    SOME            reduce using rule 55 (TYPE -> BYTES .)
    NONE            reduce using rule 55 (TYPE -> BYTES .)
    LEFT            reduce using rule 55 (TYPE -> BYTES .)
    RIGHT           reduce using rule 55 (TYPE -> BYTES .)
    CONS            reduce using rule 55 (TYPE -> BYTES .)
    NIL             reduce using rule 55 (TYPE -> BYTES .)
    NOT             reduce using rule 55 (TYPE -> BYTES .)
    PUSH            reduce using rule 55 (TYPE -> BYTES .)
    FAILWITH        reduce using rule 55 (TYPE -> BYTES .)
    NUMBER          reduce using rule 55 (TYPE -> BYTES .)
    TEXT            reduce using rule 55 (TYPE -> BYTES .)
    LPARENS         reduce using rule 55 (TYPE -> BYTES .)
    TRUE            reduce using rule 55 (TYPE -> BYTES .)
    FALSE           reduce using rule 55 (TYPE -> BYTES .)
    NAT             reduce using rule 55 (TYPE -> BYTES .)
    STRING          reduce using rule 55 (TYPE -> BYTES .)
    INT             reduce using rule 55 (TYPE -> BYTES .)
    BOOL            reduce using rule 55 (TYPE -> BYTES .)
    BYTES           reduce using rule 55 (TYPE -> BYTES .)
    RPARENS         reduce using rule 55 (TYPE -> BYTES .)


state 54

    (56) TYPE -> LPARENS . LPAIR TYPE TYPE RPARENS

    LPAIR           shift and go to state 61


state 55

    (45) stmt -> NONE TYPE .

    SCOLON          reduce using rule 45 (stmt -> NONE TYPE .)
    RBRACKET        reduce using rule 45 (stmt -> NONE TYPE .)
    DROP            reduce using rule 45 (stmt -> NONE TYPE .)
    DUP             reduce using rule 45 (stmt -> NONE TYPE .)
    SWAP            reduce using rule 45 (stmt -> NONE TYPE .)
    UNIT            reduce using rule 45 (stmt -> NONE TYPE .)
    EQ              reduce using rule 45 (stmt -> NONE TYPE .)
    NEQ             reduce using rule 45 (stmt -> NONE TYPE .)
    LT              reduce using rule 45 (stmt -> NONE TYPE .)
    GT              reduce using rule 45 (stmt -> NONE TYPE .)
    LE              reduce using rule 45 (stmt -> NONE TYPE .)
    GE              reduce using rule 45 (stmt -> NONE TYPE .)
    OR              reduce using rule 45 (stmt -> NONE TYPE .)
    AND             reduce using rule 45 (stmt -> NONE TYPE .)
    XOR             reduce using rule 45 (stmt -> NONE TYPE .)
    COMPARE         reduce using rule 45 (stmt -> NONE TYPE .)
    NEG             reduce using rule 45 (stmt -> NONE TYPE .)
    ABS             reduce using rule 45 (stmt -> NONE TYPE .)
    ADD             reduce using rule 45 (stmt -> NONE TYPE .)
    SUB             reduce using rule 45 (stmt -> NONE TYPE .)
    MUL             reduce using rule 45 (stmt -> NONE TYPE .)
    EDIV            reduce using rule 45 (stmt -> NONE TYPE .)
    LSL             reduce using rule 45 (stmt -> NONE TYPE .)
    LSR             reduce using rule 45 (stmt -> NONE TYPE .)
    CONCAT          reduce using rule 45 (stmt -> NONE TYPE .)
    SIZE            reduce using rule 45 (stmt -> NONE TYPE .)
    SLICE           reduce using rule 45 (stmt -> NONE TYPE .)
    PAIR            reduce using rule 45 (stmt -> NONE TYPE .)
    CAR             reduce using rule 45 (stmt -> NONE TYPE .)
    CDR             reduce using rule 45 (stmt -> NONE TYPE .)
    EMPTY_SET       reduce using rule 45 (stmt -> NONE TYPE .)
    MEM             reduce using rule 45 (stmt -> NONE TYPE .)
    UPDATE          reduce using rule 45 (stmt -> NONE TYPE .)
    SOME            reduce using rule 45 (stmt -> NONE TYPE .)
    NONE            reduce using rule 45 (stmt -> NONE TYPE .)
    LEFT            reduce using rule 45 (stmt -> NONE TYPE .)
    RIGHT           reduce using rule 45 (stmt -> NONE TYPE .)
    CONS            reduce using rule 45 (stmt -> NONE TYPE .)
    NIL             reduce using rule 45 (stmt -> NONE TYPE .)
    NOT             reduce using rule 45 (stmt -> NONE TYPE .)
    PUSH            reduce using rule 45 (stmt -> NONE TYPE .)
    FAILWITH        reduce using rule 45 (stmt -> NONE TYPE .)


state 56

    (46) stmt -> LEFT TYPE .

    SCOLON          reduce using rule 46 (stmt -> LEFT TYPE .)
    RBRACKET        reduce using rule 46 (stmt -> LEFT TYPE .)
    DROP            reduce using rule 46 (stmt -> LEFT TYPE .)
    DUP             reduce using rule 46 (stmt -> LEFT TYPE .)
    SWAP            reduce using rule 46 (stmt -> LEFT TYPE .)
    UNIT            reduce using rule 46 (stmt -> LEFT TYPE .)
    EQ              reduce using rule 46 (stmt -> LEFT TYPE .)
    NEQ             reduce using rule 46 (stmt -> LEFT TYPE .)
    LT              reduce using rule 46 (stmt -> LEFT TYPE .)
    GT              reduce using rule 46 (stmt -> LEFT TYPE .)
    LE              reduce using rule 46 (stmt -> LEFT TYPE .)
    GE              reduce using rule 46 (stmt -> LEFT TYPE .)
    OR              reduce using rule 46 (stmt -> LEFT TYPE .)
    AND             reduce using rule 46 (stmt -> LEFT TYPE .)
    XOR             reduce using rule 46 (stmt -> LEFT TYPE .)
    COMPARE         reduce using rule 46 (stmt -> LEFT TYPE .)
    NEG             reduce using rule 46 (stmt -> LEFT TYPE .)
    ABS             reduce using rule 46 (stmt -> LEFT TYPE .)
    ADD             reduce using rule 46 (stmt -> LEFT TYPE .)
    SUB             reduce using rule 46 (stmt -> LEFT TYPE .)
    MUL             reduce using rule 46 (stmt -> LEFT TYPE .)
    EDIV            reduce using rule 46 (stmt -> LEFT TYPE .)
    LSL             reduce using rule 46 (stmt -> LEFT TYPE .)
    LSR             reduce using rule 46 (stmt -> LEFT TYPE .)
    CONCAT          reduce using rule 46 (stmt -> LEFT TYPE .)
    SIZE            reduce using rule 46 (stmt -> LEFT TYPE .)
    SLICE           reduce using rule 46 (stmt -> LEFT TYPE .)
    PAIR            reduce using rule 46 (stmt -> LEFT TYPE .)
    CAR             reduce using rule 46 (stmt -> LEFT TYPE .)
    CDR             reduce using rule 46 (stmt -> LEFT TYPE .)
    EMPTY_SET       reduce using rule 46 (stmt -> LEFT TYPE .)
    MEM             reduce using rule 46 (stmt -> LEFT TYPE .)
    UPDATE          reduce using rule 46 (stmt -> LEFT TYPE .)
    SOME            reduce using rule 46 (stmt -> LEFT TYPE .)
    NONE            reduce using rule 46 (stmt -> LEFT TYPE .)
    LEFT            reduce using rule 46 (stmt -> LEFT TYPE .)
    RIGHT           reduce using rule 46 (stmt -> LEFT TYPE .)
    CONS            reduce using rule 46 (stmt -> LEFT TYPE .)
    NIL             reduce using rule 46 (stmt -> LEFT TYPE .)
    NOT             reduce using rule 46 (stmt -> LEFT TYPE .)
    PUSH            reduce using rule 46 (stmt -> LEFT TYPE .)
    FAILWITH        reduce using rule 46 (stmt -> LEFT TYPE .)


state 57

    (47) stmt -> RIGHT TYPE .

    SCOLON          reduce using rule 47 (stmt -> RIGHT TYPE .)
    RBRACKET        reduce using rule 47 (stmt -> RIGHT TYPE .)
    DROP            reduce using rule 47 (stmt -> RIGHT TYPE .)
    DUP             reduce using rule 47 (stmt -> RIGHT TYPE .)
    SWAP            reduce using rule 47 (stmt -> RIGHT TYPE .)
    UNIT            reduce using rule 47 (stmt -> RIGHT TYPE .)
    EQ              reduce using rule 47 (stmt -> RIGHT TYPE .)
    NEQ             reduce using rule 47 (stmt -> RIGHT TYPE .)
    LT              reduce using rule 47 (stmt -> RIGHT TYPE .)
    GT              reduce using rule 47 (stmt -> RIGHT TYPE .)
    LE              reduce using rule 47 (stmt -> RIGHT TYPE .)
    GE              reduce using rule 47 (stmt -> RIGHT TYPE .)
    OR              reduce using rule 47 (stmt -> RIGHT TYPE .)
    AND             reduce using rule 47 (stmt -> RIGHT TYPE .)
    XOR             reduce using rule 47 (stmt -> RIGHT TYPE .)
    COMPARE         reduce using rule 47 (stmt -> RIGHT TYPE .)
    NEG             reduce using rule 47 (stmt -> RIGHT TYPE .)
    ABS             reduce using rule 47 (stmt -> RIGHT TYPE .)
    ADD             reduce using rule 47 (stmt -> RIGHT TYPE .)
    SUB             reduce using rule 47 (stmt -> RIGHT TYPE .)
    MUL             reduce using rule 47 (stmt -> RIGHT TYPE .)
    EDIV            reduce using rule 47 (stmt -> RIGHT TYPE .)
    LSL             reduce using rule 47 (stmt -> RIGHT TYPE .)
    LSR             reduce using rule 47 (stmt -> RIGHT TYPE .)
    CONCAT          reduce using rule 47 (stmt -> RIGHT TYPE .)
    SIZE            reduce using rule 47 (stmt -> RIGHT TYPE .)
    SLICE           reduce using rule 47 (stmt -> RIGHT TYPE .)
    PAIR            reduce using rule 47 (stmt -> RIGHT TYPE .)
    CAR             reduce using rule 47 (stmt -> RIGHT TYPE .)
    CDR             reduce using rule 47 (stmt -> RIGHT TYPE .)
    EMPTY_SET       reduce using rule 47 (stmt -> RIGHT TYPE .)
    MEM             reduce using rule 47 (stmt -> RIGHT TYPE .)
    UPDATE          reduce using rule 47 (stmt -> RIGHT TYPE .)
    SOME            reduce using rule 47 (stmt -> RIGHT TYPE .)
    NONE            reduce using rule 47 (stmt -> RIGHT TYPE .)
    LEFT            reduce using rule 47 (stmt -> RIGHT TYPE .)
    RIGHT           reduce using rule 47 (stmt -> RIGHT TYPE .)
    CONS            reduce using rule 47 (stmt -> RIGHT TYPE .)
    NIL             reduce using rule 47 (stmt -> RIGHT TYPE .)
    NOT             reduce using rule 47 (stmt -> RIGHT TYPE .)
    PUSH            reduce using rule 47 (stmt -> RIGHT TYPE .)
    FAILWITH        reduce using rule 47 (stmt -> RIGHT TYPE .)


state 58

    (49) stmt -> NIL TYPE .

    SCOLON          reduce using rule 49 (stmt -> NIL TYPE .)
    RBRACKET        reduce using rule 49 (stmt -> NIL TYPE .)
    DROP            reduce using rule 49 (stmt -> NIL TYPE .)
    DUP             reduce using rule 49 (stmt -> NIL TYPE .)
    SWAP            reduce using rule 49 (stmt -> NIL TYPE .)
    UNIT            reduce using rule 49 (stmt -> NIL TYPE .)
    EQ              reduce using rule 49 (stmt -> NIL TYPE .)
    NEQ             reduce using rule 49 (stmt -> NIL TYPE .)
    LT              reduce using rule 49 (stmt -> NIL TYPE .)
    GT              reduce using rule 49 (stmt -> NIL TYPE .)
    LE              reduce using rule 49 (stmt -> NIL TYPE .)
    GE              reduce using rule 49 (stmt -> NIL TYPE .)
    OR              reduce using rule 49 (stmt -> NIL TYPE .)
    AND             reduce using rule 49 (stmt -> NIL TYPE .)
    XOR             reduce using rule 49 (stmt -> NIL TYPE .)
    COMPARE         reduce using rule 49 (stmt -> NIL TYPE .)
    NEG             reduce using rule 49 (stmt -> NIL TYPE .)
    ABS             reduce using rule 49 (stmt -> NIL TYPE .)
    ADD             reduce using rule 49 (stmt -> NIL TYPE .)
    SUB             reduce using rule 49 (stmt -> NIL TYPE .)
    MUL             reduce using rule 49 (stmt -> NIL TYPE .)
    EDIV            reduce using rule 49 (stmt -> NIL TYPE .)
    LSL             reduce using rule 49 (stmt -> NIL TYPE .)
    LSR             reduce using rule 49 (stmt -> NIL TYPE .)
    CONCAT          reduce using rule 49 (stmt -> NIL TYPE .)
    SIZE            reduce using rule 49 (stmt -> NIL TYPE .)
    SLICE           reduce using rule 49 (stmt -> NIL TYPE .)
    PAIR            reduce using rule 49 (stmt -> NIL TYPE .)
    CAR             reduce using rule 49 (stmt -> NIL TYPE .)
    CDR             reduce using rule 49 (stmt -> NIL TYPE .)
    EMPTY_SET       reduce using rule 49 (stmt -> NIL TYPE .)
    MEM             reduce using rule 49 (stmt -> NIL TYPE .)
    UPDATE          reduce using rule 49 (stmt -> NIL TYPE .)
    SOME            reduce using rule 49 (stmt -> NIL TYPE .)
    NONE            reduce using rule 49 (stmt -> NIL TYPE .)
    LEFT            reduce using rule 49 (stmt -> NIL TYPE .)
    RIGHT           reduce using rule 49 (stmt -> NIL TYPE .)
    CONS            reduce using rule 49 (stmt -> NIL TYPE .)
    NIL             reduce using rule 49 (stmt -> NIL TYPE .)
    NOT             reduce using rule 49 (stmt -> NIL TYPE .)
    PUSH            reduce using rule 49 (stmt -> NIL TYPE .)
    FAILWITH        reduce using rule 49 (stmt -> NIL TYPE .)


state 59

    (57) stmt -> PUSH TYPE . value
    (13) value -> . NUMBER
    (14) value -> . bool
    (15) value -> . TEXT
    (16) value -> . LPARENS PAIR_CONSTRUCTOR value value RPARENS
    (11) bool -> . TRUE
    (12) bool -> . FALSE

    NUMBER          shift and go to state 63
    TEXT            shift and go to state 65
    LPARENS         shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    value                          shift and go to state 62
    bool                           shift and go to state 64

state 60

    (5) compound_statement -> compound_statement stmt SCOLON .

    RBRACKET        reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    DROP            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    DUP             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    SWAP            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    UNIT            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    EQ              reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    NEQ             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    LT              reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    GT              reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    LE              reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    GE              reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    OR              reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    AND             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    XOR             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    COMPARE         reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    NEG             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    ABS             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    ADD             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    SUB             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    MUL             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    EDIV            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    LSL             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    LSR             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    CONCAT          reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    SIZE            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    SLICE           reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    PAIR            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    CAR             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    CDR             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    EMPTY_SET       reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    MEM             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    UPDATE          reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    SOME            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    NONE            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    LEFT            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    RIGHT           reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    CONS            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    NIL             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    NOT             reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    PUSH            reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)
    FAILWITH        reduce using rule 5 (compound_statement -> compound_statement stmt SCOLON .)


state 61

    (56) TYPE -> LPARENS LPAIR . TYPE TYPE RPARENS
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 69

state 62

    (57) stmt -> PUSH TYPE value .

    SCOLON          reduce using rule 57 (stmt -> PUSH TYPE value .)
    RBRACKET        reduce using rule 57 (stmt -> PUSH TYPE value .)
    DROP            reduce using rule 57 (stmt -> PUSH TYPE value .)
    DUP             reduce using rule 57 (stmt -> PUSH TYPE value .)
    SWAP            reduce using rule 57 (stmt -> PUSH TYPE value .)
    UNIT            reduce using rule 57 (stmt -> PUSH TYPE value .)
    EQ              reduce using rule 57 (stmt -> PUSH TYPE value .)
    NEQ             reduce using rule 57 (stmt -> PUSH TYPE value .)
    LT              reduce using rule 57 (stmt -> PUSH TYPE value .)
    GT              reduce using rule 57 (stmt -> PUSH TYPE value .)
    LE              reduce using rule 57 (stmt -> PUSH TYPE value .)
    GE              reduce using rule 57 (stmt -> PUSH TYPE value .)
    OR              reduce using rule 57 (stmt -> PUSH TYPE value .)
    AND             reduce using rule 57 (stmt -> PUSH TYPE value .)
    XOR             reduce using rule 57 (stmt -> PUSH TYPE value .)
    COMPARE         reduce using rule 57 (stmt -> PUSH TYPE value .)
    NEG             reduce using rule 57 (stmt -> PUSH TYPE value .)
    ABS             reduce using rule 57 (stmt -> PUSH TYPE value .)
    ADD             reduce using rule 57 (stmt -> PUSH TYPE value .)
    SUB             reduce using rule 57 (stmt -> PUSH TYPE value .)
    MUL             reduce using rule 57 (stmt -> PUSH TYPE value .)
    EDIV            reduce using rule 57 (stmt -> PUSH TYPE value .)
    LSL             reduce using rule 57 (stmt -> PUSH TYPE value .)
    LSR             reduce using rule 57 (stmt -> PUSH TYPE value .)
    CONCAT          reduce using rule 57 (stmt -> PUSH TYPE value .)
    SIZE            reduce using rule 57 (stmt -> PUSH TYPE value .)
    SLICE           reduce using rule 57 (stmt -> PUSH TYPE value .)
    PAIR            reduce using rule 57 (stmt -> PUSH TYPE value .)
    CAR             reduce using rule 57 (stmt -> PUSH TYPE value .)
    CDR             reduce using rule 57 (stmt -> PUSH TYPE value .)
    EMPTY_SET       reduce using rule 57 (stmt -> PUSH TYPE value .)
    MEM             reduce using rule 57 (stmt -> PUSH TYPE value .)
    UPDATE          reduce using rule 57 (stmt -> PUSH TYPE value .)
    SOME            reduce using rule 57 (stmt -> PUSH TYPE value .)
    NONE            reduce using rule 57 (stmt -> PUSH TYPE value .)
    LEFT            reduce using rule 57 (stmt -> PUSH TYPE value .)
    RIGHT           reduce using rule 57 (stmt -> PUSH TYPE value .)
    CONS            reduce using rule 57 (stmt -> PUSH TYPE value .)
    NIL             reduce using rule 57 (stmt -> PUSH TYPE value .)
    NOT             reduce using rule 57 (stmt -> PUSH TYPE value .)
    PUSH            reduce using rule 57 (stmt -> PUSH TYPE value .)
    FAILWITH        reduce using rule 57 (stmt -> PUSH TYPE value .)


state 63

    (13) value -> NUMBER .

    SCOLON          reduce using rule 13 (value -> NUMBER .)
    RBRACKET        reduce using rule 13 (value -> NUMBER .)
    DROP            reduce using rule 13 (value -> NUMBER .)
    DUP             reduce using rule 13 (value -> NUMBER .)
    SWAP            reduce using rule 13 (value -> NUMBER .)
    UNIT            reduce using rule 13 (value -> NUMBER .)
    EQ              reduce using rule 13 (value -> NUMBER .)
    NEQ             reduce using rule 13 (value -> NUMBER .)
    LT              reduce using rule 13 (value -> NUMBER .)
    GT              reduce using rule 13 (value -> NUMBER .)
    LE              reduce using rule 13 (value -> NUMBER .)
    GE              reduce using rule 13 (value -> NUMBER .)
    OR              reduce using rule 13 (value -> NUMBER .)
    AND             reduce using rule 13 (value -> NUMBER .)
    XOR             reduce using rule 13 (value -> NUMBER .)
    COMPARE         reduce using rule 13 (value -> NUMBER .)
    NEG             reduce using rule 13 (value -> NUMBER .)
    ABS             reduce using rule 13 (value -> NUMBER .)
    ADD             reduce using rule 13 (value -> NUMBER .)
    SUB             reduce using rule 13 (value -> NUMBER .)
    MUL             reduce using rule 13 (value -> NUMBER .)
    EDIV            reduce using rule 13 (value -> NUMBER .)
    LSL             reduce using rule 13 (value -> NUMBER .)
    LSR             reduce using rule 13 (value -> NUMBER .)
    CONCAT          reduce using rule 13 (value -> NUMBER .)
    SIZE            reduce using rule 13 (value -> NUMBER .)
    SLICE           reduce using rule 13 (value -> NUMBER .)
    PAIR            reduce using rule 13 (value -> NUMBER .)
    CAR             reduce using rule 13 (value -> NUMBER .)
    CDR             reduce using rule 13 (value -> NUMBER .)
    EMPTY_SET       reduce using rule 13 (value -> NUMBER .)
    MEM             reduce using rule 13 (value -> NUMBER .)
    UPDATE          reduce using rule 13 (value -> NUMBER .)
    SOME            reduce using rule 13 (value -> NUMBER .)
    NONE            reduce using rule 13 (value -> NUMBER .)
    LEFT            reduce using rule 13 (value -> NUMBER .)
    RIGHT           reduce using rule 13 (value -> NUMBER .)
    CONS            reduce using rule 13 (value -> NUMBER .)
    NIL             reduce using rule 13 (value -> NUMBER .)
    NOT             reduce using rule 13 (value -> NUMBER .)
    PUSH            reduce using rule 13 (value -> NUMBER .)
    FAILWITH        reduce using rule 13 (value -> NUMBER .)
    NUMBER          reduce using rule 13 (value -> NUMBER .)
    TEXT            reduce using rule 13 (value -> NUMBER .)
    LPARENS         reduce using rule 13 (value -> NUMBER .)
    TRUE            reduce using rule 13 (value -> NUMBER .)
    FALSE           reduce using rule 13 (value -> NUMBER .)
    RPARENS         reduce using rule 13 (value -> NUMBER .)


state 64

    (14) value -> bool .

    SCOLON          reduce using rule 14 (value -> bool .)
    RBRACKET        reduce using rule 14 (value -> bool .)
    DROP            reduce using rule 14 (value -> bool .)
    DUP             reduce using rule 14 (value -> bool .)
    SWAP            reduce using rule 14 (value -> bool .)
    UNIT            reduce using rule 14 (value -> bool .)
    EQ              reduce using rule 14 (value -> bool .)
    NEQ             reduce using rule 14 (value -> bool .)
    LT              reduce using rule 14 (value -> bool .)
    GT              reduce using rule 14 (value -> bool .)
    LE              reduce using rule 14 (value -> bool .)
    GE              reduce using rule 14 (value -> bool .)
    OR              reduce using rule 14 (value -> bool .)
    AND             reduce using rule 14 (value -> bool .)
    XOR             reduce using rule 14 (value -> bool .)
    COMPARE         reduce using rule 14 (value -> bool .)
    NEG             reduce using rule 14 (value -> bool .)
    ABS             reduce using rule 14 (value -> bool .)
    ADD             reduce using rule 14 (value -> bool .)
    SUB             reduce using rule 14 (value -> bool .)
    MUL             reduce using rule 14 (value -> bool .)
    EDIV            reduce using rule 14 (value -> bool .)
    LSL             reduce using rule 14 (value -> bool .)
    LSR             reduce using rule 14 (value -> bool .)
    CONCAT          reduce using rule 14 (value -> bool .)
    SIZE            reduce using rule 14 (value -> bool .)
    SLICE           reduce using rule 14 (value -> bool .)
    PAIR            reduce using rule 14 (value -> bool .)
    CAR             reduce using rule 14 (value -> bool .)
    CDR             reduce using rule 14 (value -> bool .)
    EMPTY_SET       reduce using rule 14 (value -> bool .)
    MEM             reduce using rule 14 (value -> bool .)
    UPDATE          reduce using rule 14 (value -> bool .)
    SOME            reduce using rule 14 (value -> bool .)
    NONE            reduce using rule 14 (value -> bool .)
    LEFT            reduce using rule 14 (value -> bool .)
    RIGHT           reduce using rule 14 (value -> bool .)
    CONS            reduce using rule 14 (value -> bool .)
    NIL             reduce using rule 14 (value -> bool .)
    NOT             reduce using rule 14 (value -> bool .)
    PUSH            reduce using rule 14 (value -> bool .)
    FAILWITH        reduce using rule 14 (value -> bool .)
    NUMBER          reduce using rule 14 (value -> bool .)
    TEXT            reduce using rule 14 (value -> bool .)
    LPARENS         reduce using rule 14 (value -> bool .)
    TRUE            reduce using rule 14 (value -> bool .)
    FALSE           reduce using rule 14 (value -> bool .)
    RPARENS         reduce using rule 14 (value -> bool .)


state 65

    (15) value -> TEXT .

    SCOLON          reduce using rule 15 (value -> TEXT .)
    RBRACKET        reduce using rule 15 (value -> TEXT .)
    DROP            reduce using rule 15 (value -> TEXT .)
    DUP             reduce using rule 15 (value -> TEXT .)
    SWAP            reduce using rule 15 (value -> TEXT .)
    UNIT            reduce using rule 15 (value -> TEXT .)
    EQ              reduce using rule 15 (value -> TEXT .)
    NEQ             reduce using rule 15 (value -> TEXT .)
    LT              reduce using rule 15 (value -> TEXT .)
    GT              reduce using rule 15 (value -> TEXT .)
    LE              reduce using rule 15 (value -> TEXT .)
    GE              reduce using rule 15 (value -> TEXT .)
    OR              reduce using rule 15 (value -> TEXT .)
    AND             reduce using rule 15 (value -> TEXT .)
    XOR             reduce using rule 15 (value -> TEXT .)
    COMPARE         reduce using rule 15 (value -> TEXT .)
    NEG             reduce using rule 15 (value -> TEXT .)
    ABS             reduce using rule 15 (value -> TEXT .)
    ADD             reduce using rule 15 (value -> TEXT .)
    SUB             reduce using rule 15 (value -> TEXT .)
    MUL             reduce using rule 15 (value -> TEXT .)
    EDIV            reduce using rule 15 (value -> TEXT .)
    LSL             reduce using rule 15 (value -> TEXT .)
    LSR             reduce using rule 15 (value -> TEXT .)
    CONCAT          reduce using rule 15 (value -> TEXT .)
    SIZE            reduce using rule 15 (value -> TEXT .)
    SLICE           reduce using rule 15 (value -> TEXT .)
    PAIR            reduce using rule 15 (value -> TEXT .)
    CAR             reduce using rule 15 (value -> TEXT .)
    CDR             reduce using rule 15 (value -> TEXT .)
    EMPTY_SET       reduce using rule 15 (value -> TEXT .)
    MEM             reduce using rule 15 (value -> TEXT .)
    UPDATE          reduce using rule 15 (value -> TEXT .)
    SOME            reduce using rule 15 (value -> TEXT .)
    NONE            reduce using rule 15 (value -> TEXT .)
    LEFT            reduce using rule 15 (value -> TEXT .)
    RIGHT           reduce using rule 15 (value -> TEXT .)
    CONS            reduce using rule 15 (value -> TEXT .)
    NIL             reduce using rule 15 (value -> TEXT .)
    NOT             reduce using rule 15 (value -> TEXT .)
    PUSH            reduce using rule 15 (value -> TEXT .)
    FAILWITH        reduce using rule 15 (value -> TEXT .)
    NUMBER          reduce using rule 15 (value -> TEXT .)
    TEXT            reduce using rule 15 (value -> TEXT .)
    LPARENS         reduce using rule 15 (value -> TEXT .)
    TRUE            reduce using rule 15 (value -> TEXT .)
    FALSE           reduce using rule 15 (value -> TEXT .)
    RPARENS         reduce using rule 15 (value -> TEXT .)


state 66

    (16) value -> LPARENS . PAIR_CONSTRUCTOR value value RPARENS

    PAIR_CONSTRUCTOR shift and go to state 70


state 67

    (11) bool -> TRUE .

    SCOLON          reduce using rule 11 (bool -> TRUE .)
    RBRACKET        reduce using rule 11 (bool -> TRUE .)
    DROP            reduce using rule 11 (bool -> TRUE .)
    DUP             reduce using rule 11 (bool -> TRUE .)
    SWAP            reduce using rule 11 (bool -> TRUE .)
    UNIT            reduce using rule 11 (bool -> TRUE .)
    EQ              reduce using rule 11 (bool -> TRUE .)
    NEQ             reduce using rule 11 (bool -> TRUE .)
    LT              reduce using rule 11 (bool -> TRUE .)
    GT              reduce using rule 11 (bool -> TRUE .)
    LE              reduce using rule 11 (bool -> TRUE .)
    GE              reduce using rule 11 (bool -> TRUE .)
    OR              reduce using rule 11 (bool -> TRUE .)
    AND             reduce using rule 11 (bool -> TRUE .)
    XOR             reduce using rule 11 (bool -> TRUE .)
    COMPARE         reduce using rule 11 (bool -> TRUE .)
    NEG             reduce using rule 11 (bool -> TRUE .)
    ABS             reduce using rule 11 (bool -> TRUE .)
    ADD             reduce using rule 11 (bool -> TRUE .)
    SUB             reduce using rule 11 (bool -> TRUE .)
    MUL             reduce using rule 11 (bool -> TRUE .)
    EDIV            reduce using rule 11 (bool -> TRUE .)
    LSL             reduce using rule 11 (bool -> TRUE .)
    LSR             reduce using rule 11 (bool -> TRUE .)
    CONCAT          reduce using rule 11 (bool -> TRUE .)
    SIZE            reduce using rule 11 (bool -> TRUE .)
    SLICE           reduce using rule 11 (bool -> TRUE .)
    PAIR            reduce using rule 11 (bool -> TRUE .)
    CAR             reduce using rule 11 (bool -> TRUE .)
    CDR             reduce using rule 11 (bool -> TRUE .)
    EMPTY_SET       reduce using rule 11 (bool -> TRUE .)
    MEM             reduce using rule 11 (bool -> TRUE .)
    UPDATE          reduce using rule 11 (bool -> TRUE .)
    SOME            reduce using rule 11 (bool -> TRUE .)
    NONE            reduce using rule 11 (bool -> TRUE .)
    LEFT            reduce using rule 11 (bool -> TRUE .)
    RIGHT           reduce using rule 11 (bool -> TRUE .)
    CONS            reduce using rule 11 (bool -> TRUE .)
    NIL             reduce using rule 11 (bool -> TRUE .)
    NOT             reduce using rule 11 (bool -> TRUE .)
    PUSH            reduce using rule 11 (bool -> TRUE .)
    FAILWITH        reduce using rule 11 (bool -> TRUE .)
    NUMBER          reduce using rule 11 (bool -> TRUE .)
    TEXT            reduce using rule 11 (bool -> TRUE .)
    LPARENS         reduce using rule 11 (bool -> TRUE .)
    TRUE            reduce using rule 11 (bool -> TRUE .)
    FALSE           reduce using rule 11 (bool -> TRUE .)
    RPARENS         reduce using rule 11 (bool -> TRUE .)


state 68

    (12) bool -> FALSE .

    SCOLON          reduce using rule 12 (bool -> FALSE .)
    RBRACKET        reduce using rule 12 (bool -> FALSE .)
    DROP            reduce using rule 12 (bool -> FALSE .)
    DUP             reduce using rule 12 (bool -> FALSE .)
    SWAP            reduce using rule 12 (bool -> FALSE .)
    UNIT            reduce using rule 12 (bool -> FALSE .)
    EQ              reduce using rule 12 (bool -> FALSE .)
    NEQ             reduce using rule 12 (bool -> FALSE .)
    LT              reduce using rule 12 (bool -> FALSE .)
    GT              reduce using rule 12 (bool -> FALSE .)
    LE              reduce using rule 12 (bool -> FALSE .)
    GE              reduce using rule 12 (bool -> FALSE .)
    OR              reduce using rule 12 (bool -> FALSE .)
    AND             reduce using rule 12 (bool -> FALSE .)
    XOR             reduce using rule 12 (bool -> FALSE .)
    COMPARE         reduce using rule 12 (bool -> FALSE .)
    NEG             reduce using rule 12 (bool -> FALSE .)
    ABS             reduce using rule 12 (bool -> FALSE .)
    ADD             reduce using rule 12 (bool -> FALSE .)
    SUB             reduce using rule 12 (bool -> FALSE .)
    MUL             reduce using rule 12 (bool -> FALSE .)
    EDIV            reduce using rule 12 (bool -> FALSE .)
    LSL             reduce using rule 12 (bool -> FALSE .)
    LSR             reduce using rule 12 (bool -> FALSE .)
    CONCAT          reduce using rule 12 (bool -> FALSE .)
    SIZE            reduce using rule 12 (bool -> FALSE .)
    SLICE           reduce using rule 12 (bool -> FALSE .)
    PAIR            reduce using rule 12 (bool -> FALSE .)
    CAR             reduce using rule 12 (bool -> FALSE .)
    CDR             reduce using rule 12 (bool -> FALSE .)
    EMPTY_SET       reduce using rule 12 (bool -> FALSE .)
    MEM             reduce using rule 12 (bool -> FALSE .)
    UPDATE          reduce using rule 12 (bool -> FALSE .)
    SOME            reduce using rule 12 (bool -> FALSE .)
    NONE            reduce using rule 12 (bool -> FALSE .)
    LEFT            reduce using rule 12 (bool -> FALSE .)
    RIGHT           reduce using rule 12 (bool -> FALSE .)
    CONS            reduce using rule 12 (bool -> FALSE .)
    NIL             reduce using rule 12 (bool -> FALSE .)
    NOT             reduce using rule 12 (bool -> FALSE .)
    PUSH            reduce using rule 12 (bool -> FALSE .)
    FAILWITH        reduce using rule 12 (bool -> FALSE .)
    NUMBER          reduce using rule 12 (bool -> FALSE .)
    TEXT            reduce using rule 12 (bool -> FALSE .)
    LPARENS         reduce using rule 12 (bool -> FALSE .)
    TRUE            reduce using rule 12 (bool -> FALSE .)
    FALSE           reduce using rule 12 (bool -> FALSE .)
    RPARENS         reduce using rule 12 (bool -> FALSE .)


state 69

    (56) TYPE -> LPARENS LPAIR TYPE . TYPE RPARENS
    (51) TYPE -> . NAT
    (52) TYPE -> . STRING
    (53) TYPE -> . INT
    (54) TYPE -> . BOOL
    (55) TYPE -> . BYTES
    (56) TYPE -> . LPARENS LPAIR TYPE TYPE RPARENS

    NAT             shift and go to state 49
    STRING          shift and go to state 50
    INT             shift and go to state 51
    BOOL            shift and go to state 52
    BYTES           shift and go to state 53
    LPARENS         shift and go to state 54

    TYPE                           shift and go to state 71

state 70

    (16) value -> LPARENS PAIR_CONSTRUCTOR . value value RPARENS
    (13) value -> . NUMBER
    (14) value -> . bool
    (15) value -> . TEXT
    (16) value -> . LPARENS PAIR_CONSTRUCTOR value value RPARENS
    (11) bool -> . TRUE
    (12) bool -> . FALSE

    NUMBER          shift and go to state 63
    TEXT            shift and go to state 65
    LPARENS         shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    value                          shift and go to state 72
    bool                           shift and go to state 64

state 71

    (56) TYPE -> LPARENS LPAIR TYPE TYPE . RPARENS

    RPARENS         shift and go to state 73


state 72

    (16) value -> LPARENS PAIR_CONSTRUCTOR value . value RPARENS
    (13) value -> . NUMBER
    (14) value -> . bool
    (15) value -> . TEXT
    (16) value -> . LPARENS PAIR_CONSTRUCTOR value value RPARENS
    (11) bool -> . TRUE
    (12) bool -> . FALSE

    NUMBER          shift and go to state 63
    TEXT            shift and go to state 65
    LPARENS         shift and go to state 66
    TRUE            shift and go to state 67
    FALSE           shift and go to state 68

    value                          shift and go to state 74
    bool                           shift and go to state 64

state 73

    (56) TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .

    SCOLON          reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    RBRACKET        reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    DROP            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    DUP             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    SWAP            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    UNIT            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    EQ              reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NEQ             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    LT              reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    GT              reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    LE              reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    GE              reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    OR              reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    AND             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    XOR             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    COMPARE         reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NEG             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    ABS             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    ADD             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    SUB             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    MUL             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    EDIV            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    LSL             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    LSR             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    CONCAT          reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    SIZE            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    SLICE           reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    PAIR            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    CAR             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    CDR             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    EMPTY_SET       reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    MEM             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    UPDATE          reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    SOME            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NONE            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    LEFT            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    RIGHT           reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    CONS            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NIL             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NOT             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    PUSH            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    FAILWITH        reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NUMBER          reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    TEXT            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    LPARENS         reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    TRUE            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    FALSE           reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    NAT             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    STRING          reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    INT             reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    BOOL            reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    BYTES           reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)
    RPARENS         reduce using rule 56 (TYPE -> LPARENS LPAIR TYPE TYPE RPARENS .)


state 74

    (16) value -> LPARENS PAIR_CONSTRUCTOR value value . RPARENS

    RPARENS         shift and go to state 75


state 75

    (16) value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .

    SCOLON          reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    RBRACKET        reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    DROP            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    DUP             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    SWAP            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    UNIT            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    EQ              reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    NEQ             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    LT              reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    GT              reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    LE              reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    GE              reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    OR              reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    AND             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    XOR             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    COMPARE         reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    NEG             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    ABS             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    ADD             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    SUB             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    MUL             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    EDIV            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    LSL             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    LSR             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    CONCAT          reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    SIZE            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    SLICE           reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    PAIR            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    CAR             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    CDR             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    EMPTY_SET       reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    MEM             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    UPDATE          reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    SOME            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    NONE            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    LEFT            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    RIGHT           reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    CONS            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    NIL             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    NOT             reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    PUSH            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    FAILWITH        reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    NUMBER          reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    TEXT            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    LPARENS         reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    TRUE            reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    FALSE           reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)
    RPARENS         reduce using rule 16 (value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS .)

