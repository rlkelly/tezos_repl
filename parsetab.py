
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD ADDRESS AND BLAKE2B BOOL BYTES CAR CDR CHECK_SIGNATURE CODE COMPARE CONCAT CONS CONTRACT DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAIL FAILWITH FALSE GE GET GT HASH_KEY IF_CONS INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL MUTEZ NAT NEG NEQ NIL NONE NOT NOW NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PARAMETER PRINTER PUSH RBRACKET RIGHT RPARENS SCOLON SHA256 SHA512 SIZE SLICE SOME STEPS_TO_QUOTA STORAGE STRING SUB SWAP TEXT TIMESTAMP TRUE UNIT UPDATE XORcontract_run : contract_decl code_decl\n        |  executioncontract_decl : PARAMETER type SCOLON STORAGE type SCOLONcode_decl : CODE bodyexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECstmt : STEPS_TO_QUOTA\n            | NOW stmt : CONTRACT typestmt : HASH_KEY\n            | BLAKE2B\n            | SHA256\n            | SHA512\n            | CHECK_SIGNATUREtype : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | ADDRESS\n        | TIMESTAMP\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : FAILWITH\n            | FAILstmt : PRINTER'
    
_lr_action_items = {'PARAMETER':([0,],[4,]),'LBRACKET':([0,42,43,45,62,68,70,71,72,73,74,75,76,77,81,87,100,101,113,120,],[8,8,8,8,8,8,-72,-73,-74,-75,-76,-77,-78,-79,-12,8,-11,8,-10,-80,]),'LAMBDA':([0,8,79,99,],[9,9,9,9,]),'DROP':([0,8,79,99,],[10,10,10,10,]),'DUP':([0,8,79,99,],[11,11,11,11,]),'SWAP':([0,8,79,99,],[12,12,12,12,]),'UNIT':([0,8,79,99,],[13,13,13,13,]),'EQ':([0,8,79,99,],[14,14,14,14,]),'NEQ':([0,8,79,99,],[15,15,15,15,]),'LT':([0,8,79,99,],[16,16,16,16,]),'GT':([0,8,79,99,],[17,17,17,17,]),'LE':([0,8,79,99,],[18,18,18,18,]),'GE':([0,8,79,99,],[19,19,19,19,]),'OR':([0,8,79,99,],[20,20,20,20,]),'AND':([0,8,79,99,],[21,21,21,21,]),'XOR':([0,8,79,99,],[22,22,22,22,]),'COMPARE':([0,8,79,99,],[23,23,23,23,]),'NEG':([0,8,79,99,],[24,24,24,24,]),'ABS':([0,8,79,99,],[25,25,25,25,]),'ADD':([0,8,79,99,],[26,26,26,26,]),'SUB':([0,8,79,99,],[27,27,27,27,]),'MUL':([0,8,79,99,],[28,28,28,28,]),'EDIV':([0,8,79,99,],[29,29,29,29,]),'LSL':([0,8,79,99,],[30,30,30,30,]),'LSR':([0,8,79,99,],[31,31,31,31,]),'SIZE':([0,8,79,99,],[32,32,32,32,]),'CONCAT':([0,8,79,99,],[33,33,33,33,]),'SLICE':([0,8,79,99,],[34,34,34,34,]),'PAIR':([0,8,79,99,],[35,35,35,35,]),'CAR':([0,8,79,99,],[36,36,36,36,]),'CDR':([0,8,79,99,],[37,37,37,37,]),'EMPTY_SET':([0,8,79,99,],[38,38,38,38,]),'MEM':([0,8,79,99,],[39,39,39,39,]),'UPDATE':([0,8,79,99,],[40,40,40,40,]),'EMPTY_MAP':([0,8,79,99,],[41,41,41,41,]),'MAP':([0,8,79,99,],[42,42,42,42,]),'ITER':([0,8,79,99,],[43,43,43,43,]),'GET':([0,8,79,99,],[44,44,44,44,]),'IF_CONS':([0,8,79,99,],[45,45,45,45,]),'SOME':([0,8,79,99,],[46,46,46,46,]),'NONE':([0,8,79,99,],[47,47,47,47,]),'LEFT':([0,8,79,99,],[48,48,48,48,]),'RIGHT':([0,8,79,99,],[49,49,49,49,]),'CONS':([0,8,79,99,],[50,50,50,50,]),'NIL':([0,8,79,99,],[51,51,51,51,]),'NOT':([0,8,79,99,],[52,52,52,52,]),'EXEC':([0,8,79,99,],[53,53,53,53,]),'STEPS_TO_QUOTA':([0,8,79,99,],[54,54,54,54,]),'NOW':([0,8,79,99,],[55,55,55,55,]),'CONTRACT':([0,8,79,99,],[56,56,56,56,]),'HASH_KEY':([0,8,79,99,],[57,57,57,57,]),'BLAKE2B':([0,8,79,99,],[58,58,58,58,]),'SHA256':([0,8,79,99,],[59,59,59,59,]),'SHA512':([0,8,79,99,],[60,60,60,60,]),'CHECK_SIGNATURE':([0,8,79,99,],[61,61,61,61,]),'DIP':([0,8,79,99,],[62,62,62,62,]),'PUSH':([0,8,79,99,],[63,63,63,63,]),'FAILWITH':([0,8,79,99,],[64,64,64,64,]),'FAIL':([0,8,79,99,],[65,65,65,65,]),'PRINTER':([0,8,79,99,],[66,66,66,66,]),'$end':([1,3,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,44,46,50,52,53,54,55,57,58,59,60,61,64,65,66,67,70,71,72,73,74,75,76,77,79,81,83,85,86,88,89,90,91,92,93,95,98,100,102,103,104,105,106,107,109,110,113,114,120,122,],[0,-2,-5,-7,-8,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-54,-56,-60,-62,-63,-64,-65,-67,-68,-69,-70,-71,-83,-84,-85,-1,-72,-73,-74,-75,-76,-77,-78,-79,-6,-12,-48,-52,-53,-57,-58,-59,-61,-66,-81,-4,-9,-11,-51,-55,-82,-20,-21,-22,-18,-19,-10,-13,-80,-23,]),'CODE':([2,119,],[68,-3,]),'NAT':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[70,70,70,70,70,70,70,70,70,70,-72,-73,-74,-75,-76,-77,-78,-79,70,70,70,70,70,-80,]),'STRING':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[71,71,71,71,71,71,71,71,71,71,-72,-73,-74,-75,-76,-77,-78,-79,71,71,71,71,71,-80,]),'INT':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[72,72,72,72,72,72,72,72,72,72,-72,-73,-74,-75,-76,-77,-78,-79,72,72,72,72,72,-80,]),'BOOL':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[73,73,73,73,73,73,73,73,73,73,-72,-73,-74,-75,-76,-77,-78,-79,73,73,73,73,73,-80,]),'BYTES':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[74,74,74,74,74,74,74,74,74,74,-72,-73,-74,-75,-76,-77,-78,-79,74,74,74,74,74,-80,]),'OPERATION':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[75,75,75,75,75,75,75,75,75,75,-72,-73,-74,-75,-76,-77,-78,-79,75,75,75,75,75,-80,]),'ADDRESS':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[76,76,76,76,76,76,76,76,76,76,-72,-73,-74,-75,-76,-77,-78,-79,76,76,76,76,76,-80,]),'TIMESTAMP':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,97,111,112,120,],[77,77,77,77,77,77,77,77,77,77,-72,-73,-74,-75,-76,-77,-78,-79,77,77,77,77,77,-80,]),'LPARENS':([4,9,38,41,47,48,49,51,56,63,70,71,72,73,74,75,76,77,82,84,94,97,105,106,107,109,110,111,112,115,118,120,122,],[78,78,78,78,78,78,78,78,78,78,-72,-73,-74,-75,-76,-77,-78,-79,78,78,108,78,-20,-21,-22,-18,-19,78,78,108,108,-80,-23,]),'SCOLON':([5,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,44,46,50,52,53,54,55,57,58,59,60,61,64,65,66,69,70,71,72,73,74,75,76,77,80,81,83,85,86,88,89,90,91,92,93,98,100,102,103,104,105,106,107,109,110,113,114,116,120,122,],[79,-8,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-54,-56,-60,-62,-63,-64,-65,-67,-68,-69,-70,-71,-83,-84,-85,96,-72,-73,-74,-75,-76,-77,-78,-79,99,-12,-48,-52,-53,-57,-58,-59,-61,-66,-81,-9,-11,-51,-55,-82,-20,-21,-22,-18,-19,-10,-13,119,-80,-23,]),'RBRACKET':([7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,44,46,50,52,53,54,55,57,58,59,60,61,64,65,66,70,71,72,73,74,75,76,77,80,81,83,85,86,88,89,90,91,92,93,98,99,100,102,103,104,105,106,107,109,110,113,114,120,122,],[-8,81,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-54,-56,-60,-62,-63,-64,-65,-67,-68,-69,-70,-71,-83,-84,-85,-72,-73,-74,-75,-76,-77,-78,-79,100,-12,-48,-52,-53,-57,-58,-59,-61,-66,-81,-9,113,-11,-51,-55,-82,-20,-21,-22,-18,-19,-10,-13,-80,-23,]),'NUMBER':([70,71,72,73,74,75,76,77,94,105,106,107,109,110,115,118,120,122,],[-72,-73,-74,-75,-76,-77,-78,-79,105,-20,-21,-22,-18,-19,105,105,-80,-23,]),'TEXT':([70,71,72,73,74,75,76,77,94,105,106,107,109,110,115,118,120,122,],[-72,-73,-74,-75,-76,-77,-78,-79,107,-20,-21,-22,-18,-19,107,107,-80,-23,]),'TRUE':([70,71,72,73,74,75,76,77,94,105,106,107,109,110,115,118,120,122,],[-72,-73,-74,-75,-76,-77,-78,-79,109,-20,-21,-22,-18,-19,109,109,-80,-23,]),'FALSE':([70,71,72,73,74,75,76,77,94,105,106,107,109,110,115,118,120,122,],[-72,-73,-74,-75,-76,-77,-78,-79,110,-20,-21,-22,-18,-19,110,110,-80,-23,]),'RPARENS':([70,71,72,73,74,75,76,77,105,106,107,109,110,117,120,121,122,],[-72,-73,-74,-75,-76,-77,-78,-79,-20,-21,-22,-18,-19,120,-80,122,-23,]),'LPAIR':([78,],[97,]),'STORAGE':([96,],[111,]),'PAIR_CONSTRUCTOR':([108,],[115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'contract_run':([0,],[1,]),'contract_decl':([0,],[2,]),'execution':([0,],[3,]),'compound_statement':([0,8,],[5,80,]),'body':([0,42,43,45,62,68,87,101,],[6,85,86,87,93,95,103,114,]),'stmt':([0,8,79,99,],[7,7,98,98,]),'code_decl':([2,],[67,]),'type':([4,9,38,41,47,48,49,51,56,63,82,84,97,111,112,],[69,82,83,84,88,89,90,91,92,94,101,102,112,116,117,]),'value':([94,115,118,],[104,118,121,]),'bool':([94,115,118,],[106,106,106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> contract_run","S'",1,None,None,None),
  ('contract_run -> contract_decl code_decl','contract_run',2,'p_contract','main.py',290),
  ('contract_run -> execution','contract_run',1,'p_contract','main.py',291),
  ('contract_decl -> PARAMETER type SCOLON STORAGE type SCOLON','contract_decl',6,'p_contract_constructor','main.py',295),
  ('code_decl -> CODE body','code_decl',2,'p_contract_code','main.py',300),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',312),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',313),
  ('execution -> body','execution',1,'p_execution','main.py',314),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',323),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',324),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',333),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',334),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',335),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',342),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',349),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',356),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',363),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',370),
  ('bool -> TRUE','bool',1,'p_bool','main.py',377),
  ('bool -> FALSE','bool',1,'p_bool','main.py',378),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',382),
  ('value -> bool','value',1,'p_statement_value','main.py',383),
  ('value -> TEXT','value',1,'p_statement_value','main.py',384),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',385),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',392),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',393),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',394),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',395),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',396),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',397),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',417),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',418),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',419),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',447),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',462),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',463),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',464),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',465),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',466),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',467),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',468),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',469),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',505),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',514),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',515),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',532),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',533),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',534),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',555),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',556),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',557),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',581),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',582),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',583),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',584),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',627),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',643),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',644),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',656),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',657),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',669),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',670),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',688),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',700),
  ('stmt -> STEPS_TO_QUOTA','stmt',1,'p_special_operations','main.py',716),
  ('stmt -> NOW','stmt',1,'p_special_operations','main.py',717),
  ('stmt -> CONTRACT type','stmt',2,'p_contract_push','main.py',729),
  ('stmt -> HASH_KEY','stmt',1,'p_cryptographic_primitives','main.py',743),
  ('stmt -> BLAKE2B','stmt',1,'p_cryptographic_primitives','main.py',744),
  ('stmt -> SHA256','stmt',1,'p_cryptographic_primitives','main.py',745),
  ('stmt -> SHA512','stmt',1,'p_cryptographic_primitives','main.py',746),
  ('stmt -> CHECK_SIGNATURE','stmt',1,'p_cryptographic_primitives','main.py',747),
  ('type -> NAT','type',1,'p_statement_type','main.py',772),
  ('type -> STRING','type',1,'p_statement_type','main.py',773),
  ('type -> INT','type',1,'p_statement_type','main.py',774),
  ('type -> BOOL','type',1,'p_statement_type','main.py',775),
  ('type -> BYTES','type',1,'p_statement_type','main.py',776),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',777),
  ('type -> ADDRESS','type',1,'p_statement_type','main.py',778),
  ('type -> TIMESTAMP','type',1,'p_statement_type','main.py',779),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',780),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',803),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',817),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',841),
  ('stmt -> FAIL','stmt',1,'p_statement_failwith','main.py',842),
  ('stmt -> PRINTER','stmt',1,'p_printer','main.py',856),
]
