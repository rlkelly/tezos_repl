
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD AND BOOL BYTES CAR CDR COMPARE CONCAT CONS DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAILWITH FALSE GE GET GT IF_CONS INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL NAT NEG NEQ NIL NONE NOT NOW NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STEPS_TO_QUOTA STRING SUB SWAP TEXT TIMESTAMP TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECstmt : STEPS_TO_QUOTA\n            | NOW type : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : FAILWITH'
    
_lr_action_items = {'LBRACKET':([0,39,40,42,53,58,60,61,62,63,64,65,71,80,81,92,98,],[5,5,5,5,5,-8,-62,-63,-64,-65,-66,-67,5,-7,5,-6,-68,]),'LAMBDA':([0,5,56,79,],[6,6,6,6,]),'DROP':([0,5,56,79,],[7,7,7,7,]),'DUP':([0,5,56,79,],[8,8,8,8,]),'SWAP':([0,5,56,79,],[9,9,9,9,]),'UNIT':([0,5,56,79,],[10,10,10,10,]),'EQ':([0,5,56,79,],[11,11,11,11,]),'NEQ':([0,5,56,79,],[12,12,12,12,]),'LT':([0,5,56,79,],[13,13,13,13,]),'GT':([0,5,56,79,],[14,14,14,14,]),'LE':([0,5,56,79,],[15,15,15,15,]),'GE':([0,5,56,79,],[16,16,16,16,]),'OR':([0,5,56,79,],[17,17,17,17,]),'AND':([0,5,56,79,],[18,18,18,18,]),'XOR':([0,5,56,79,],[19,19,19,19,]),'COMPARE':([0,5,56,79,],[20,20,20,20,]),'NEG':([0,5,56,79,],[21,21,21,21,]),'ABS':([0,5,56,79,],[22,22,22,22,]),'ADD':([0,5,56,79,],[23,23,23,23,]),'SUB':([0,5,56,79,],[24,24,24,24,]),'MUL':([0,5,56,79,],[25,25,25,25,]),'EDIV':([0,5,56,79,],[26,26,26,26,]),'LSL':([0,5,56,79,],[27,27,27,27,]),'LSR':([0,5,56,79,],[28,28,28,28,]),'SIZE':([0,5,56,79,],[29,29,29,29,]),'CONCAT':([0,5,56,79,],[30,30,30,30,]),'SLICE':([0,5,56,79,],[31,31,31,31,]),'PAIR':([0,5,56,79,],[32,32,32,32,]),'CAR':([0,5,56,79,],[33,33,33,33,]),'CDR':([0,5,56,79,],[34,34,34,34,]),'EMPTY_SET':([0,5,56,79,],[35,35,35,35,]),'MEM':([0,5,56,79,],[36,36,36,36,]),'UPDATE':([0,5,56,79,],[37,37,37,37,]),'EMPTY_MAP':([0,5,56,79,],[38,38,38,38,]),'MAP':([0,5,56,79,],[39,39,39,39,]),'ITER':([0,5,56,79,],[40,40,40,40,]),'GET':([0,5,56,79,],[41,41,41,41,]),'IF_CONS':([0,5,56,79,],[42,42,42,42,]),'SOME':([0,5,56,79,],[43,43,43,43,]),'NONE':([0,5,56,79,],[44,44,44,44,]),'LEFT':([0,5,56,79,],[45,45,45,45,]),'RIGHT':([0,5,56,79,],[46,46,46,46,]),'CONS':([0,5,56,79,],[47,47,47,47,]),'NIL':([0,5,56,79,],[48,48,48,48,]),'NOT':([0,5,56,79,],[49,49,49,49,]),'EXEC':([0,5,56,79,],[50,50,50,50,]),'STEPS_TO_QUOTA':([0,5,56,79,],[51,51,51,51,]),'NOW':([0,5,56,79,],[52,52,52,52,]),'DIP':([0,5,56,79,],[53,53,53,53,]),'PUSH':([0,5,56,79,],[54,54,54,54,]),'FAILWITH':([0,5,56,79,],[55,55,55,55,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,55,56,58,60,61,62,63,64,65,67,69,70,72,73,74,75,76,78,80,83,84,85,86,87,88,90,91,92,93,98,100,],[0,-1,-3,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-71,-2,-8,-62,-63,-64,-65,-66,-67,-44,-48,-49,-53,-54,-55,-57,-69,-5,-7,-47,-51,-70,-16,-17,-18,-14,-15,-6,-9,-68,-19,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,55,57,58,60,61,62,63,64,65,67,69,70,72,73,74,75,76,78,80,83,84,85,86,87,88,90,91,92,93,98,100,],[56,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-71,79,-8,-62,-63,-64,-65,-66,-67,-44,-48,-49,-53,-54,-55,-57,-69,-5,-7,-47,-51,-70,-16,-17,-18,-14,-15,-6,-9,-68,-19,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,55,57,58,60,61,62,63,64,65,67,69,70,72,73,74,75,76,78,79,80,83,84,85,86,87,88,90,91,92,93,98,100,],[-4,58,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-71,80,-8,-62,-63,-64,-65,-66,-67,-44,-48,-49,-53,-54,-55,-57,-69,-5,92,-7,-47,-51,-70,-16,-17,-18,-14,-15,-6,-9,-68,-19,]),'NAT':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,82,94,98,],[60,60,60,60,60,60,60,60,60,-62,-63,-64,-65,-66,-67,60,60,60,-68,]),'STRING':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,82,94,98,],[61,61,61,61,61,61,61,61,61,-62,-63,-64,-65,-66,-67,61,61,61,-68,]),'INT':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,82,94,98,],[62,62,62,62,62,62,62,62,62,-62,-63,-64,-65,-66,-67,62,62,62,-68,]),'BOOL':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,82,94,98,],[63,63,63,63,63,63,63,63,63,-62,-63,-64,-65,-66,-67,63,63,63,-68,]),'BYTES':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,82,94,98,],[64,64,64,64,64,64,64,64,64,-62,-63,-64,-65,-66,-67,64,64,64,-68,]),'OPERATION':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,82,94,98,],[65,65,65,65,65,65,65,65,65,-62,-63,-64,-65,-66,-67,65,65,65,-68,]),'LPARENS':([6,35,38,44,45,46,48,54,59,60,61,62,63,64,65,68,77,82,86,87,88,90,91,94,95,97,98,100,],[66,66,66,66,66,66,66,66,66,-62,-63,-64,-65,-66,-67,66,89,66,-16,-17,-18,-14,-15,66,89,89,-68,-19,]),'NUMBER':([60,61,62,63,64,65,77,86,87,88,90,91,95,97,98,100,],[-62,-63,-64,-65,-66,-67,86,-16,-17,-18,-14,-15,86,86,-68,-19,]),'TEXT':([60,61,62,63,64,65,77,86,87,88,90,91,95,97,98,100,],[-62,-63,-64,-65,-66,-67,88,-16,-17,-18,-14,-15,88,88,-68,-19,]),'TRUE':([60,61,62,63,64,65,77,86,87,88,90,91,95,97,98,100,],[-62,-63,-64,-65,-66,-67,90,-16,-17,-18,-14,-15,90,90,-68,-19,]),'FALSE':([60,61,62,63,64,65,77,86,87,88,90,91,95,97,98,100,],[-62,-63,-64,-65,-66,-67,91,-16,-17,-18,-14,-15,91,91,-68,-19,]),'RPARENS':([60,61,62,63,64,65,86,87,88,90,91,96,98,99,100,],[-62,-63,-64,-65,-66,-67,-16,-17,-18,-14,-15,98,-68,100,-19,]),'LPAIR':([66,],[82,]),'PAIR_CONSTRUCTOR':([89,],[95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,57,]),'body':([0,39,40,42,53,71,81,],[3,69,70,71,76,84,93,]),'stmt':([0,5,56,79,],[4,4,78,78,]),'type':([6,35,38,44,45,46,48,54,59,68,82,94,],[59,67,68,72,73,74,75,77,81,83,94,96,]),'value':([77,95,97,],[85,97,99,]),'bool':([77,95,97,],[87,87,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',248),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',249),
  ('execution -> body','execution',1,'p_execution','main.py',250),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',258),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',259),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',268),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',269),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',270),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',277),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',284),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',291),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',298),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',305),
  ('bool -> TRUE','bool',1,'p_bool','main.py',312),
  ('bool -> FALSE','bool',1,'p_bool','main.py',313),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',317),
  ('value -> bool','value',1,'p_statement_value','main.py',318),
  ('value -> TEXT','value',1,'p_statement_value','main.py',319),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',320),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',327),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',328),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',329),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',330),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',331),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',332),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',352),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',353),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',354),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',382),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',397),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',398),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',399),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',400),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',401),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',402),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',403),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',404),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',440),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',449),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',450),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',467),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',468),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',469),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',490),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',491),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',492),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',516),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',517),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',518),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',519),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',562),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',578),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',579),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',591),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',592),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',604),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',605),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',623),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',635),
  ('stmt -> STEPS_TO_QUOTA','stmt',1,'p_special_operations','main.py',651),
  ('stmt -> NOW','stmt',1,'p_special_operations','main.py',652),
  ('type -> NAT','type',1,'p_statement_type','main.py',662),
  ('type -> STRING','type',1,'p_statement_type','main.py',663),
  ('type -> INT','type',1,'p_statement_type','main.py',664),
  ('type -> BOOL','type',1,'p_statement_type','main.py',665),
  ('type -> BYTES','type',1,'p_statement_type','main.py',666),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',667),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',668),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',687),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',702),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',726),
]
