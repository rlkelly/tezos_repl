
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD AND BOOL BYTES CAR CDR COMPARE CONCAT CONS DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAILWITH FALSE GE GET GT INT LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MEM MUL NAT NEG NEQ NIL NONE NOT NUMBER OR PAIR PAIR_CONSTRUCTOR PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STRING SUB SWAP TEXT TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA TYPE TYPE bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR  stmt : CONCAT\n            | SIZE\n            | SLICE stmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET TYPE\n            | MEM\n            | UPDATE stmt : SOME\n            | NONE TYPE stmt : LEFT TYPE\n            | RIGHT TYPE stmt : CONS\n            | NIL TYPE stmt : NOTstmt : EXECTYPE : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | LPARENS LPAIR TYPE TYPE RPARENS stmt : PUSH TYPE valuestmt : FAILWITH'
    
_lr_action_items = {'LBRACKET':([0,52,53,54,55,56,67,82,],[5,-55,-56,-57,-58,-59,5,-60,]),'LAMBDA':([0,5,48,65,],[6,6,6,6,]),'DROP':([0,5,48,65,],[7,7,7,7,]),'DUP':([0,5,48,65,],[8,8,8,8,]),'SWAP':([0,5,48,65,],[9,9,9,9,]),'UNIT':([0,5,48,65,],[10,10,10,10,]),'EQ':([0,5,48,65,],[11,11,11,11,]),'NEQ':([0,5,48,65,],[12,12,12,12,]),'LT':([0,5,48,65,],[13,13,13,13,]),'GT':([0,5,48,65,],[14,14,14,14,]),'LE':([0,5,48,65,],[15,15,15,15,]),'GE':([0,5,48,65,],[16,16,16,16,]),'OR':([0,5,48,65,],[17,17,17,17,]),'AND':([0,5,48,65,],[18,18,18,18,]),'XOR':([0,5,48,65,],[19,19,19,19,]),'COMPARE':([0,5,48,65,],[20,20,20,20,]),'NEG':([0,5,48,65,],[21,21,21,21,]),'ABS':([0,5,48,65,],[22,22,22,22,]),'ADD':([0,5,48,65,],[23,23,23,23,]),'SUB':([0,5,48,65,],[24,24,24,24,]),'MUL':([0,5,48,65,],[25,25,25,25,]),'EDIV':([0,5,48,65,],[26,26,26,26,]),'LSL':([0,5,48,65,],[27,27,27,27,]),'LSR':([0,5,48,65,],[28,28,28,28,]),'CONCAT':([0,5,48,65,],[29,29,29,29,]),'SIZE':([0,5,48,65,],[30,30,30,30,]),'SLICE':([0,5,48,65,],[31,31,31,31,]),'PAIR':([0,5,48,65,],[32,32,32,32,]),'CAR':([0,5,48,65,],[33,33,33,33,]),'CDR':([0,5,48,65,],[34,34,34,34,]),'EMPTY_SET':([0,5,48,65,],[35,35,35,35,]),'MEM':([0,5,48,65,],[36,36,36,36,]),'UPDATE':([0,5,48,65,],[37,37,37,37,]),'SOME':([0,5,48,65,],[38,38,38,38,]),'NONE':([0,5,48,65,],[39,39,39,39,]),'LEFT':([0,5,48,65,],[40,40,40,40,]),'RIGHT':([0,5,48,65,],[41,41,41,41,]),'CONS':([0,5,48,65,],[42,42,42,42,]),'NIL':([0,5,48,65,],[43,43,43,43,]),'NOT':([0,5,48,65,],[44,44,44,44,]),'EXEC':([0,5,48,65,],[45,45,45,45,]),'PUSH':([0,5,48,65,],[46,46,46,46,]),'FAILWITH':([0,5,48,65,],[47,47,47,47,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,48,50,52,53,54,55,56,58,59,60,61,62,64,66,69,70,71,72,74,75,76,77,82,84,],[0,-1,-3,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-47,-51,-53,-54,-62,-2,-8,-55,-56,-57,-58,-59,-44,-48,-49,-50,-52,-5,-7,-61,-16,-17,-18,-14,-15,-6,-9,-60,-19,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,49,50,52,53,54,55,56,58,59,60,61,62,64,66,69,70,71,72,74,75,76,77,82,84,],[48,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-47,-51,-53,-54,-62,65,-8,-55,-56,-57,-58,-59,-44,-48,-49,-50,-52,-5,-7,-61,-16,-17,-18,-14,-15,-6,-9,-60,-19,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,49,50,52,53,54,55,56,58,59,60,61,62,64,65,66,69,70,71,72,74,75,76,77,82,84,],[-4,50,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-47,-51,-53,-54,-62,66,-8,-55,-56,-57,-58,-59,-44,-48,-49,-50,-52,-5,76,-7,-61,-16,-17,-18,-14,-15,-6,-9,-60,-19,]),'NAT':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,78,82,],[52,52,52,52,52,52,52,52,-55,-56,-57,-58,-59,52,52,-60,]),'STRING':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,78,82,],[53,53,53,53,53,53,53,53,-55,-56,-57,-58,-59,53,53,-60,]),'INT':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,78,82,],[54,54,54,54,54,54,54,54,-55,-56,-57,-58,-59,54,54,-60,]),'BOOL':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,78,82,],[55,55,55,55,55,55,55,55,-55,-56,-57,-58,-59,55,55,-60,]),'BYTES':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,78,82,],[56,56,56,56,56,56,56,56,-55,-56,-57,-58,-59,56,56,-60,]),'LPARENS':([6,35,39,40,41,43,46,51,52,53,54,55,56,63,68,70,71,72,74,75,78,79,81,82,84,],[57,57,57,57,57,57,57,57,-55,-56,-57,-58,-59,73,57,-16,-17,-18,-14,-15,57,73,73,-60,-19,]),'NUMBER':([52,53,54,55,56,63,70,71,72,74,75,79,81,82,84,],[-55,-56,-57,-58,-59,70,-16,-17,-18,-14,-15,70,70,-60,-19,]),'TEXT':([52,53,54,55,56,63,70,71,72,74,75,79,81,82,84,],[-55,-56,-57,-58,-59,72,-16,-17,-18,-14,-15,72,72,-60,-19,]),'TRUE':([52,53,54,55,56,63,70,71,72,74,75,79,81,82,84,],[-55,-56,-57,-58,-59,74,-16,-17,-18,-14,-15,74,74,-60,-19,]),'FALSE':([52,53,54,55,56,63,70,71,72,74,75,79,81,82,84,],[-55,-56,-57,-58,-59,75,-16,-17,-18,-14,-15,75,75,-60,-19,]),'RPARENS':([52,53,54,55,56,70,71,72,74,75,80,82,83,84,],[-55,-56,-57,-58,-59,-16,-17,-18,-14,-15,82,-60,84,-19,]),'LPAIR':([57,],[68,]),'PAIR_CONSTRUCTOR':([73,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,49,]),'body':([0,67,],[3,77,]),'stmt':([0,5,48,65,],[4,4,64,64,]),'TYPE':([6,35,39,40,41,43,46,51,68,78,],[51,58,59,60,61,62,63,67,78,80,]),'value':([63,79,81,],[69,81,83,]),'bool':([63,79,81,],[71,71,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',234),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',235),
  ('execution -> body','execution',1,'p_execution','main.py',236),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',244),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',245),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',254),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',255),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',256),
  ('stmt -> LAMBDA TYPE TYPE body','stmt',4,'p_lambda_statement','main.py',263),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',270),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',277),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',284),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',291),
  ('bool -> TRUE','bool',1,'p_bool','main.py',298),
  ('bool -> FALSE','bool',1,'p_bool','main.py',299),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',303),
  ('value -> bool','value',1,'p_statement_value','main.py',304),
  ('value -> TEXT','value',1,'p_statement_value','main.py',305),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',306),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',313),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',314),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',315),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',316),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',317),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',318),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',338),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',339),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',340),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',368),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',383),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',384),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',385),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',386),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',387),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',388),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',389),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',390),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',426),
  ('stmt -> SIZE','stmt',1,'p_string_operations','main.py',427),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',428),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',449),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',450),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',451),
  ('stmt -> EMPTY_SET TYPE','stmt',2,'p_set_operations','main.py',470),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',471),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',472),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',492),
  ('stmt -> NONE TYPE','stmt',2,'p_option_operations','main.py',493),
  ('stmt -> LEFT TYPE','stmt',2,'p_union_operations','main.py',505),
  ('stmt -> RIGHT TYPE','stmt',2,'p_union_operations','main.py',506),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',518),
  ('stmt -> NIL TYPE','stmt',2,'p_list_operations','main.py',519),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',537),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',549),
  ('TYPE -> NAT','TYPE',1,'p_statement_type','main.py',565),
  ('TYPE -> STRING','TYPE',1,'p_statement_type','main.py',566),
  ('TYPE -> INT','TYPE',1,'p_statement_type','main.py',567),
  ('TYPE -> BOOL','TYPE',1,'p_statement_type','main.py',568),
  ('TYPE -> BYTES','TYPE',1,'p_statement_type','main.py',569),
  ('TYPE -> LPARENS LPAIR TYPE TYPE RPARENS','TYPE',5,'p_statement_type','main.py',570),
  ('stmt -> PUSH TYPE value','stmt',3,'p_statement_push','main.py',585),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',609),
]
