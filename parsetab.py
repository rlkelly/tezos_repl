
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD ADDRESS AND BOOL BYTES CAR CDR COMPARE CONCAT CONS DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAIL FAILWITH FALSE GE GET GT IF_CONS INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL MUTEZ NAT NEG NEQ NIL NONE NOT NOW NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STEPS_TO_QUOTA STRING SUB SWAP TEXT TIMESTAMP TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECstmt : STEPS_TO_QUOTA\n            | NOW type : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | ADDRESS\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : FAILWITH\n            | FAIL'
    
_lr_action_items = {'LBRACKET':([0,39,40,42,53,59,61,62,63,64,65,66,67,73,82,83,94,100,],[5,5,5,5,5,-8,-62,-63,-64,-65,-66,-67,-68,5,-7,5,-6,-69,]),'LAMBDA':([0,5,57,81,],[6,6,6,6,]),'DROP':([0,5,57,81,],[7,7,7,7,]),'DUP':([0,5,57,81,],[8,8,8,8,]),'SWAP':([0,5,57,81,],[9,9,9,9,]),'UNIT':([0,5,57,81,],[10,10,10,10,]),'EQ':([0,5,57,81,],[11,11,11,11,]),'NEQ':([0,5,57,81,],[12,12,12,12,]),'LT':([0,5,57,81,],[13,13,13,13,]),'GT':([0,5,57,81,],[14,14,14,14,]),'LE':([0,5,57,81,],[15,15,15,15,]),'GE':([0,5,57,81,],[16,16,16,16,]),'OR':([0,5,57,81,],[17,17,17,17,]),'AND':([0,5,57,81,],[18,18,18,18,]),'XOR':([0,5,57,81,],[19,19,19,19,]),'COMPARE':([0,5,57,81,],[20,20,20,20,]),'NEG':([0,5,57,81,],[21,21,21,21,]),'ABS':([0,5,57,81,],[22,22,22,22,]),'ADD':([0,5,57,81,],[23,23,23,23,]),'SUB':([0,5,57,81,],[24,24,24,24,]),'MUL':([0,5,57,81,],[25,25,25,25,]),'EDIV':([0,5,57,81,],[26,26,26,26,]),'LSL':([0,5,57,81,],[27,27,27,27,]),'LSR':([0,5,57,81,],[28,28,28,28,]),'SIZE':([0,5,57,81,],[29,29,29,29,]),'CONCAT':([0,5,57,81,],[30,30,30,30,]),'SLICE':([0,5,57,81,],[31,31,31,31,]),'PAIR':([0,5,57,81,],[32,32,32,32,]),'CAR':([0,5,57,81,],[33,33,33,33,]),'CDR':([0,5,57,81,],[34,34,34,34,]),'EMPTY_SET':([0,5,57,81,],[35,35,35,35,]),'MEM':([0,5,57,81,],[36,36,36,36,]),'UPDATE':([0,5,57,81,],[37,37,37,37,]),'EMPTY_MAP':([0,5,57,81,],[38,38,38,38,]),'MAP':([0,5,57,81,],[39,39,39,39,]),'ITER':([0,5,57,81,],[40,40,40,40,]),'GET':([0,5,57,81,],[41,41,41,41,]),'IF_CONS':([0,5,57,81,],[42,42,42,42,]),'SOME':([0,5,57,81,],[43,43,43,43,]),'NONE':([0,5,57,81,],[44,44,44,44,]),'LEFT':([0,5,57,81,],[45,45,45,45,]),'RIGHT':([0,5,57,81,],[46,46,46,46,]),'CONS':([0,5,57,81,],[47,47,47,47,]),'NIL':([0,5,57,81,],[48,48,48,48,]),'NOT':([0,5,57,81,],[49,49,49,49,]),'EXEC':([0,5,57,81,],[50,50,50,50,]),'STEPS_TO_QUOTA':([0,5,57,81,],[51,51,51,51,]),'NOW':([0,5,57,81,],[52,52,52,52,]),'DIP':([0,5,57,81,],[53,53,53,53,]),'PUSH':([0,5,57,81,],[54,54,54,54,]),'FAILWITH':([0,5,57,81,],[55,55,55,55,]),'FAIL':([0,5,57,81,],[56,56,56,56,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,55,56,57,59,61,62,63,64,65,66,67,69,71,72,74,75,76,77,78,80,82,85,86,87,88,89,90,92,93,94,95,100,102,],[0,-1,-3,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-72,-73,-2,-8,-62,-63,-64,-65,-66,-67,-68,-44,-48,-49,-53,-54,-55,-57,-70,-5,-7,-47,-51,-71,-16,-17,-18,-14,-15,-6,-9,-69,-19,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,55,56,58,59,61,62,63,64,65,66,67,69,71,72,74,75,76,77,78,80,82,85,86,87,88,89,90,92,93,94,95,100,102,],[57,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-72,-73,81,-8,-62,-63,-64,-65,-66,-67,-68,-44,-48,-49,-53,-54,-55,-57,-70,-5,-7,-47,-51,-71,-16,-17,-18,-14,-15,-6,-9,-69,-19,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,55,56,58,59,61,62,63,64,65,66,67,69,71,72,74,75,76,77,78,80,81,82,85,86,87,88,89,90,92,93,94,95,100,102,],[-4,59,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-72,-73,82,-8,-62,-63,-64,-65,-66,-67,-68,-44,-48,-49,-53,-54,-55,-57,-70,-5,94,-7,-47,-51,-71,-16,-17,-18,-14,-15,-6,-9,-69,-19,]),'NAT':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[61,61,61,61,61,61,61,61,61,-62,-63,-64,-65,-66,-67,-68,61,61,61,-69,]),'STRING':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[62,62,62,62,62,62,62,62,62,-62,-63,-64,-65,-66,-67,-68,62,62,62,-69,]),'INT':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[63,63,63,63,63,63,63,63,63,-62,-63,-64,-65,-66,-67,-68,63,63,63,-69,]),'BOOL':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[64,64,64,64,64,64,64,64,64,-62,-63,-64,-65,-66,-67,-68,64,64,64,-69,]),'BYTES':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[65,65,65,65,65,65,65,65,65,-62,-63,-64,-65,-66,-67,-68,65,65,65,-69,]),'OPERATION':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[66,66,66,66,66,66,66,66,66,-62,-63,-64,-65,-66,-67,-68,66,66,66,-69,]),'ADDRESS':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,84,96,100,],[67,67,67,67,67,67,67,67,67,-62,-63,-64,-65,-66,-67,-68,67,67,67,-69,]),'LPARENS':([6,35,38,44,45,46,48,54,60,61,62,63,64,65,66,67,70,79,84,88,89,90,92,93,96,97,99,100,102,],[68,68,68,68,68,68,68,68,68,-62,-63,-64,-65,-66,-67,-68,68,91,68,-16,-17,-18,-14,-15,68,91,91,-69,-19,]),'NUMBER':([61,62,63,64,65,66,67,79,88,89,90,92,93,97,99,100,102,],[-62,-63,-64,-65,-66,-67,-68,88,-16,-17,-18,-14,-15,88,88,-69,-19,]),'TEXT':([61,62,63,64,65,66,67,79,88,89,90,92,93,97,99,100,102,],[-62,-63,-64,-65,-66,-67,-68,90,-16,-17,-18,-14,-15,90,90,-69,-19,]),'TRUE':([61,62,63,64,65,66,67,79,88,89,90,92,93,97,99,100,102,],[-62,-63,-64,-65,-66,-67,-68,92,-16,-17,-18,-14,-15,92,92,-69,-19,]),'FALSE':([61,62,63,64,65,66,67,79,88,89,90,92,93,97,99,100,102,],[-62,-63,-64,-65,-66,-67,-68,93,-16,-17,-18,-14,-15,93,93,-69,-19,]),'RPARENS':([61,62,63,64,65,66,67,88,89,90,92,93,98,100,101,102,],[-62,-63,-64,-65,-66,-67,-68,-16,-17,-18,-14,-15,100,-69,102,-19,]),'LPAIR':([68,],[84,]),'PAIR_CONSTRUCTOR':([91,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,58,]),'body':([0,39,40,42,53,73,83,],[3,71,72,73,78,86,95,]),'stmt':([0,5,57,81,],[4,4,80,80,]),'type':([6,35,38,44,45,46,48,54,60,70,84,96,],[60,69,70,74,75,76,77,79,83,85,96,98,]),'value':([79,97,99,],[87,99,101,]),'bool':([79,97,99,],[89,89,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',252),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',253),
  ('execution -> body','execution',1,'p_execution','main.py',254),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',263),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',264),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',273),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',274),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',275),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',282),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',289),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',296),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',303),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',310),
  ('bool -> TRUE','bool',1,'p_bool','main.py',317),
  ('bool -> FALSE','bool',1,'p_bool','main.py',318),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',322),
  ('value -> bool','value',1,'p_statement_value','main.py',323),
  ('value -> TEXT','value',1,'p_statement_value','main.py',324),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',325),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',332),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',333),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',334),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',335),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',336),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',337),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',357),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',358),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',359),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',387),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',402),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',403),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',404),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',405),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',406),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',407),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',408),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',409),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',445),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',454),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',455),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',472),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',473),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',474),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',495),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',496),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',497),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',521),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',522),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',523),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',524),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',567),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',583),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',584),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',596),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',597),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',609),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',610),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',628),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',640),
  ('stmt -> STEPS_TO_QUOTA','stmt',1,'p_special_operations','main.py',656),
  ('stmt -> NOW','stmt',1,'p_special_operations','main.py',657),
  ('type -> NAT','type',1,'p_statement_type','main.py',668),
  ('type -> STRING','type',1,'p_statement_type','main.py',669),
  ('type -> INT','type',1,'p_statement_type','main.py',670),
  ('type -> BOOL','type',1,'p_statement_type','main.py',671),
  ('type -> BYTES','type',1,'p_statement_type','main.py',672),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',673),
  ('type -> ADDRESS','type',1,'p_statement_type','main.py',674),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',675),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',698),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',713),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',737),
  ('stmt -> FAIL','stmt',1,'p_statement_failwith','main.py',738),
]
