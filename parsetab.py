
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD ADDRESS AND ASSERT ASSERT_CMPEQ ASSERT_CMPGT ASSERT_CMPGTE ASSERT_CMPLT ASSERT_CMPLTE ASSERT_CMPNEQ ASSERT_EQ ASSERT_GT ASSERT_GTE ASSERT_LEFT ASSERT_LT ASSERT_LTE ASSERT_NEQ ASSERT_NONE ASSERT_RIGHT ASSERT_SOME BLAKE2B BOOL BYTES CAR CDR CHECK_SIGNATURE CODE COMPARE CONCAT CONS CONTRACT DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC EXIT FAIL FAILWITH FALSE GE GET GT HASH_KEY IF_CONS IF_LEFT IF_RIGHT INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL MUTEZ NAT NEG NEQ NIL NONE NOT NOW NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PAIR_SUGAR PARAMETER PRINTER PUSH RBRACKET RIGHT RPARENS SCOLON SET_CAR SET_CDR SHA256 SHA512 SIZE SLICE SOME STEPS_TO_QUOTA STORAGE STRING SUB SWAP TEXT TIMESTAMP TRUE UNIT UNPAIR_SUGAR UPDATE XORcontract_run : contract_decl code_decl\n        |  executioncontract_decl : PARAMETER type SCOLON STORAGE type SCOLONcode_decl : CODE bodyexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : SET_CARstmt : SET_CDRstmt : UNPAIR_SUGARstmt : PAIR_SUGARstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_LEFT body body\n        | IF_RIGHT body bodystmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECstmt : STEPS_TO_QUOTA\n            | NOW stmt : CONTRACT typestmt : HASH_KEY\n            | BLAKE2B\n            | SHA256\n            | SHA512\n            | CHECK_SIGNATUREtype : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | ADDRESS\n        | TIMESTAMP\n        | MUTEZ\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : ASSERT\n        | ASSERT_EQ\n        | ASSERT_NEQ\n        | ASSERT_LT\n        | ASSERT_LTE\n        | ASSERT_GT\n        | ASSERT_GTEstmt : ASSERT_NONE\n            | ASSERT_SOME\n            | ASSERT_LEFT\n            | ASSERT_RIGHTstmt : ASSERT_CMPEQ\n            | ASSERT_CMPNEQ\n            | ASSERT_CMPLT\n            | ASSERT_CMPLTE\n            | ASSERT_CMPGT\n            | ASSERT_CMPGTEstmt : FAILWITH\n            | FAILstmt : PRINTERstmt : EXIT'
    
_lr_action_items = {'PARAMETER':([0,],[4,]),'LBRACKET':([0,46,47,49,50,51,68,92,94,95,96,97,98,99,100,101,102,106,112,113,114,127,128,142,149,],[8,8,8,8,8,8,8,8,-78,-79,-80,-81,-82,-83,-84,-85,-86,-12,8,8,8,-11,8,-10,-87,]),'LAMBDA':([0,8,104,126,],[9,9,9,9,]),'DROP':([0,8,104,126,],[10,10,10,10,]),'DUP':([0,8,104,126,],[11,11,11,11,]),'SWAP':([0,8,104,126,],[12,12,12,12,]),'UNIT':([0,8,104,126,],[13,13,13,13,]),'EQ':([0,8,104,126,],[14,14,14,14,]),'NEQ':([0,8,104,126,],[15,15,15,15,]),'LT':([0,8,104,126,],[16,16,16,16,]),'GT':([0,8,104,126,],[17,17,17,17,]),'LE':([0,8,104,126,],[18,18,18,18,]),'GE':([0,8,104,126,],[19,19,19,19,]),'OR':([0,8,104,126,],[20,20,20,20,]),'AND':([0,8,104,126,],[21,21,21,21,]),'XOR':([0,8,104,126,],[22,22,22,22,]),'COMPARE':([0,8,104,126,],[23,23,23,23,]),'NEG':([0,8,104,126,],[24,24,24,24,]),'ABS':([0,8,104,126,],[25,25,25,25,]),'ADD':([0,8,104,126,],[26,26,26,26,]),'SUB':([0,8,104,126,],[27,27,27,27,]),'MUL':([0,8,104,126,],[28,28,28,28,]),'EDIV':([0,8,104,126,],[29,29,29,29,]),'LSL':([0,8,104,126,],[30,30,30,30,]),'LSR':([0,8,104,126,],[31,31,31,31,]),'SIZE':([0,8,104,126,],[32,32,32,32,]),'CONCAT':([0,8,104,126,],[33,33,33,33,]),'SLICE':([0,8,104,126,],[34,34,34,34,]),'SET_CAR':([0,8,104,126,],[35,35,35,35,]),'SET_CDR':([0,8,104,126,],[36,36,36,36,]),'UNPAIR_SUGAR':([0,8,104,126,],[37,37,37,37,]),'PAIR_SUGAR':([0,8,104,126,],[38,38,38,38,]),'PAIR':([0,8,104,126,],[39,39,39,39,]),'CAR':([0,8,104,126,],[40,40,40,40,]),'CDR':([0,8,104,126,],[41,41,41,41,]),'EMPTY_SET':([0,8,104,126,],[42,42,42,42,]),'MEM':([0,8,104,126,],[43,43,43,43,]),'UPDATE':([0,8,104,126,],[44,44,44,44,]),'EMPTY_MAP':([0,8,104,126,],[45,45,45,45,]),'MAP':([0,8,104,126,],[46,46,46,46,]),'ITER':([0,8,104,126,],[47,47,47,47,]),'GET':([0,8,104,126,],[48,48,48,48,]),'IF_LEFT':([0,8,104,126,],[49,49,49,49,]),'IF_RIGHT':([0,8,104,126,],[50,50,50,50,]),'IF_CONS':([0,8,104,126,],[51,51,51,51,]),'SOME':([0,8,104,126,],[52,52,52,52,]),'NONE':([0,8,104,126,],[53,53,53,53,]),'LEFT':([0,8,104,126,],[54,54,54,54,]),'RIGHT':([0,8,104,126,],[55,55,55,55,]),'CONS':([0,8,104,126,],[56,56,56,56,]),'NIL':([0,8,104,126,],[57,57,57,57,]),'NOT':([0,8,104,126,],[58,58,58,58,]),'EXEC':([0,8,104,126,],[59,59,59,59,]),'STEPS_TO_QUOTA':([0,8,104,126,],[60,60,60,60,]),'NOW':([0,8,104,126,],[61,61,61,61,]),'CONTRACT':([0,8,104,126,],[62,62,62,62,]),'HASH_KEY':([0,8,104,126,],[63,63,63,63,]),'BLAKE2B':([0,8,104,126,],[64,64,64,64,]),'SHA256':([0,8,104,126,],[65,65,65,65,]),'SHA512':([0,8,104,126,],[66,66,66,66,]),'CHECK_SIGNATURE':([0,8,104,126,],[67,67,67,67,]),'DIP':([0,8,104,126,],[68,68,68,68,]),'PUSH':([0,8,104,126,],[69,69,69,69,]),'ASSERT':([0,8,104,126,],[70,70,70,70,]),'ASSERT_EQ':([0,8,104,126,],[71,71,71,71,]),'ASSERT_NEQ':([0,8,104,126,],[72,72,72,72,]),'ASSERT_LT':([0,8,104,126,],[73,73,73,73,]),'ASSERT_LTE':([0,8,104,126,],[74,74,74,74,]),'ASSERT_GT':([0,8,104,126,],[75,75,75,75,]),'ASSERT_GTE':([0,8,104,126,],[76,76,76,76,]),'ASSERT_NONE':([0,8,104,126,],[77,77,77,77,]),'ASSERT_SOME':([0,8,104,126,],[78,78,78,78,]),'ASSERT_LEFT':([0,8,104,126,],[79,79,79,79,]),'ASSERT_RIGHT':([0,8,104,126,],[80,80,80,80,]),'ASSERT_CMPEQ':([0,8,104,126,],[81,81,81,81,]),'ASSERT_CMPNEQ':([0,8,104,126,],[82,82,82,82,]),'ASSERT_CMPLT':([0,8,104,126,],[83,83,83,83,]),'ASSERT_CMPLTE':([0,8,104,126,],[84,84,84,84,]),'ASSERT_CMPGT':([0,8,104,126,],[85,85,85,85,]),'ASSERT_CMPGTE':([0,8,104,126,],[86,86,86,86,]),'FAILWITH':([0,8,104,126,],[87,87,87,87,]),'FAIL':([0,8,104,126,],[88,88,88,88,]),'PRINTER':([0,8,104,126,],[89,89,89,89,]),'EXIT':([0,8,104,126,],[90,90,90,90,]),'$end':([1,3,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,48,52,56,58,59,60,61,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,94,95,96,97,98,99,100,101,102,104,106,108,110,111,115,116,117,118,119,120,122,125,127,129,130,131,132,133,134,135,136,138,139,142,143,149,151,],[0,-2,-5,-7,-8,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-53,-54,-58,-62,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-1,-78,-79,-80,-81,-82,-83,-84,-85,-86,-6,-12,-52,-56,-57,-63,-64,-65,-67,-72,-88,-4,-9,-11,-55,-59,-60,-61,-89,-20,-21,-22,-18,-19,-10,-13,-87,-23,]),'CODE':([2,148,],[92,-3,]),'NAT':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[94,94,94,94,94,94,94,94,94,94,-78,-79,-80,-81,-82,-83,-84,-85,-86,94,94,94,94,94,-87,]),'STRING':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[95,95,95,95,95,95,95,95,95,95,-78,-79,-80,-81,-82,-83,-84,-85,-86,95,95,95,95,95,-87,]),'INT':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[96,96,96,96,96,96,96,96,96,96,-78,-79,-80,-81,-82,-83,-84,-85,-86,96,96,96,96,96,-87,]),'BOOL':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[97,97,97,97,97,97,97,97,97,97,-78,-79,-80,-81,-82,-83,-84,-85,-86,97,97,97,97,97,-87,]),'BYTES':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[98,98,98,98,98,98,98,98,98,98,-78,-79,-80,-81,-82,-83,-84,-85,-86,98,98,98,98,98,-87,]),'OPERATION':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[99,99,99,99,99,99,99,99,99,99,-78,-79,-80,-81,-82,-83,-84,-85,-86,99,99,99,99,99,-87,]),'ADDRESS':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[100,100,100,100,100,100,100,100,100,100,-78,-79,-80,-81,-82,-83,-84,-85,-86,100,100,100,100,100,-87,]),'TIMESTAMP':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[101,101,101,101,101,101,101,101,101,101,-78,-79,-80,-81,-82,-83,-84,-85,-86,101,101,101,101,101,-87,]),'MUTEZ':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,124,140,141,149,],[102,102,102,102,102,102,102,102,102,102,-78,-79,-80,-81,-82,-83,-84,-85,-86,102,102,102,102,102,-87,]),'LPARENS':([4,9,42,45,53,54,55,57,62,69,94,95,96,97,98,99,100,101,102,107,109,121,124,134,135,136,138,139,140,141,144,147,149,151,],[103,103,103,103,103,103,103,103,103,103,-78,-79,-80,-81,-82,-83,-84,-85,-86,103,103,137,103,-20,-21,-22,-18,-19,103,103,137,137,-87,-23,]),'SCOLON':([5,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,48,52,56,58,59,60,61,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,93,94,95,96,97,98,99,100,101,102,105,106,108,110,111,115,116,117,118,119,120,125,127,129,130,131,132,133,134,135,136,138,139,142,143,145,149,151,],[104,-8,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-53,-54,-58,-62,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,123,-78,-79,-80,-81,-82,-83,-84,-85,-86,126,-12,-52,-56,-57,-63,-64,-65,-67,-72,-88,-9,-11,-55,-59,-60,-61,-89,-20,-21,-22,-18,-19,-10,-13,148,-87,-23,]),'RBRACKET':([7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,48,52,56,58,59,60,61,63,64,65,66,67,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,98,99,100,101,102,105,106,108,110,111,115,116,117,118,119,120,125,126,127,129,130,131,132,133,134,135,136,138,139,142,143,149,151,],[-8,106,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-53,-54,-58,-62,-66,-68,-69,-70,-71,-73,-74,-75,-76,-77,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-78,-79,-80,-81,-82,-83,-84,-85,-86,127,-12,-52,-56,-57,-63,-64,-65,-67,-72,-88,-9,142,-11,-55,-59,-60,-61,-89,-20,-21,-22,-18,-19,-10,-13,-87,-23,]),'NUMBER':([94,95,96,97,98,99,100,101,102,121,134,135,136,138,139,144,147,149,151,],[-78,-79,-80,-81,-82,-83,-84,-85,-86,134,-20,-21,-22,-18,-19,134,134,-87,-23,]),'TEXT':([94,95,96,97,98,99,100,101,102,121,134,135,136,138,139,144,147,149,151,],[-78,-79,-80,-81,-82,-83,-84,-85,-86,136,-20,-21,-22,-18,-19,136,136,-87,-23,]),'TRUE':([94,95,96,97,98,99,100,101,102,121,134,135,136,138,139,144,147,149,151,],[-78,-79,-80,-81,-82,-83,-84,-85,-86,138,-20,-21,-22,-18,-19,138,138,-87,-23,]),'FALSE':([94,95,96,97,98,99,100,101,102,121,134,135,136,138,139,144,147,149,151,],[-78,-79,-80,-81,-82,-83,-84,-85,-86,139,-20,-21,-22,-18,-19,139,139,-87,-23,]),'RPARENS':([94,95,96,97,98,99,100,101,102,134,135,136,138,139,146,149,150,151,],[-78,-79,-80,-81,-82,-83,-84,-85,-86,-20,-21,-22,-18,-19,149,-87,151,-23,]),'LPAIR':([103,],[124,]),'STORAGE':([123,],[140,]),'PAIR_CONSTRUCTOR':([137,],[144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'contract_run':([0,],[1,]),'contract_decl':([0,],[2,]),'execution':([0,],[3,]),'compound_statement':([0,8,],[5,105,]),'body':([0,46,47,49,50,51,68,92,112,113,114,128,],[6,110,111,112,113,114,120,122,130,131,132,143,]),'stmt':([0,8,104,126,],[7,7,125,125,]),'code_decl':([2,],[91,]),'type':([4,9,42,45,53,54,55,57,62,69,107,109,124,140,141,],[93,107,108,109,115,116,117,118,119,121,128,129,141,145,146,]),'value':([121,144,147,],[133,147,150,]),'bool':([121,144,147,],[135,135,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> contract_run","S'",1,None,None,None),
  ('contract_run -> contract_decl code_decl','contract_run',2,'p_contract','main.py',343),
  ('contract_run -> execution','contract_run',1,'p_contract','main.py',344),
  ('contract_decl -> PARAMETER type SCOLON STORAGE type SCOLON','contract_decl',6,'p_contract_constructor','main.py',348),
  ('code_decl -> CODE body','code_decl',2,'p_contract_code','main.py',353),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',365),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',366),
  ('execution -> body','execution',1,'p_execution','main.py',367),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',376),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',377),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',386),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',387),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',388),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',395),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',402),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',409),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',417),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',424),
  ('bool -> TRUE','bool',1,'p_bool','main.py',431),
  ('bool -> FALSE','bool',1,'p_bool','main.py',432),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',436),
  ('value -> bool','value',1,'p_statement_value','main.py',437),
  ('value -> TEXT','value',1,'p_statement_value','main.py',438),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',439),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',446),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',447),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',448),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',449),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',450),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',451),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',472),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',473),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',474),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',502),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',515),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',516),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',517),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',518),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',519),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',520),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',521),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',522),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',558),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',567),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',568),
  ('stmt -> SET_CAR','stmt',1,'p_set_car','main.py',585),
  ('stmt -> SET_CDR','stmt',1,'p_set_cdr','main.py',589),
  ('stmt -> UNPAIR_SUGAR','stmt',1,'p_unpair_sugar','main.py',593),
  ('stmt -> PAIR_SUGAR','stmt',1,'p_pair_sugar','main.py',619),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',668),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',669),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',670),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',691),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',692),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',693),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',717),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',718),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',719),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',720),
  ('stmt -> IF_LEFT body body','stmt',3,'p_if_left_right','main.py',763),
  ('stmt -> IF_RIGHT body body','stmt',3,'p_if_left_right','main.py',764),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',784),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',802),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',803),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',815),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',816),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',828),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',829),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',847),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',859),
  ('stmt -> STEPS_TO_QUOTA','stmt',1,'p_special_operations','main.py',875),
  ('stmt -> NOW','stmt',1,'p_special_operations','main.py',876),
  ('stmt -> CONTRACT type','stmt',2,'p_contract_push','main.py',888),
  ('stmt -> HASH_KEY','stmt',1,'p_cryptographic_primitives','main.py',902),
  ('stmt -> BLAKE2B','stmt',1,'p_cryptographic_primitives','main.py',903),
  ('stmt -> SHA256','stmt',1,'p_cryptographic_primitives','main.py',904),
  ('stmt -> SHA512','stmt',1,'p_cryptographic_primitives','main.py',905),
  ('stmt -> CHECK_SIGNATURE','stmt',1,'p_cryptographic_primitives','main.py',906),
  ('type -> NAT','type',1,'p_statement_type','main.py',931),
  ('type -> STRING','type',1,'p_statement_type','main.py',932),
  ('type -> INT','type',1,'p_statement_type','main.py',933),
  ('type -> BOOL','type',1,'p_statement_type','main.py',934),
  ('type -> BYTES','type',1,'p_statement_type','main.py',935),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',936),
  ('type -> ADDRESS','type',1,'p_statement_type','main.py',937),
  ('type -> TIMESTAMP','type',1,'p_statement_type','main.py',938),
  ('type -> MUTEZ','type',1,'p_statement_type','main.py',939),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',940),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',963),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',977),
  ('stmt -> ASSERT','stmt',1,'p_assertion_macros','main.py',1001),
  ('stmt -> ASSERT_EQ','stmt',1,'p_assertion_macros','main.py',1002),
  ('stmt -> ASSERT_NEQ','stmt',1,'p_assertion_macros','main.py',1003),
  ('stmt -> ASSERT_LT','stmt',1,'p_assertion_macros','main.py',1004),
  ('stmt -> ASSERT_LTE','stmt',1,'p_assertion_macros','main.py',1005),
  ('stmt -> ASSERT_GT','stmt',1,'p_assertion_macros','main.py',1006),
  ('stmt -> ASSERT_GTE','stmt',1,'p_assertion_macros','main.py',1007),
  ('stmt -> ASSERT_NONE','stmt',1,'p_assert_type_macros','main.py',1047),
  ('stmt -> ASSERT_SOME','stmt',1,'p_assert_type_macros','main.py',1048),
  ('stmt -> ASSERT_LEFT','stmt',1,'p_assert_type_macros','main.py',1049),
  ('stmt -> ASSERT_RIGHT','stmt',1,'p_assert_type_macros','main.py',1050),
  ('stmt -> ASSERT_CMPEQ','stmt',1,'p_assertioncmp_macros','main.py',1076),
  ('stmt -> ASSERT_CMPNEQ','stmt',1,'p_assertioncmp_macros','main.py',1077),
  ('stmt -> ASSERT_CMPLT','stmt',1,'p_assertioncmp_macros','main.py',1078),
  ('stmt -> ASSERT_CMPLTE','stmt',1,'p_assertioncmp_macros','main.py',1079),
  ('stmt -> ASSERT_CMPGT','stmt',1,'p_assertioncmp_macros','main.py',1080),
  ('stmt -> ASSERT_CMPGTE','stmt',1,'p_assertioncmp_macros','main.py',1081),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',1124),
  ('stmt -> FAIL','stmt',1,'p_statement_failwith','main.py',1125),
  ('stmt -> PRINTER','stmt',1,'p_printer','main.py',1140),
  ('stmt -> EXIT','stmt',1,'p_exit','main.py',1144),
]
