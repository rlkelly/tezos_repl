
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD AND BOOL BYTES CAR CDR COMPARE CONCAT CONS DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAILWITH FALSE GE GET GT IF_CONS INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL NAT NEG NEQ NIL NONE NOT NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STRING SUB SWAP TEXT TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECtype : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : FAILWITH'
    
_lr_action_items = {'LBRACKET':([0,39,40,42,51,56,58,59,60,61,62,63,69,78,79,90,96,],[5,5,5,5,5,-8,-60,-61,-62,-63,-64,-65,5,-7,5,-6,-66,]),'LAMBDA':([0,5,54,77,],[6,6,6,6,]),'DROP':([0,5,54,77,],[7,7,7,7,]),'DUP':([0,5,54,77,],[8,8,8,8,]),'SWAP':([0,5,54,77,],[9,9,9,9,]),'UNIT':([0,5,54,77,],[10,10,10,10,]),'EQ':([0,5,54,77,],[11,11,11,11,]),'NEQ':([0,5,54,77,],[12,12,12,12,]),'LT':([0,5,54,77,],[13,13,13,13,]),'GT':([0,5,54,77,],[14,14,14,14,]),'LE':([0,5,54,77,],[15,15,15,15,]),'GE':([0,5,54,77,],[16,16,16,16,]),'OR':([0,5,54,77,],[17,17,17,17,]),'AND':([0,5,54,77,],[18,18,18,18,]),'XOR':([0,5,54,77,],[19,19,19,19,]),'COMPARE':([0,5,54,77,],[20,20,20,20,]),'NEG':([0,5,54,77,],[21,21,21,21,]),'ABS':([0,5,54,77,],[22,22,22,22,]),'ADD':([0,5,54,77,],[23,23,23,23,]),'SUB':([0,5,54,77,],[24,24,24,24,]),'MUL':([0,5,54,77,],[25,25,25,25,]),'EDIV':([0,5,54,77,],[26,26,26,26,]),'LSL':([0,5,54,77,],[27,27,27,27,]),'LSR':([0,5,54,77,],[28,28,28,28,]),'SIZE':([0,5,54,77,],[29,29,29,29,]),'CONCAT':([0,5,54,77,],[30,30,30,30,]),'SLICE':([0,5,54,77,],[31,31,31,31,]),'PAIR':([0,5,54,77,],[32,32,32,32,]),'CAR':([0,5,54,77,],[33,33,33,33,]),'CDR':([0,5,54,77,],[34,34,34,34,]),'EMPTY_SET':([0,5,54,77,],[35,35,35,35,]),'MEM':([0,5,54,77,],[36,36,36,36,]),'UPDATE':([0,5,54,77,],[37,37,37,37,]),'EMPTY_MAP':([0,5,54,77,],[38,38,38,38,]),'MAP':([0,5,54,77,],[39,39,39,39,]),'ITER':([0,5,54,77,],[40,40,40,40,]),'GET':([0,5,54,77,],[41,41,41,41,]),'IF_CONS':([0,5,54,77,],[42,42,42,42,]),'SOME':([0,5,54,77,],[43,43,43,43,]),'NONE':([0,5,54,77,],[44,44,44,44,]),'LEFT':([0,5,54,77,],[45,45,45,45,]),'RIGHT':([0,5,54,77,],[46,46,46,46,]),'CONS':([0,5,54,77,],[47,47,47,47,]),'NIL':([0,5,54,77,],[48,48,48,48,]),'NOT':([0,5,54,77,],[49,49,49,49,]),'EXEC':([0,5,54,77,],[50,50,50,50,]),'DIP':([0,5,54,77,],[51,51,51,51,]),'PUSH':([0,5,54,77,],[52,52,52,52,]),'FAILWITH':([0,5,54,77,],[53,53,53,53,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,53,54,56,58,59,60,61,62,63,65,67,68,70,71,72,73,74,76,78,81,82,83,84,85,86,88,89,90,91,96,98,],[0,-1,-3,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-69,-2,-8,-60,-61,-62,-63,-64,-65,-44,-48,-49,-53,-54,-55,-57,-67,-5,-7,-47,-51,-68,-16,-17,-18,-14,-15,-6,-9,-66,-19,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,53,55,56,58,59,60,61,62,63,65,67,68,70,71,72,73,74,76,78,81,82,83,84,85,86,88,89,90,91,96,98,],[54,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-69,77,-8,-60,-61,-62,-63,-64,-65,-44,-48,-49,-53,-54,-55,-57,-67,-5,-7,-47,-51,-68,-16,-17,-18,-14,-15,-6,-9,-66,-19,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,53,55,56,58,59,60,61,62,63,65,67,68,70,71,72,73,74,76,77,78,81,82,83,84,85,86,88,89,90,91,96,98,],[-4,56,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-69,78,-8,-60,-61,-62,-63,-64,-65,-44,-48,-49,-53,-54,-55,-57,-67,-5,90,-7,-47,-51,-68,-16,-17,-18,-14,-15,-6,-9,-66,-19,]),'NAT':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,80,92,96,],[58,58,58,58,58,58,58,58,58,-60,-61,-62,-63,-64,-65,58,58,58,-66,]),'STRING':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,80,92,96,],[59,59,59,59,59,59,59,59,59,-60,-61,-62,-63,-64,-65,59,59,59,-66,]),'INT':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,80,92,96,],[60,60,60,60,60,60,60,60,60,-60,-61,-62,-63,-64,-65,60,60,60,-66,]),'BOOL':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,80,92,96,],[61,61,61,61,61,61,61,61,61,-60,-61,-62,-63,-64,-65,61,61,61,-66,]),'BYTES':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,80,92,96,],[62,62,62,62,62,62,62,62,62,-60,-61,-62,-63,-64,-65,62,62,62,-66,]),'OPERATION':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,80,92,96,],[63,63,63,63,63,63,63,63,63,-60,-61,-62,-63,-64,-65,63,63,63,-66,]),'LPARENS':([6,35,38,44,45,46,48,52,57,58,59,60,61,62,63,66,75,80,84,85,86,88,89,92,93,95,96,98,],[64,64,64,64,64,64,64,64,64,-60,-61,-62,-63,-64,-65,64,87,64,-16,-17,-18,-14,-15,64,87,87,-66,-19,]),'NUMBER':([58,59,60,61,62,63,75,84,85,86,88,89,93,95,96,98,],[-60,-61,-62,-63,-64,-65,84,-16,-17,-18,-14,-15,84,84,-66,-19,]),'TEXT':([58,59,60,61,62,63,75,84,85,86,88,89,93,95,96,98,],[-60,-61,-62,-63,-64,-65,86,-16,-17,-18,-14,-15,86,86,-66,-19,]),'TRUE':([58,59,60,61,62,63,75,84,85,86,88,89,93,95,96,98,],[-60,-61,-62,-63,-64,-65,88,-16,-17,-18,-14,-15,88,88,-66,-19,]),'FALSE':([58,59,60,61,62,63,75,84,85,86,88,89,93,95,96,98,],[-60,-61,-62,-63,-64,-65,89,-16,-17,-18,-14,-15,89,89,-66,-19,]),'RPARENS':([58,59,60,61,62,63,84,85,86,88,89,94,96,97,98,],[-60,-61,-62,-63,-64,-65,-16,-17,-18,-14,-15,96,-66,98,-19,]),'LPAIR':([64,],[80,]),'PAIR_CONSTRUCTOR':([87,],[93,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,55,]),'body':([0,39,40,42,51,69,79,],[3,67,68,69,74,82,91,]),'stmt':([0,5,54,77,],[4,4,76,76,]),'type':([6,35,38,44,45,46,48,52,57,66,80,92,],[57,65,66,70,71,72,73,75,79,81,92,94,]),'value':([75,93,95,],[83,95,97,]),'bool':([75,93,95,],[85,85,85,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',238),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',239),
  ('execution -> body','execution',1,'p_execution','main.py',240),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',247),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',248),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',257),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',258),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',259),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',266),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',273),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',280),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',287),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',294),
  ('bool -> TRUE','bool',1,'p_bool','main.py',301),
  ('bool -> FALSE','bool',1,'p_bool','main.py',302),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',306),
  ('value -> bool','value',1,'p_statement_value','main.py',307),
  ('value -> TEXT','value',1,'p_statement_value','main.py',308),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',309),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',316),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',317),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',318),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',319),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',320),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',321),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',341),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',342),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',343),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',371),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',386),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',387),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',388),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',389),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',390),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',391),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',392),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',393),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',429),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',438),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',439),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',456),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',457),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',458),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',479),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',480),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',481),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',501),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',502),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',503),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',504),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',547),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',563),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',564),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',576),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',577),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',589),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',590),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',608),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',620),
  ('type -> NAT','type',1,'p_statement_type','main.py',636),
  ('type -> STRING','type',1,'p_statement_type','main.py',637),
  ('type -> INT','type',1,'p_statement_type','main.py',638),
  ('type -> BOOL','type',1,'p_statement_type','main.py',639),
  ('type -> BYTES','type',1,'p_statement_type','main.py',640),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',641),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',642),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',659),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',670),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',694),
]
