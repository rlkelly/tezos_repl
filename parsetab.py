
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD AND BOOL BYTES DROP DUP EDIV EQ FAILWITH FALSE GE GT INT LE LT MUL NAT NEG NEQ NOT NUMBER OR PUSH STRING SUB SWAP TRUE UNIT XORstatement : DROPstatement : DUPstatement : SWAPstatement : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool statement : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE statement : OR\n        | AND\n        | XOR statement : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV statement : NOTTYPE : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES statement : PUSH TYPE valuestatement : FAILWITH'
    
_lr_action_items = {'DROP':([0,],[2,]),'DUP':([0,],[3,]),'SWAP':([0,],[4,]),'UNIT':([0,],[5,]),'EQ':([0,],[6,]),'NEQ':([0,],[7,]),'LT':([0,],[8,]),'GT':([0,],[9,]),'LE':([0,],[10,]),'GE':([0,],[11,]),'OR':([0,],[12,]),'AND':([0,],[13,]),'XOR':([0,],[14,]),'NEG':([0,],[15,]),'ABS':([0,],[16,]),'ADD':([0,],[17,]),'SUB':([0,],[18,]),'MUL':([0,],[19,]),'EDIV':([0,],[20,]),'NOT':([0,],[21,]),'PUSH':([0,],[22,]),'FAILWITH':([0,],[23,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,30,31,32,33,34,],[0,-1,-2,-3,-4,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-31,-30,-7,-8,-5,-6,]),'NAT':([22,],[25,]),'STRING':([22,],[26,]),'INT':([22,],[27,]),'BOOL':([22,],[28,]),'BYTES':([22,],[29,]),'NUMBER':([24,25,26,27,28,29,],[31,-25,-26,-27,-28,-29,]),'TRUE':([24,25,26,27,28,29,],[33,-25,-26,-27,-28,-29,]),'FALSE':([24,25,26,27,28,29,],[34,-25,-26,-27,-28,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'TYPE':([22,],[24,]),'value':([24,],[30,]),'bool':([24,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> DROP','statement',1,'p_statement_drop','main.py',126),
  ('statement -> DUP','statement',1,'p_statement_dup','main.py',130),
  ('statement -> SWAP','statement',1,'p_statement_swap','main.py',134),
  ('statement -> UNIT','statement',1,'p_statement_unit','main.py',138),
  ('bool -> TRUE','bool',1,'p_bool','main.py',142),
  ('bool -> FALSE','bool',1,'p_bool','main.py',143),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',147),
  ('value -> bool','value',1,'p_statement_value','main.py',148),
  ('statement -> EQ','statement',1,'p_statement_generic_comparison','main.py',152),
  ('statement -> NEQ','statement',1,'p_statement_generic_comparison','main.py',153),
  ('statement -> LT','statement',1,'p_statement_generic_comparison','main.py',154),
  ('statement -> GT','statement',1,'p_statement_generic_comparison','main.py',155),
  ('statement -> LE','statement',1,'p_statement_generic_comparison','main.py',156),
  ('statement -> GE','statement',1,'p_statement_generic_comparison','main.py',157),
  ('statement -> OR','statement',1,'p_boolean_comparison','main.py',174),
  ('statement -> AND','statement',1,'p_boolean_comparison','main.py',175),
  ('statement -> XOR','statement',1,'p_boolean_comparison','main.py',176),
  ('statement -> NEG','statement',1,'p_integer_operations','main.py',191),
  ('statement -> ABS','statement',1,'p_integer_operations','main.py',192),
  ('statement -> ADD','statement',1,'p_integer_operations','main.py',193),
  ('statement -> SUB','statement',1,'p_integer_operations','main.py',194),
  ('statement -> MUL','statement',1,'p_integer_operations','main.py',195),
  ('statement -> EDIV','statement',1,'p_integer_operations','main.py',196),
  ('statement -> NOT','statement',1,'p_boolean_not','main.py',206),
  ('TYPE -> NAT','TYPE',1,'p_statement_type','main.py',213),
  ('TYPE -> STRING','TYPE',1,'p_statement_type','main.py',214),
  ('TYPE -> INT','TYPE',1,'p_statement_type','main.py',215),
  ('TYPE -> BOOL','TYPE',1,'p_statement_type','main.py',216),
  ('TYPE -> BYTES','TYPE',1,'p_statement_type','main.py',217),
  ('statement -> PUSH TYPE value','statement',3,'p_statement_push','main.py',221),
  ('statement -> FAILWITH','statement',1,'p_statement_failwith','main.py',234),
]
