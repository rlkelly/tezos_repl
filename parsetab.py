
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD AND BOOL BYTES CAR CDR COMPARE CONCAT CONS DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAILWITH FALSE GE GET GT INT LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MEM MUL NAT NEG NEQ NIL NONE NOT NUMBER OR PAIR PAIR_CONSTRUCTOR PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STRING SUB SWAP TEXT TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA TYPE TYPE bodystmt : DROP stmt : DUP stmt : SWAP stmt : UNIT bool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPARE stmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR  stmt : CONCAT\n            | SIZE\n            | SLICE  stmt : PAIR\n            | CAR\n            | CDR  stmt : EMPTY_SET TYPE\n            | MEM\n            | UPDATE  stmt : SOME\n            | NONE TYPE  stmt : LEFT TYPE\n            | RIGHT TYPE  stmt : CONS\n            | NIL TYPE  stmt : NOT stmt : EXECTYPE : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | LPARENS LPAIR TYPE TYPE RPARENS stmt : PUSH TYPE value stmt : FAILWITH '
    
_lr_action_items = {'LBRACKET':([0,52,53,54,55,56,67,81,],[5,-54,-55,-56,-57,-58,5,-59,]),'LAMBDA':([0,5,48,66,],[6,6,6,6,]),'DROP':([0,5,48,66,],[7,7,7,7,]),'DUP':([0,5,48,66,],[8,8,8,8,]),'SWAP':([0,5,48,66,],[9,9,9,9,]),'UNIT':([0,5,48,66,],[10,10,10,10,]),'EQ':([0,5,48,66,],[11,11,11,11,]),'NEQ':([0,5,48,66,],[12,12,12,12,]),'LT':([0,5,48,66,],[13,13,13,13,]),'GT':([0,5,48,66,],[14,14,14,14,]),'LE':([0,5,48,66,],[15,15,15,15,]),'GE':([0,5,48,66,],[16,16,16,16,]),'OR':([0,5,48,66,],[17,17,17,17,]),'AND':([0,5,48,66,],[18,18,18,18,]),'XOR':([0,5,48,66,],[19,19,19,19,]),'COMPARE':([0,5,48,66,],[20,20,20,20,]),'NEG':([0,5,48,66,],[21,21,21,21,]),'ABS':([0,5,48,66,],[22,22,22,22,]),'ADD':([0,5,48,66,],[23,23,23,23,]),'SUB':([0,5,48,66,],[24,24,24,24,]),'MUL':([0,5,48,66,],[25,25,25,25,]),'EDIV':([0,5,48,66,],[26,26,26,26,]),'LSL':([0,5,48,66,],[27,27,27,27,]),'LSR':([0,5,48,66,],[28,28,28,28,]),'CONCAT':([0,5,48,66,],[29,29,29,29,]),'SIZE':([0,5,48,66,],[30,30,30,30,]),'SLICE':([0,5,48,66,],[31,31,31,31,]),'PAIR':([0,5,48,66,],[32,32,32,32,]),'CAR':([0,5,48,66,],[33,33,33,33,]),'CDR':([0,5,48,66,],[34,34,34,34,]),'EMPTY_SET':([0,5,48,66,],[35,35,35,35,]),'MEM':([0,5,48,66,],[36,36,36,36,]),'UPDATE':([0,5,48,66,],[37,37,37,37,]),'SOME':([0,5,48,66,],[38,38,38,38,]),'NONE':([0,5,48,66,],[39,39,39,39,]),'LEFT':([0,5,48,66,],[40,40,40,40,]),'RIGHT':([0,5,48,66,],[41,41,41,41,]),'CONS':([0,5,48,66,],[42,42,42,42,]),'NIL':([0,5,48,66,],[43,43,43,43,]),'NOT':([0,5,48,66,],[44,44,44,44,]),'EXEC':([0,5,48,66,],[45,45,45,45,]),'PUSH':([0,5,48,66,],[46,46,46,46,]),'FAILWITH':([0,5,48,66,],[47,47,47,47,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,48,50,52,53,54,55,56,58,59,60,61,62,64,65,69,70,71,72,74,75,76,81,83,],[0,-1,-3,-4,-9,-10,-11,-12,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-44,-45,-46,-50,-52,-53,-61,-2,-7,-54,-55,-56,-57,-58,-43,-47,-48,-49,-51,-5,-6,-60,-15,-16,-17,-13,-14,-8,-59,-18,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,49,50,52,53,54,55,56,58,59,60,61,62,64,65,69,70,71,72,74,75,76,81,83,],[48,-4,-9,-10,-11,-12,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-44,-45,-46,-50,-52,-53,-61,66,-7,-54,-55,-56,-57,-58,-43,-47,-48,-49,-51,-5,-6,-60,-15,-16,-17,-13,-14,-8,-59,-18,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,49,50,52,53,54,55,56,58,59,60,61,62,64,65,69,70,71,72,74,75,76,81,83,],[-4,50,-9,-10,-11,-12,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-44,-45,-46,-50,-52,-53,-61,65,-7,-54,-55,-56,-57,-58,-43,-47,-48,-49,-51,-5,-6,-60,-15,-16,-17,-13,-14,-8,-59,-18,]),'NAT':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,77,81,],[52,52,52,52,52,52,52,52,-54,-55,-56,-57,-58,52,52,-59,]),'STRING':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,77,81,],[53,53,53,53,53,53,53,53,-54,-55,-56,-57,-58,53,53,-59,]),'INT':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,77,81,],[54,54,54,54,54,54,54,54,-54,-55,-56,-57,-58,54,54,-59,]),'BOOL':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,77,81,],[55,55,55,55,55,55,55,55,-54,-55,-56,-57,-58,55,55,-59,]),'BYTES':([6,35,39,40,41,43,46,51,52,53,54,55,56,68,77,81,],[56,56,56,56,56,56,56,56,-54,-55,-56,-57,-58,56,56,-59,]),'LPARENS':([6,35,39,40,41,43,46,51,52,53,54,55,56,63,68,70,71,72,74,75,77,78,80,81,83,],[57,57,57,57,57,57,57,57,-54,-55,-56,-57,-58,73,57,-15,-16,-17,-13,-14,57,73,73,-59,-18,]),'NUMBER':([52,53,54,55,56,63,70,71,72,74,75,78,80,81,83,],[-54,-55,-56,-57,-58,70,-15,-16,-17,-13,-14,70,70,-59,-18,]),'TEXT':([52,53,54,55,56,63,70,71,72,74,75,78,80,81,83,],[-54,-55,-56,-57,-58,72,-15,-16,-17,-13,-14,72,72,-59,-18,]),'TRUE':([52,53,54,55,56,63,70,71,72,74,75,78,80,81,83,],[-54,-55,-56,-57,-58,74,-15,-16,-17,-13,-14,74,74,-59,-18,]),'FALSE':([52,53,54,55,56,63,70,71,72,74,75,78,80,81,83,],[-54,-55,-56,-57,-58,75,-15,-16,-17,-13,-14,75,75,-59,-18,]),'RPARENS':([52,53,54,55,56,70,71,72,74,75,79,81,82,83,],[-54,-55,-56,-57,-58,-15,-16,-17,-13,-14,81,-59,83,-18,]),'LPAIR':([57,],[68,]),'PAIR_CONSTRUCTOR':([73,],[78,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,49,]),'body':([0,67,],[3,76,]),'stmt':([0,5,48,66,],[4,4,64,64,]),'TYPE':([6,35,39,40,41,43,46,51,68,77,],[51,58,59,60,61,62,63,67,77,79,]),'value':([63,78,80,],[69,80,82,]),'bool':([63,78,80,],[71,71,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',233),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',234),
  ('execution -> body','execution',1,'p_execution','main.py',235),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',243),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',244),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',252),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',253),
  ('stmt -> LAMBDA TYPE TYPE body','stmt',4,'p_lambda_statement','main.py',260),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',265),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',269),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',273),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',277),
  ('bool -> TRUE','bool',1,'p_bool','main.py',281),
  ('bool -> FALSE','bool',1,'p_bool','main.py',282),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',286),
  ('value -> bool','value',1,'p_statement_value','main.py',287),
  ('value -> TEXT','value',1,'p_statement_value','main.py',288),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',289),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',296),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',297),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',298),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',299),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',300),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',301),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',318),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',319),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',320),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',345),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',357),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',358),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',359),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',360),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',361),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',362),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',363),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',364),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',397),
  ('stmt -> SIZE','stmt',1,'p_string_operations','main.py',398),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',399),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',417),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',418),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',419),
  ('stmt -> EMPTY_SET TYPE','stmt',2,'p_set_operations','main.py',436),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',437),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',438),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',454),
  ('stmt -> NONE TYPE','stmt',2,'p_option_operations','main.py',455),
  ('stmt -> LEFT TYPE','stmt',2,'p_union_operations','main.py',463),
  ('stmt -> RIGHT TYPE','stmt',2,'p_union_operations','main.py',464),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',471),
  ('stmt -> NIL TYPE','stmt',2,'p_list_operations','main.py',472),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',482),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',494),
  ('TYPE -> NAT','TYPE',1,'p_statement_type','main.py',501),
  ('TYPE -> STRING','TYPE',1,'p_statement_type','main.py',502),
  ('TYPE -> INT','TYPE',1,'p_statement_type','main.py',503),
  ('TYPE -> BOOL','TYPE',1,'p_statement_type','main.py',504),
  ('TYPE -> BYTES','TYPE',1,'p_statement_type','main.py',505),
  ('TYPE -> LPARENS LPAIR TYPE TYPE RPARENS','TYPE',5,'p_statement_type','main.py',506),
  ('stmt -> PUSH TYPE value','stmt',3,'p_statement_push','main.py',521),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',540),
]
