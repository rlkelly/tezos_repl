
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD AND BOOL BYTES CAR CDR COMPARE CONCAT CONS DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAILWITH FALSE GE GET GT INT LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MEM MUL NAT NEG NEQ NIL NONE NOT NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STRING SUB SWAP TEXT TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA TYPE TYPE bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : CONCAT\n            | SIZE\n            | SLICE stmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET TYPE\n            | MEM\n            | UPDATE stmt : SOME\n            | NONE TYPE stmt : LEFT TYPE\n            | RIGHT TYPE stmt : CONS\n            | NIL TYPE stmt : NOTstmt : EXECTYPE : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | LPARENS LPAIR TYPE TYPE RPARENS stmt : PUSH TYPE valuestmt : FAILWITH'
    
_lr_action_items = {'LBRACKET':([0,52,53,54,55,56,57,68,83,],[5,-55,-56,-57,-58,-59,-60,5,-61,]),'LAMBDA':([0,5,48,66,],[6,6,6,6,]),'DROP':([0,5,48,66,],[7,7,7,7,]),'DUP':([0,5,48,66,],[8,8,8,8,]),'SWAP':([0,5,48,66,],[9,9,9,9,]),'UNIT':([0,5,48,66,],[10,10,10,10,]),'EQ':([0,5,48,66,],[11,11,11,11,]),'NEQ':([0,5,48,66,],[12,12,12,12,]),'LT':([0,5,48,66,],[13,13,13,13,]),'GT':([0,5,48,66,],[14,14,14,14,]),'LE':([0,5,48,66,],[15,15,15,15,]),'GE':([0,5,48,66,],[16,16,16,16,]),'OR':([0,5,48,66,],[17,17,17,17,]),'AND':([0,5,48,66,],[18,18,18,18,]),'XOR':([0,5,48,66,],[19,19,19,19,]),'COMPARE':([0,5,48,66,],[20,20,20,20,]),'NEG':([0,5,48,66,],[21,21,21,21,]),'ABS':([0,5,48,66,],[22,22,22,22,]),'ADD':([0,5,48,66,],[23,23,23,23,]),'SUB':([0,5,48,66,],[24,24,24,24,]),'MUL':([0,5,48,66,],[25,25,25,25,]),'EDIV':([0,5,48,66,],[26,26,26,26,]),'LSL':([0,5,48,66,],[27,27,27,27,]),'LSR':([0,5,48,66,],[28,28,28,28,]),'CONCAT':([0,5,48,66,],[29,29,29,29,]),'SIZE':([0,5,48,66,],[30,30,30,30,]),'SLICE':([0,5,48,66,],[31,31,31,31,]),'PAIR':([0,5,48,66,],[32,32,32,32,]),'CAR':([0,5,48,66,],[33,33,33,33,]),'CDR':([0,5,48,66,],[34,34,34,34,]),'EMPTY_SET':([0,5,48,66,],[35,35,35,35,]),'MEM':([0,5,48,66,],[36,36,36,36,]),'UPDATE':([0,5,48,66,],[37,37,37,37,]),'SOME':([0,5,48,66,],[38,38,38,38,]),'NONE':([0,5,48,66,],[39,39,39,39,]),'LEFT':([0,5,48,66,],[40,40,40,40,]),'RIGHT':([0,5,48,66,],[41,41,41,41,]),'CONS':([0,5,48,66,],[42,42,42,42,]),'NIL':([0,5,48,66,],[43,43,43,43,]),'NOT':([0,5,48,66,],[44,44,44,44,]),'EXEC':([0,5,48,66,],[45,45,45,45,]),'PUSH':([0,5,48,66,],[46,46,46,46,]),'FAILWITH':([0,5,48,66,],[47,47,47,47,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,48,50,52,53,54,55,56,57,59,60,61,62,63,65,67,70,71,72,73,75,76,77,78,83,85,],[0,-1,-3,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-47,-51,-53,-54,-63,-2,-8,-55,-56,-57,-58,-59,-60,-44,-48,-49,-50,-52,-5,-7,-62,-16,-17,-18,-14,-15,-6,-9,-61,-19,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,49,50,52,53,54,55,56,57,59,60,61,62,63,65,67,70,71,72,73,75,76,77,78,83,85,],[48,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-47,-51,-53,-54,-63,66,-8,-55,-56,-57,-58,-59,-60,-44,-48,-49,-50,-52,-5,-7,-62,-16,-17,-18,-14,-15,-6,-9,-61,-19,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,42,44,45,47,49,50,52,53,54,55,56,57,59,60,61,62,63,65,66,67,70,71,72,73,75,76,77,78,83,85,],[-4,50,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-47,-51,-53,-54,-63,67,-8,-55,-56,-57,-58,-59,-60,-44,-48,-49,-50,-52,-5,77,-7,-62,-16,-17,-18,-14,-15,-6,-9,-61,-19,]),'NAT':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,69,79,83,],[52,52,52,52,52,52,52,52,-55,-56,-57,-58,-59,-60,52,52,-61,]),'STRING':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,69,79,83,],[53,53,53,53,53,53,53,53,-55,-56,-57,-58,-59,-60,53,53,-61,]),'INT':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,69,79,83,],[54,54,54,54,54,54,54,54,-55,-56,-57,-58,-59,-60,54,54,-61,]),'BOOL':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,69,79,83,],[55,55,55,55,55,55,55,55,-55,-56,-57,-58,-59,-60,55,55,-61,]),'BYTES':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,69,79,83,],[56,56,56,56,56,56,56,56,-55,-56,-57,-58,-59,-60,56,56,-61,]),'OPERATION':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,69,79,83,],[57,57,57,57,57,57,57,57,-55,-56,-57,-58,-59,-60,57,57,-61,]),'LPARENS':([6,35,39,40,41,43,46,51,52,53,54,55,56,57,64,69,71,72,73,75,76,79,80,82,83,85,],[58,58,58,58,58,58,58,58,-55,-56,-57,-58,-59,-60,74,58,-16,-17,-18,-14,-15,58,74,74,-61,-19,]),'NUMBER':([52,53,54,55,56,57,64,71,72,73,75,76,80,82,83,85,],[-55,-56,-57,-58,-59,-60,71,-16,-17,-18,-14,-15,71,71,-61,-19,]),'TEXT':([52,53,54,55,56,57,64,71,72,73,75,76,80,82,83,85,],[-55,-56,-57,-58,-59,-60,73,-16,-17,-18,-14,-15,73,73,-61,-19,]),'TRUE':([52,53,54,55,56,57,64,71,72,73,75,76,80,82,83,85,],[-55,-56,-57,-58,-59,-60,75,-16,-17,-18,-14,-15,75,75,-61,-19,]),'FALSE':([52,53,54,55,56,57,64,71,72,73,75,76,80,82,83,85,],[-55,-56,-57,-58,-59,-60,76,-16,-17,-18,-14,-15,76,76,-61,-19,]),'RPARENS':([52,53,54,55,56,57,71,72,73,75,76,81,83,84,85,],[-55,-56,-57,-58,-59,-60,-16,-17,-18,-14,-15,83,-61,85,-19,]),'LPAIR':([58,],[69,]),'PAIR_CONSTRUCTOR':([74,],[80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,49,]),'body':([0,68,],[3,78,]),'stmt':([0,5,48,66,],[4,4,65,65,]),'TYPE':([6,35,39,40,41,43,46,51,69,79,],[51,59,60,61,62,63,64,68,79,81,]),'value':([64,80,82,],[70,82,84,]),'bool':([64,80,82,],[72,72,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',233),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',234),
  ('execution -> body','execution',1,'p_execution','main.py',235),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',242),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',243),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',252),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',253),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',254),
  ('stmt -> LAMBDA TYPE TYPE body','stmt',4,'p_lambda_statement','main.py',261),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',268),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',275),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',282),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',289),
  ('bool -> TRUE','bool',1,'p_bool','main.py',296),
  ('bool -> FALSE','bool',1,'p_bool','main.py',297),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',301),
  ('value -> bool','value',1,'p_statement_value','main.py',302),
  ('value -> TEXT','value',1,'p_statement_value','main.py',303),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',304),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',311),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',312),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',313),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',314),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',315),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',316),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',336),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',337),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',338),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',366),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',381),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',382),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',383),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',384),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',385),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',386),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',387),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',388),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',424),
  ('stmt -> SIZE','stmt',1,'p_string_operations','main.py',425),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',426),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',447),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',448),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',449),
  ('stmt -> EMPTY_SET TYPE','stmt',2,'p_set_operations','main.py',470),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',471),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',472),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',492),
  ('stmt -> NONE TYPE','stmt',2,'p_option_operations','main.py',493),
  ('stmt -> LEFT TYPE','stmt',2,'p_union_operations','main.py',505),
  ('stmt -> RIGHT TYPE','stmt',2,'p_union_operations','main.py',506),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',518),
  ('stmt -> NIL TYPE','stmt',2,'p_list_operations','main.py',519),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',537),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',549),
  ('TYPE -> NAT','TYPE',1,'p_statement_type','main.py',565),
  ('TYPE -> STRING','TYPE',1,'p_statement_type','main.py',566),
  ('TYPE -> INT','TYPE',1,'p_statement_type','main.py',567),
  ('TYPE -> BOOL','TYPE',1,'p_statement_type','main.py',568),
  ('TYPE -> BYTES','TYPE',1,'p_statement_type','main.py',569),
  ('TYPE -> OPERATION','TYPE',1,'p_statement_type','main.py',570),
  ('TYPE -> LPARENS LPAIR TYPE TYPE RPARENS','TYPE',5,'p_statement_type','main.py',571),
  ('stmt -> PUSH TYPE value','stmt',3,'p_statement_push','main.py',588),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',612),
]
