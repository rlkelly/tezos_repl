
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD ADDRESS AND BOOL BYTES CAR CDR COMPARE CONCAT CONS CONTRACT DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAIL FAILWITH FALSE GE GET GT IF_CONS INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL MUTEZ NAT NEG NEQ NIL NONE NOT NOW NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PRINTER PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STEPS_TO_QUOTA STRING SUB SWAP TEXT TIMESTAMP TRUE UNIT UPDATE XORexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECstmt : STEPS_TO_QUOTA\n            | NOW stmt : CONTRACT typetype : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | ADDRESS\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : FAILWITH\n            | FAILstmt : PRINTER'
    
_lr_action_items = {'LBRACKET':([0,39,40,42,54,61,63,64,65,66,67,68,69,75,85,86,97,103,],[5,5,5,5,5,-8,-63,-64,-65,-66,-67,-68,-69,5,-7,5,-6,-70,]),'LAMBDA':([0,5,59,84,],[6,6,6,6,]),'DROP':([0,5,59,84,],[7,7,7,7,]),'DUP':([0,5,59,84,],[8,8,8,8,]),'SWAP':([0,5,59,84,],[9,9,9,9,]),'UNIT':([0,5,59,84,],[10,10,10,10,]),'EQ':([0,5,59,84,],[11,11,11,11,]),'NEQ':([0,5,59,84,],[12,12,12,12,]),'LT':([0,5,59,84,],[13,13,13,13,]),'GT':([0,5,59,84,],[14,14,14,14,]),'LE':([0,5,59,84,],[15,15,15,15,]),'GE':([0,5,59,84,],[16,16,16,16,]),'OR':([0,5,59,84,],[17,17,17,17,]),'AND':([0,5,59,84,],[18,18,18,18,]),'XOR':([0,5,59,84,],[19,19,19,19,]),'COMPARE':([0,5,59,84,],[20,20,20,20,]),'NEG':([0,5,59,84,],[21,21,21,21,]),'ABS':([0,5,59,84,],[22,22,22,22,]),'ADD':([0,5,59,84,],[23,23,23,23,]),'SUB':([0,5,59,84,],[24,24,24,24,]),'MUL':([0,5,59,84,],[25,25,25,25,]),'EDIV':([0,5,59,84,],[26,26,26,26,]),'LSL':([0,5,59,84,],[27,27,27,27,]),'LSR':([0,5,59,84,],[28,28,28,28,]),'SIZE':([0,5,59,84,],[29,29,29,29,]),'CONCAT':([0,5,59,84,],[30,30,30,30,]),'SLICE':([0,5,59,84,],[31,31,31,31,]),'PAIR':([0,5,59,84,],[32,32,32,32,]),'CAR':([0,5,59,84,],[33,33,33,33,]),'CDR':([0,5,59,84,],[34,34,34,34,]),'EMPTY_SET':([0,5,59,84,],[35,35,35,35,]),'MEM':([0,5,59,84,],[36,36,36,36,]),'UPDATE':([0,5,59,84,],[37,37,37,37,]),'EMPTY_MAP':([0,5,59,84,],[38,38,38,38,]),'MAP':([0,5,59,84,],[39,39,39,39,]),'ITER':([0,5,59,84,],[40,40,40,40,]),'GET':([0,5,59,84,],[41,41,41,41,]),'IF_CONS':([0,5,59,84,],[42,42,42,42,]),'SOME':([0,5,59,84,],[43,43,43,43,]),'NONE':([0,5,59,84,],[44,44,44,44,]),'LEFT':([0,5,59,84,],[45,45,45,45,]),'RIGHT':([0,5,59,84,],[46,46,46,46,]),'CONS':([0,5,59,84,],[47,47,47,47,]),'NIL':([0,5,59,84,],[48,48,48,48,]),'NOT':([0,5,59,84,],[49,49,49,49,]),'EXEC':([0,5,59,84,],[50,50,50,50,]),'STEPS_TO_QUOTA':([0,5,59,84,],[51,51,51,51,]),'NOW':([0,5,59,84,],[52,52,52,52,]),'CONTRACT':([0,5,59,84,],[53,53,53,53,]),'DIP':([0,5,59,84,],[54,54,54,54,]),'PUSH':([0,5,59,84,],[55,55,55,55,]),'FAILWITH':([0,5,59,84,],[56,56,56,56,]),'FAIL':([0,5,59,84,],[57,57,57,57,]),'PRINTER':([0,5,59,84,],[58,58,58,58,]),'$end':([1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,56,57,58,59,61,63,64,65,66,67,68,69,71,73,74,76,77,78,79,80,81,83,85,88,89,90,91,92,93,95,96,97,98,103,105,],[0,-1,-3,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-73,-74,-75,-2,-8,-63,-64,-65,-66,-67,-68,-69,-44,-48,-49,-53,-54,-55,-57,-62,-71,-5,-7,-47,-51,-72,-16,-17,-18,-14,-15,-6,-9,-70,-19,]),'SCOLON':([2,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,56,57,58,60,61,63,64,65,66,67,68,69,71,73,74,76,77,78,79,80,81,83,85,88,89,90,91,92,93,95,96,97,98,103,105,],[59,-4,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-73,-74,-75,84,-8,-63,-64,-65,-66,-67,-68,-69,-44,-48,-49,-53,-54,-55,-57,-62,-71,-5,-7,-47,-51,-72,-16,-17,-18,-14,-15,-6,-9,-70,-19,]),'RBRACKET':([4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,43,47,49,50,51,52,56,57,58,60,61,63,64,65,66,67,68,69,71,73,74,76,77,78,79,80,81,83,84,85,88,89,90,91,92,93,95,96,97,98,103,105,],[-4,61,-10,-11,-12,-13,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-45,-46,-50,-52,-56,-58,-59,-60,-61,-73,-74,-75,85,-8,-63,-64,-65,-66,-67,-68,-69,-44,-48,-49,-53,-54,-55,-57,-62,-71,-5,97,-7,-47,-51,-72,-16,-17,-18,-14,-15,-6,-9,-70,-19,]),'NAT':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[63,63,63,63,63,63,63,63,63,63,-63,-64,-65,-66,-67,-68,-69,63,63,63,-70,]),'STRING':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[64,64,64,64,64,64,64,64,64,64,-63,-64,-65,-66,-67,-68,-69,64,64,64,-70,]),'INT':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[65,65,65,65,65,65,65,65,65,65,-63,-64,-65,-66,-67,-68,-69,65,65,65,-70,]),'BOOL':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[66,66,66,66,66,66,66,66,66,66,-63,-64,-65,-66,-67,-68,-69,66,66,66,-70,]),'BYTES':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[67,67,67,67,67,67,67,67,67,67,-63,-64,-65,-66,-67,-68,-69,67,67,67,-70,]),'OPERATION':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[68,68,68,68,68,68,68,68,68,68,-63,-64,-65,-66,-67,-68,-69,68,68,68,-70,]),'ADDRESS':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,87,99,103,],[69,69,69,69,69,69,69,69,69,69,-63,-64,-65,-66,-67,-68,-69,69,69,69,-70,]),'LPARENS':([6,35,38,44,45,46,48,53,55,62,63,64,65,66,67,68,69,72,82,87,91,92,93,95,96,99,100,102,103,105,],[70,70,70,70,70,70,70,70,70,70,-63,-64,-65,-66,-67,-68,-69,70,94,70,-16,-17,-18,-14,-15,70,94,94,-70,-19,]),'NUMBER':([63,64,65,66,67,68,69,82,91,92,93,95,96,100,102,103,105,],[-63,-64,-65,-66,-67,-68,-69,91,-16,-17,-18,-14,-15,91,91,-70,-19,]),'TEXT':([63,64,65,66,67,68,69,82,91,92,93,95,96,100,102,103,105,],[-63,-64,-65,-66,-67,-68,-69,93,-16,-17,-18,-14,-15,93,93,-70,-19,]),'TRUE':([63,64,65,66,67,68,69,82,91,92,93,95,96,100,102,103,105,],[-63,-64,-65,-66,-67,-68,-69,95,-16,-17,-18,-14,-15,95,95,-70,-19,]),'FALSE':([63,64,65,66,67,68,69,82,91,92,93,95,96,100,102,103,105,],[-63,-64,-65,-66,-67,-68,-69,96,-16,-17,-18,-14,-15,96,96,-70,-19,]),'RPARENS':([63,64,65,66,67,68,69,91,92,93,95,96,101,103,104,105,],[-63,-64,-65,-66,-67,-68,-69,-16,-17,-18,-14,-15,103,-70,105,-19,]),'LPAIR':([70,],[87,]),'PAIR_CONSTRUCTOR':([94,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'execution':([0,],[1,]),'compound_statement':([0,5,],[2,60,]),'body':([0,39,40,42,54,75,86,],[3,73,74,75,81,89,98,]),'stmt':([0,5,59,84,],[4,4,83,83,]),'type':([6,35,38,44,45,46,48,53,55,62,72,87,99,],[62,71,72,76,77,78,79,80,82,86,88,99,101,]),'value':([82,100,102,],[90,102,104,]),'bool':([82,100,102,],[92,92,92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> execution","S'",1,None,None,None),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',262),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',263),
  ('execution -> body','execution',1,'p_execution','main.py',264),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',273),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',274),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',283),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',284),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',285),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',292),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',299),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',306),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',313),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',320),
  ('bool -> TRUE','bool',1,'p_bool','main.py',327),
  ('bool -> FALSE','bool',1,'p_bool','main.py',328),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',332),
  ('value -> bool','value',1,'p_statement_value','main.py',333),
  ('value -> TEXT','value',1,'p_statement_value','main.py',334),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',335),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',342),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',343),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',344),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',345),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',346),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',347),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',367),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',368),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',369),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',397),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',412),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',413),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',414),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',415),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',416),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',417),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',418),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',419),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',457),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',466),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',467),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',484),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',485),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',486),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',507),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',508),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',509),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',533),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',534),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',535),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',536),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',579),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',595),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',596),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',608),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',609),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',621),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',622),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',640),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',652),
  ('stmt -> STEPS_TO_QUOTA','stmt',1,'p_special_operations','main.py',668),
  ('stmt -> NOW','stmt',1,'p_special_operations','main.py',669),
  ('stmt -> CONTRACT type','stmt',2,'p_contract_push','main.py',681),
  ('type -> NAT','type',1,'p_statement_type','main.py',696),
  ('type -> STRING','type',1,'p_statement_type','main.py',697),
  ('type -> INT','type',1,'p_statement_type','main.py',698),
  ('type -> BOOL','type',1,'p_statement_type','main.py',699),
  ('type -> BYTES','type',1,'p_statement_type','main.py',700),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',701),
  ('type -> ADDRESS','type',1,'p_statement_type','main.py',702),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',703),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',726),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',740),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',764),
  ('stmt -> FAIL','stmt',1,'p_statement_failwith','main.py',765),
  ('stmt -> PRINTER','stmt',1,'p_printer','main.py',779),
]
