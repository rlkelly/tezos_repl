
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS ADD ADDRESS AND BOOL BYTES CAR CDR CODE COMPARE CONCAT CONS CONTRACT DIP DROP DUP EDIV EMPTY_MAP EMPTY_SET EQ EXEC FAIL FAILWITH FALSE GE GET GT IF_CONS INT ITER LAMBDA LBRACKET LE LEFT LPAIR LPARENS LSL LSR LT MAP MEM MUL MUTEZ NAT NEG NEQ NIL NONE NOT NOW NUMBER OPERATION OR PAIR PAIR_CONSTRUCTOR PARAMETER PRINTER PUSH RBRACKET RIGHT RPARENS SCOLON SIZE SLICE SOME STEPS_TO_QUOTA STORAGE STRING SUB SWAP TEXT TIMESTAMP TRUE UNIT UPDATE XORcontract_run : contract_decl code_decl\n        |  executioncontract_decl : PARAMETER type SCOLON STORAGE type SCOLONcode_decl : CODE bodyexecution : compound_statement\n            | compound_statement SCOLON\n            | bodycompound_statement : stmt\n            | compound_statement SCOLON stmtbody : LBRACKET compound_statement SCOLON RBRACKET\n            | LBRACKET compound_statement RBRACKET\n            | LBRACKET RBRACKETstmt : LAMBDA type type bodystmt : DROPstmt : DUPstmt : SWAPstmt : UNITbool : TRUE\n        | FALSE value : NUMBER\n        | bool\n        | TEXT\n        | LPARENS PAIR_CONSTRUCTOR value value RPARENS stmt : EQ\n        | NEQ\n        | LT\n        | GT\n        | LE\n        | GE  stmt : OR\n        | AND\n        | XOR  stmt : COMPAREstmt : NEG\n         | ABS\n         | ADD\n         | SUB\n         | MUL\n         | EDIV\n         | LSL\n         | LSR stmt : SIZEstmt : CONCAT\n            | SLICEstmt : PAIR\n            | CAR\n            | CDR stmt : EMPTY_SET type\n            | MEM\n            | UPDATE stmt : EMPTY_MAP type type\n            | MAP body\n            | ITER body\n            | GETstmt : IF_CONS body bodystmt : SOME\n            | NONE type stmt : LEFT type\n            | RIGHT type stmt : CONS\n            | NIL type stmt : NOTstmt : EXECstmt : STEPS_TO_QUOTA\n            | NOW stmt : CONTRACT typetype : NAT\n        | STRING\n        | INT\n        | BOOL\n        | BYTES\n        | OPERATION\n        | ADDRESS\n        | LPARENS LPAIR type type RPARENS stmt : DIP bodystmt : PUSH type valuestmt : FAILWITH\n            | FAILstmt : PRINTER'
    
_lr_action_items = {'PARAMETER':([0,],[4,]),'LBRACKET':([0,42,43,45,57,63,65,66,67,68,69,70,71,75,81,94,95,107,114,],[8,8,8,8,8,8,-67,-68,-69,-70,-71,-72,-73,-12,8,-11,8,-10,-74,]),'LAMBDA':([0,8,73,93,],[9,9,9,9,]),'DROP':([0,8,73,93,],[10,10,10,10,]),'DUP':([0,8,73,93,],[11,11,11,11,]),'SWAP':([0,8,73,93,],[12,12,12,12,]),'UNIT':([0,8,73,93,],[13,13,13,13,]),'EQ':([0,8,73,93,],[14,14,14,14,]),'NEQ':([0,8,73,93,],[15,15,15,15,]),'LT':([0,8,73,93,],[16,16,16,16,]),'GT':([0,8,73,93,],[17,17,17,17,]),'LE':([0,8,73,93,],[18,18,18,18,]),'GE':([0,8,73,93,],[19,19,19,19,]),'OR':([0,8,73,93,],[20,20,20,20,]),'AND':([0,8,73,93,],[21,21,21,21,]),'XOR':([0,8,73,93,],[22,22,22,22,]),'COMPARE':([0,8,73,93,],[23,23,23,23,]),'NEG':([0,8,73,93,],[24,24,24,24,]),'ABS':([0,8,73,93,],[25,25,25,25,]),'ADD':([0,8,73,93,],[26,26,26,26,]),'SUB':([0,8,73,93,],[27,27,27,27,]),'MUL':([0,8,73,93,],[28,28,28,28,]),'EDIV':([0,8,73,93,],[29,29,29,29,]),'LSL':([0,8,73,93,],[30,30,30,30,]),'LSR':([0,8,73,93,],[31,31,31,31,]),'SIZE':([0,8,73,93,],[32,32,32,32,]),'CONCAT':([0,8,73,93,],[33,33,33,33,]),'SLICE':([0,8,73,93,],[34,34,34,34,]),'PAIR':([0,8,73,93,],[35,35,35,35,]),'CAR':([0,8,73,93,],[36,36,36,36,]),'CDR':([0,8,73,93,],[37,37,37,37,]),'EMPTY_SET':([0,8,73,93,],[38,38,38,38,]),'MEM':([0,8,73,93,],[39,39,39,39,]),'UPDATE':([0,8,73,93,],[40,40,40,40,]),'EMPTY_MAP':([0,8,73,93,],[41,41,41,41,]),'MAP':([0,8,73,93,],[42,42,42,42,]),'ITER':([0,8,73,93,],[43,43,43,43,]),'GET':([0,8,73,93,],[44,44,44,44,]),'IF_CONS':([0,8,73,93,],[45,45,45,45,]),'SOME':([0,8,73,93,],[46,46,46,46,]),'NONE':([0,8,73,93,],[47,47,47,47,]),'LEFT':([0,8,73,93,],[48,48,48,48,]),'RIGHT':([0,8,73,93,],[49,49,49,49,]),'CONS':([0,8,73,93,],[50,50,50,50,]),'NIL':([0,8,73,93,],[51,51,51,51,]),'NOT':([0,8,73,93,],[52,52,52,52,]),'EXEC':([0,8,73,93,],[53,53,53,53,]),'STEPS_TO_QUOTA':([0,8,73,93,],[54,54,54,54,]),'NOW':([0,8,73,93,],[55,55,55,55,]),'CONTRACT':([0,8,73,93,],[56,56,56,56,]),'DIP':([0,8,73,93,],[57,57,57,57,]),'PUSH':([0,8,73,93,],[58,58,58,58,]),'FAILWITH':([0,8,73,93,],[59,59,59,59,]),'FAIL':([0,8,73,93,],[60,60,60,60,]),'PRINTER':([0,8,73,93,],[61,61,61,61,]),'$end':([1,3,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,44,46,50,52,53,54,55,59,60,61,62,65,66,67,68,69,70,71,73,75,77,79,80,82,83,84,85,86,87,89,92,94,96,97,98,99,100,101,103,104,107,108,114,116,],[0,-2,-5,-7,-8,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-54,-56,-60,-62,-63,-64,-65,-77,-78,-79,-1,-67,-68,-69,-70,-71,-72,-73,-6,-12,-48,-52,-53,-57,-58,-59,-61,-66,-75,-4,-9,-11,-51,-55,-76,-20,-21,-22,-18,-19,-10,-13,-74,-23,]),'CODE':([2,113,],[63,-3,]),'NAT':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[65,65,65,65,65,65,65,65,65,65,-67,-68,-69,-70,-71,-72,-73,65,65,65,65,65,-74,]),'STRING':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[66,66,66,66,66,66,66,66,66,66,-67,-68,-69,-70,-71,-72,-73,66,66,66,66,66,-74,]),'INT':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[67,67,67,67,67,67,67,67,67,67,-67,-68,-69,-70,-71,-72,-73,67,67,67,67,67,-74,]),'BOOL':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[68,68,68,68,68,68,68,68,68,68,-67,-68,-69,-70,-71,-72,-73,68,68,68,68,68,-74,]),'BYTES':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[69,69,69,69,69,69,69,69,69,69,-67,-68,-69,-70,-71,-72,-73,69,69,69,69,69,-74,]),'OPERATION':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[70,70,70,70,70,70,70,70,70,70,-67,-68,-69,-70,-71,-72,-73,70,70,70,70,70,-74,]),'ADDRESS':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,91,105,106,114,],[71,71,71,71,71,71,71,71,71,71,-67,-68,-69,-70,-71,-72,-73,71,71,71,71,71,-74,]),'LPARENS':([4,9,38,41,47,48,49,51,56,58,65,66,67,68,69,70,71,76,78,88,91,99,100,101,103,104,105,106,109,112,114,116,],[72,72,72,72,72,72,72,72,72,72,-67,-68,-69,-70,-71,-72,-73,72,72,102,72,-20,-21,-22,-18,-19,72,72,102,102,-74,-23,]),'SCOLON':([5,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,44,46,50,52,53,54,55,59,60,61,64,65,66,67,68,69,70,71,74,75,77,79,80,82,83,84,85,86,87,92,94,96,97,98,99,100,101,103,104,107,108,110,114,116,],[73,-8,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-54,-56,-60,-62,-63,-64,-65,-77,-78,-79,90,-67,-68,-69,-70,-71,-72,-73,93,-12,-48,-52,-53,-57,-58,-59,-61,-66,-75,-9,-11,-51,-55,-76,-20,-21,-22,-18,-19,-10,-13,113,-74,-23,]),'RBRACKET':([7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,44,46,50,52,53,54,55,59,60,61,65,66,67,68,69,70,71,74,75,77,79,80,82,83,84,85,86,87,92,93,94,96,97,98,99,100,101,103,104,107,108,114,116,],[-8,75,-14,-15,-16,-17,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-54,-56,-60,-62,-63,-64,-65,-77,-78,-79,-67,-68,-69,-70,-71,-72,-73,94,-12,-48,-52,-53,-57,-58,-59,-61,-66,-75,-9,107,-11,-51,-55,-76,-20,-21,-22,-18,-19,-10,-13,-74,-23,]),'NUMBER':([65,66,67,68,69,70,71,88,99,100,101,103,104,109,112,114,116,],[-67,-68,-69,-70,-71,-72,-73,99,-20,-21,-22,-18,-19,99,99,-74,-23,]),'TEXT':([65,66,67,68,69,70,71,88,99,100,101,103,104,109,112,114,116,],[-67,-68,-69,-70,-71,-72,-73,101,-20,-21,-22,-18,-19,101,101,-74,-23,]),'TRUE':([65,66,67,68,69,70,71,88,99,100,101,103,104,109,112,114,116,],[-67,-68,-69,-70,-71,-72,-73,103,-20,-21,-22,-18,-19,103,103,-74,-23,]),'FALSE':([65,66,67,68,69,70,71,88,99,100,101,103,104,109,112,114,116,],[-67,-68,-69,-70,-71,-72,-73,104,-20,-21,-22,-18,-19,104,104,-74,-23,]),'RPARENS':([65,66,67,68,69,70,71,99,100,101,103,104,111,114,115,116,],[-67,-68,-69,-70,-71,-72,-73,-20,-21,-22,-18,-19,114,-74,116,-23,]),'LPAIR':([72,],[91,]),'STORAGE':([90,],[105,]),'PAIR_CONSTRUCTOR':([102,],[109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'contract_run':([0,],[1,]),'contract_decl':([0,],[2,]),'execution':([0,],[3,]),'compound_statement':([0,8,],[5,74,]),'body':([0,42,43,45,57,63,81,95,],[6,79,80,81,87,89,97,108,]),'stmt':([0,8,73,93,],[7,7,92,92,]),'code_decl':([2,],[62,]),'type':([4,9,38,41,47,48,49,51,56,58,76,78,91,105,106,],[64,76,77,78,82,83,84,85,86,88,95,96,106,110,111,]),'value':([88,109,112,],[98,112,115,]),'bool':([88,109,112,],[100,100,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> contract_run","S'",1,None,None,None),
  ('contract_run -> contract_decl code_decl','contract_run',2,'p_contract','main.py',274),
  ('contract_run -> execution','contract_run',1,'p_contract','main.py',275),
  ('contract_decl -> PARAMETER type SCOLON STORAGE type SCOLON','contract_decl',6,'p_contract_constructor','main.py',279),
  ('code_decl -> CODE body','code_decl',2,'p_contract_code','main.py',284),
  ('execution -> compound_statement','execution',1,'p_execution','main.py',288),
  ('execution -> compound_statement SCOLON','execution',2,'p_execution','main.py',289),
  ('execution -> body','execution',1,'p_execution','main.py',290),
  ('compound_statement -> stmt','compound_statement',1,'p_compound_statement','main.py',299),
  ('compound_statement -> compound_statement SCOLON stmt','compound_statement',3,'p_compound_statement','main.py',300),
  ('body -> LBRACKET compound_statement SCOLON RBRACKET','body',4,'p_body','main.py',309),
  ('body -> LBRACKET compound_statement RBRACKET','body',3,'p_body','main.py',310),
  ('body -> LBRACKET RBRACKET','body',2,'p_body','main.py',311),
  ('stmt -> LAMBDA type type body','stmt',4,'p_lambda_statement','main.py',318),
  ('stmt -> DROP','stmt',1,'p_statement_drop','main.py',325),
  ('stmt -> DUP','stmt',1,'p_statement_dup','main.py',332),
  ('stmt -> SWAP','stmt',1,'p_statement_swap','main.py',339),
  ('stmt -> UNIT','stmt',1,'p_statement_unit','main.py',346),
  ('bool -> TRUE','bool',1,'p_bool','main.py',353),
  ('bool -> FALSE','bool',1,'p_bool','main.py',354),
  ('value -> NUMBER','value',1,'p_statement_value','main.py',358),
  ('value -> bool','value',1,'p_statement_value','main.py',359),
  ('value -> TEXT','value',1,'p_statement_value','main.py',360),
  ('value -> LPARENS PAIR_CONSTRUCTOR value value RPARENS','value',5,'p_statement_value','main.py',361),
  ('stmt -> EQ','stmt',1,'p_statement_generic_comparison','main.py',368),
  ('stmt -> NEQ','stmt',1,'p_statement_generic_comparison','main.py',369),
  ('stmt -> LT','stmt',1,'p_statement_generic_comparison','main.py',370),
  ('stmt -> GT','stmt',1,'p_statement_generic_comparison','main.py',371),
  ('stmt -> LE','stmt',1,'p_statement_generic_comparison','main.py',372),
  ('stmt -> GE','stmt',1,'p_statement_generic_comparison','main.py',373),
  ('stmt -> OR','stmt',1,'p_boolean_comparison','main.py',393),
  ('stmt -> AND','stmt',1,'p_boolean_comparison','main.py',394),
  ('stmt -> XOR','stmt',1,'p_boolean_comparison','main.py',395),
  ('stmt -> COMPARE','stmt',1,'p_compare_operation','main.py',423),
  ('stmt -> NEG','stmt',1,'p_integer_operations','main.py',438),
  ('stmt -> ABS','stmt',1,'p_integer_operations','main.py',439),
  ('stmt -> ADD','stmt',1,'p_integer_operations','main.py',440),
  ('stmt -> SUB','stmt',1,'p_integer_operations','main.py',441),
  ('stmt -> MUL','stmt',1,'p_integer_operations','main.py',442),
  ('stmt -> EDIV','stmt',1,'p_integer_operations','main.py',443),
  ('stmt -> LSL','stmt',1,'p_integer_operations','main.py',444),
  ('stmt -> LSR','stmt',1,'p_integer_operations','main.py',445),
  ('stmt -> SIZE','stmt',1,'p_size_operation','main.py',481),
  ('stmt -> CONCAT','stmt',1,'p_string_operations','main.py',490),
  ('stmt -> SLICE','stmt',1,'p_string_operations','main.py',491),
  ('stmt -> PAIR','stmt',1,'p_pair_operations','main.py',508),
  ('stmt -> CAR','stmt',1,'p_pair_operations','main.py',509),
  ('stmt -> CDR','stmt',1,'p_pair_operations','main.py',510),
  ('stmt -> EMPTY_SET type','stmt',2,'p_set_operations','main.py',531),
  ('stmt -> MEM','stmt',1,'p_set_operations','main.py',532),
  ('stmt -> UPDATE','stmt',1,'p_set_operations','main.py',533),
  ('stmt -> EMPTY_MAP type type','stmt',3,'p_map_operations','main.py',557),
  ('stmt -> MAP body','stmt',2,'p_map_operations','main.py',558),
  ('stmt -> ITER body','stmt',2,'p_map_operations','main.py',559),
  ('stmt -> GET','stmt',1,'p_map_operations','main.py',560),
  ('stmt -> IF_CONS body body','stmt',3,'p_if_cons','main.py',603),
  ('stmt -> SOME','stmt',1,'p_option_operations','main.py',619),
  ('stmt -> NONE type','stmt',2,'p_option_operations','main.py',620),
  ('stmt -> LEFT type','stmt',2,'p_union_operations','main.py',632),
  ('stmt -> RIGHT type','stmt',2,'p_union_operations','main.py',633),
  ('stmt -> CONS','stmt',1,'p_list_operations','main.py',645),
  ('stmt -> NIL type','stmt',2,'p_list_operations','main.py',646),
  ('stmt -> NOT','stmt',1,'p_boolean_not','main.py',664),
  ('stmt -> EXEC','stmt',1,'p_exec','main.py',676),
  ('stmt -> STEPS_TO_QUOTA','stmt',1,'p_special_operations','main.py',692),
  ('stmt -> NOW','stmt',1,'p_special_operations','main.py',693),
  ('stmt -> CONTRACT type','stmt',2,'p_contract_push','main.py',705),
  ('type -> NAT','type',1,'p_statement_type','main.py',720),
  ('type -> STRING','type',1,'p_statement_type','main.py',721),
  ('type -> INT','type',1,'p_statement_type','main.py',722),
  ('type -> BOOL','type',1,'p_statement_type','main.py',723),
  ('type -> BYTES','type',1,'p_statement_type','main.py',724),
  ('type -> OPERATION','type',1,'p_statement_type','main.py',725),
  ('type -> ADDRESS','type',1,'p_statement_type','main.py',726),
  ('type -> LPARENS LPAIR type type RPARENS','type',5,'p_statement_type','main.py',727),
  ('stmt -> DIP body','stmt',2,'p_dip','main.py',750),
  ('stmt -> PUSH type value','stmt',3,'p_statement_push','main.py',764),
  ('stmt -> FAILWITH','stmt',1,'p_statement_failwith','main.py',788),
  ('stmt -> FAIL','stmt',1,'p_statement_failwith','main.py',789),
  ('stmt -> PRINTER','stmt',1,'p_printer','main.py',803),
]
